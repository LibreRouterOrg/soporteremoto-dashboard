// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Storyshots Comments Empty list 1`] = `
<Comments
  comments={Array []}
  user={
    Object {
      "avatar": "gferrero_avatar.jpeg",
      "client": Object {
        "hostname": "gf",
        "ip": "192.168.1.4",
      },
      "is_bot": false,
      "username": "gferrero",
    }
  }
>
  <div
    className="comments-list"
  >
    <div
      className="comments-list-header"
    >
      Comentarios
    </div>
    <div
      className="comments-list-content"
    >
      <p>
        No hay comentarios
      </p>
    </div>
    <div
      className="comments-list-header"
    >
       Haz un comentario 
    </div>
    <div
      className="comments-list-content"
    >
      <CommentEditor
        onChange={[Function]}
        onSubmit={[Function]}
        submitting={false}
        value={null}
      >
        Loading
      </CommentEditor>
    </div>
  </div>
</Comments>
`;

exports[`Storyshots Comments List of Comments 1`] = `
<Comments
  comments={
    Array [
      Object {
        "body": "Este es un comentario de ejemplo.",
        "timestamp": 1561041610000,
        "user": Object {
          "avatar": "gferrero_avatar.jpeg",
          "client": Object {
            "hostname": "gf",
            "ip": "192.168.1.4",
          },
          "is_bot": false,
          "username": "gferrero",
        },
      },
      Object {
        "body": "En respuesta al comentario de ejemplo",
        "timestamp": 1565049600000,
        "user": Object {
          "username": "gmarcos",
        },
      },
      Object {
        "body": "En respuesta a la respuesta del comentario de ejemplo",
        "timestamp": 1565308800000,
        "user": Object {
          "username": "nicop",
        },
      },
    ]
  }
  user={
    Object {
      "avatar": "gferrero_avatar.jpeg",
      "client": Object {
        "hostname": "gf",
        "ip": "192.168.1.4",
      },
      "is_bot": false,
      "username": "gferrero",
    }
  }
>
  <div
    className="comments-list"
  >
    <div
      className="comments-list-header"
    >
      Comentarios
    </div>
    <div
      className="comments-list-content"
    >
      <p>
        No hay comentarios
      </p>
    </div>
    <div
      className="comments-list-header"
    >
       Haz un comentario 
    </div>
    <div
      className="comments-list-content"
    >
      <CommentEditor
        onChange={[Function]}
        onSubmit={[Function]}
        submitting={false}
        value={null}
      >
        Loading
      </CommentEditor>
    </div>
  </div>
</Comments>
`;

exports[`Storyshots Comments New Comment Editor 1`] = `
<CommentEditor
  body="Este es un comentario de ejemplo."
  timestamp={1561041610000}
  user={
    Object {
      "avatar": "gferrero_avatar.jpeg",
      "client": Object {
        "hostname": "gf",
        "ip": "192.168.1.4",
      },
      "is_bot": false,
      "username": "gferrero",
    }
  }
>
  Loading
</CommentEditor>
`;

exports[`Storyshots Comments Single Comment 1`] = `
<Comment
  body="Este es un comentario de ejemplo."
  timestamp={1561041610000}
  user={
    Object {
      "avatar": "gferrero_avatar.jpeg",
      "client": Object {
        "hostname": "gf",
        "ip": "192.168.1.4",
      },
      "is_bot": false,
      "username": "gferrero",
    }
  }
/>
`;

exports[`Storyshots IssuePage Basic Issue Page 1`] = `
<IssueContextProvider
  issue={
    Object {
      "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
      "comments": Array [],
      "commonIssueId": "unreachable_network",
      "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
      "node": "ql-gferrero",
      "status": "open",
      "timestamp": 1561041610000,
      "user": Object {
        "avatar": "gferrero_avatar.jpeg",
        "client": Object {
          "hostname": "gf",
          "ip": "192.168.1.4",
        },
        "is_bot": false,
        "username": "gferrero",
      },
    }
  }
>
  <Issue
    issueId="%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256"
  >
    <div
      className="issue-page"
    >
      <NavBar>
        <div
          className="nav-bar"
        >
          <Button
            block={false}
            ghost={false}
            htmlType="button"
            icon="arrow-left"
            loading={false}
            onClick={[Function]}
            type="link"
          >
            <button
              className="ant-btn ant-btn-link ant-btn-icon-only"
              onClick={[Function]}
              type="button"
            >
              <Icon
                type="arrow-left"
              >
                <LocaleReceiver
                  componentName="Icon"
                >
                  <i
                    aria-label="icon: arrow-left"
                    className="anticon anticon-arrow-left"
                  >
                    <IconReact
                      className=""
                      type="arrow-left-o"
                    >
                      <svg
                        aria-hidden="true"
                        className=""
                        data-icon="arrow-left"
                        fill="currentColor"
                        focusable="false"
                        height="1em"
                        key="svg-arrow-left"
                        viewBox="64 64 896 896"
                        width="1em"
                      >
                        <path
                          d="M872 474H286.9l350.2-304c5.6-4.9 2.2-14-5.2-14h-88.5c-3.9 0-7.6 1.4-10.5 3.9L155 487.8a31.96 31.96 0 0 0 0 48.3L535.1 866c1.5 1.3 3.3 2 5.2 2h91.5c7.4 0 10.8-9.2 5.2-14L286.9 550H872c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z"
                          key="svg-arrow-left-svg-0"
                        />
                      </svg>
                    </IconReact>
                  </i>
                </LocaleReceiver>
              </Icon>
            </button>
          </Button>
          <div
            className="nav-bar-menu"
          >
            <Menu
              onChange={[Function]}
              status="open"
            >
              <div>
                <Dropdown
                  mouseEnterDelay={0.15}
                  mouseLeaveDelay={0.1}
                  overlay={
                    <Menu
                      onClick={[Function]}
                    >
                      <MenuItem>
                        Marcar como Resuelto
                      </MenuItem>
                    </Menu>
                  }
                  placement="bottomRight"
                >
                  <Dropdown
                    defaultVisible={false}
                    mouseEnterDelay={0.15}
                    mouseLeaveDelay={0.1}
                    onVisibleChange={[Function]}
                    overlay={[Function]}
                    overlayClassName=""
                    overlayStyle={Object {}}
                    placement="bottomRight"
                    prefixCls="ant-dropdown"
                    showAction={Array []}
                    transitionName="slide-up"
                    trigger={
                      Array [
                        "hover",
                      ]
                    }
                  >
                    <Trigger
                      action={
                        Array [
                          "hover",
                        ]
                      }
                      afterPopupVisibleChange={[Function]}
                      blurDelay={0.15}
                      builtinPlacements={
                        Object {
                          "bottomCenter": Object {
                            "offset": Array [
                              0,
                              4,
                            ],
                            "overflow": Object {
                              "adjustX": 1,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "tc",
                              "bc",
                            ],
                            "targetOffset": Array [
                              0,
                              0,
                            ],
                          },
                          "bottomLeft": Object {
                            "offset": Array [
                              0,
                              4,
                            ],
                            "overflow": Object {
                              "adjustX": 1,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "tl",
                              "bl",
                            ],
                            "targetOffset": Array [
                              0,
                              0,
                            ],
                          },
                          "bottomRight": Object {
                            "offset": Array [
                              0,
                              4,
                            ],
                            "overflow": Object {
                              "adjustX": 1,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "tr",
                              "br",
                            ],
                            "targetOffset": Array [
                              0,
                              0,
                            ],
                          },
                          "topCenter": Object {
                            "offset": Array [
                              0,
                              -4,
                            ],
                            "overflow": Object {
                              "adjustX": 1,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "bc",
                              "tc",
                            ],
                            "targetOffset": Array [
                              0,
                              0,
                            ],
                          },
                          "topLeft": Object {
                            "offset": Array [
                              0,
                              -4,
                            ],
                            "overflow": Object {
                              "adjustX": 1,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "bl",
                              "tl",
                            ],
                            "targetOffset": Array [
                              0,
                              0,
                            ],
                          },
                          "topRight": Object {
                            "offset": Array [
                              0,
                              -4,
                            ],
                            "overflow": Object {
                              "adjustX": 1,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "br",
                              "tr",
                            ],
                            "targetOffset": Array [
                              0,
                              0,
                            ],
                          },
                        }
                      }
                      defaultPopupVisible={false}
                      defaultVisible={false}
                      destroyPopupOnHide={false}
                      focusDelay={0}
                      getDocument={[Function]}
                      getPopupClassNameFromAlign={[Function]}
                      hideAction={Array []}
                      mask={false}
                      maskClosable={true}
                      mouseEnterDelay={0.15}
                      mouseLeaveDelay={0.1}
                      onPopupAlign={[Function]}
                      onPopupVisibleChange={[Function]}
                      onVisibleChange={[Function]}
                      overlay={[Function]}
                      popup={[Function]}
                      popupAlign={Object {}}
                      popupClassName=""
                      popupPlacement="bottomRight"
                      popupStyle={Object {}}
                      popupTransitionName="slide-up"
                      popupVisible={false}
                      prefixCls="ant-dropdown"
                      showAction={Array []}
                    >
                      <Button
                        block={false}
                        className="action-trigger ant-dropdown-trigger"
                        ghost={false}
                        htmlType="button"
                        key="trigger"
                        loading={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        size="small"
                      >
                        <Wave>
                          <button
                            className="ant-btn action-trigger ant-dropdown-trigger ant-btn-sm"
                            onClick={[Function]}
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            type="button"
                          >
                            <Icon
                              key=".0"
                              type="ellipsis"
                            >
                              <LocaleReceiver
                                componentName="Icon"
                              >
                                <i
                                  aria-label="icon: ellipsis"
                                  className="anticon anticon-ellipsis"
                                >
                                  <IconReact
                                    className=""
                                    type="ellipsis-o"
                                  >
                                    <svg
                                      aria-hidden="true"
                                      className=""
                                      data-icon="ellipsis"
                                      fill="currentColor"
                                      focusable="false"
                                      height="1em"
                                      key="svg-ellipsis"
                                      viewBox="64 64 896 896"
                                      width="1em"
                                    >
                                      <path
                                        d="M176 511a56 56 0 1 0 112 0 56 56 0 1 0-112 0zm280 0a56 56 0 1 0 112 0 56 56 0 1 0-112 0zm280 0a56 56 0 1 0 112 0 56 56 0 1 0-112 0z"
                                        key="svg-ellipsis-svg-0"
                                      />
                                    </svg>
                                  </IconReact>
                                </i>
                              </LocaleReceiver>
                            </Icon>
                          </button>
                        </Wave>
                      </Button>
                    </Trigger>
                  </Dropdown>
                </Dropdown>
              </div>
            </Menu>
          </div>
        </div>
      </NavBar>
      <IssueDetail>
        <div
          className="issue-detail"
        >
          <div
            className="header"
          >
            <div
              className="header-title"
            >
              Reporte 25iaLjm
              <div
                className="header-status"
              >
                <_default
                  status="open"
                >
                  <span>
                    <Icon
                      className="status-icon status-icon--open"
                      type="exclamation-circle"
                    >
                      <LocaleReceiver
                        componentName="Icon"
                      >
                        <i
                          aria-label="icon: exclamation-circle"
                          className="anticon anticon-exclamation-circle status-icon status-icon--open"
                        >
                          <IconReact
                            className=""
                            type="exclamation-circle-o"
                          >
                            <svg
                              aria-hidden="true"
                              className=""
                              data-icon="exclamation-circle"
                              fill="currentColor"
                              focusable="false"
                              height="1em"
                              key="svg-exclamation-circle"
                              viewBox="64 64 896 896"
                              width="1em"
                            >
                              <path
                                d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
                                key="svg-exclamation-circle-svg-0"
                              />
                              <path
                                d="M464 688a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z"
                                key="svg-exclamation-circle-svg-1"
                              />
                            </svg>
                          </IconReact>
                        </i>
                      </LocaleReceiver>
                    </Icon>
                    Abierto
                  </span>
                </_default>
              </div>
            </div>
            <div
              className="header-subtitle"
            >
              Por 
              gferrero
               en ql-gferrero
               el 20 de junio de 2019 11:40
            </div>
          </div>
          <div
            className="section"
          >
            <div
              className="section-title"
            >
              Asunto
            </div>
            <div
              className="section-content"
            >
              <div
                className="common-issue-text"
              >
                <Subject
                  issue={
                    Object {
                      "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                      "comments": Array [],
                      "commonIssueId": "unreachable_network",
                      "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                      "node": "ql-gferrero",
                      "status": "open",
                      "timestamp": 1561041610000,
                      "user": Object {
                        "avatar": "gferrero_avatar.jpeg",
                        "client": Object {
                          "hostname": "gf",
                          "ip": "192.168.1.4",
                        },
                        "is_bot": false,
                        "username": "gferrero",
                      },
                    }
                  }
                >
                  Veo mi red wifi disponible pero no puedo conectarme
                </Subject>
              </div>
            </div>
          </div>
          <div
            className="section"
          >
            <div
              className="section-title"
            >
              Detalles
            </div>
            <div
              className="section-content"
            >
              Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop
            </div>
          </div>
        </div>
      </IssueDetail>
      <Comments
        issueId="%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256"
      >
        <div
          className="comments-list"
        >
          <div
            className="comments-list-header"
          >
            Comentarios
          </div>
          <div
            className="comments-list-content"
          >
            <p>
              No hay comentarios
            </p>
          </div>
          <div
            className="comments-list-header"
          >
             Haz un comentario 
          </div>
          <div
            className="comments-list-content"
          >
            <CommentEditor
              onChange={[Function]}
              onSubmit={[Function]}
              submitting={false}
              value={null}
            >
              Loading
            </CommentEditor>
          </div>
        </div>
      </Comments>
    </div>
  </Issue>
</IssueContextProvider>
`;

exports[`Storyshots IssuePage Larger common issue path 1`] = `
<IssueContextProvider
  issue={
    Object {
      "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
      "comments": Array [],
      "commonIssueId": "from_precise_moment",
      "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
      "node": "ql-gferrero",
      "status": "open",
      "timestamp": 1561041610000,
      "user": Object {
        "avatar": "gferrero_avatar.jpeg",
        "client": Object {
          "hostname": "gf",
          "ip": "192.168.1.4",
        },
        "is_bot": false,
        "username": "gferrero",
      },
    }
  }
>
  <Issue
    issueId="%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256"
  >
    <div
      className="issue-page"
    >
      <NavBar>
        <div
          className="nav-bar"
        >
          <Button
            block={false}
            ghost={false}
            htmlType="button"
            icon="arrow-left"
            loading={false}
            onClick={[Function]}
            type="link"
          >
            <button
              className="ant-btn ant-btn-link ant-btn-icon-only"
              onClick={[Function]}
              type="button"
            >
              <Icon
                type="arrow-left"
              >
                <LocaleReceiver
                  componentName="Icon"
                >
                  <i
                    aria-label="icon: arrow-left"
                    className="anticon anticon-arrow-left"
                  >
                    <IconReact
                      className=""
                      type="arrow-left-o"
                    >
                      <svg
                        aria-hidden="true"
                        className=""
                        data-icon="arrow-left"
                        fill="currentColor"
                        focusable="false"
                        height="1em"
                        key="svg-arrow-left"
                        viewBox="64 64 896 896"
                        width="1em"
                      >
                        <path
                          d="M872 474H286.9l350.2-304c5.6-4.9 2.2-14-5.2-14h-88.5c-3.9 0-7.6 1.4-10.5 3.9L155 487.8a31.96 31.96 0 0 0 0 48.3L535.1 866c1.5 1.3 3.3 2 5.2 2h91.5c7.4 0 10.8-9.2 5.2-14L286.9 550H872c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z"
                          key="svg-arrow-left-svg-0"
                        />
                      </svg>
                    </IconReact>
                  </i>
                </LocaleReceiver>
              </Icon>
            </button>
          </Button>
          <div
            className="nav-bar-menu"
          >
            <Menu
              onChange={[Function]}
              status="open"
            >
              <div>
                <Dropdown
                  mouseEnterDelay={0.15}
                  mouseLeaveDelay={0.1}
                  overlay={
                    <Menu
                      onClick={[Function]}
                    >
                      <MenuItem>
                        Marcar como Resuelto
                      </MenuItem>
                    </Menu>
                  }
                  placement="bottomRight"
                >
                  <Dropdown
                    defaultVisible={false}
                    mouseEnterDelay={0.15}
                    mouseLeaveDelay={0.1}
                    onVisibleChange={[Function]}
                    overlay={[Function]}
                    overlayClassName=""
                    overlayStyle={Object {}}
                    placement="bottomRight"
                    prefixCls="ant-dropdown"
                    showAction={Array []}
                    transitionName="slide-up"
                    trigger={
                      Array [
                        "hover",
                      ]
                    }
                  >
                    <Trigger
                      action={
                        Array [
                          "hover",
                        ]
                      }
                      afterPopupVisibleChange={[Function]}
                      blurDelay={0.15}
                      builtinPlacements={
                        Object {
                          "bottomCenter": Object {
                            "offset": Array [
                              0,
                              4,
                            ],
                            "overflow": Object {
                              "adjustX": 1,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "tc",
                              "bc",
                            ],
                            "targetOffset": Array [
                              0,
                              0,
                            ],
                          },
                          "bottomLeft": Object {
                            "offset": Array [
                              0,
                              4,
                            ],
                            "overflow": Object {
                              "adjustX": 1,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "tl",
                              "bl",
                            ],
                            "targetOffset": Array [
                              0,
                              0,
                            ],
                          },
                          "bottomRight": Object {
                            "offset": Array [
                              0,
                              4,
                            ],
                            "overflow": Object {
                              "adjustX": 1,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "tr",
                              "br",
                            ],
                            "targetOffset": Array [
                              0,
                              0,
                            ],
                          },
                          "topCenter": Object {
                            "offset": Array [
                              0,
                              -4,
                            ],
                            "overflow": Object {
                              "adjustX": 1,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "bc",
                              "tc",
                            ],
                            "targetOffset": Array [
                              0,
                              0,
                            ],
                          },
                          "topLeft": Object {
                            "offset": Array [
                              0,
                              -4,
                            ],
                            "overflow": Object {
                              "adjustX": 1,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "bl",
                              "tl",
                            ],
                            "targetOffset": Array [
                              0,
                              0,
                            ],
                          },
                          "topRight": Object {
                            "offset": Array [
                              0,
                              -4,
                            ],
                            "overflow": Object {
                              "adjustX": 1,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "br",
                              "tr",
                            ],
                            "targetOffset": Array [
                              0,
                              0,
                            ],
                          },
                        }
                      }
                      defaultPopupVisible={false}
                      defaultVisible={false}
                      destroyPopupOnHide={false}
                      focusDelay={0}
                      getDocument={[Function]}
                      getPopupClassNameFromAlign={[Function]}
                      hideAction={Array []}
                      mask={false}
                      maskClosable={true}
                      mouseEnterDelay={0.15}
                      mouseLeaveDelay={0.1}
                      onPopupAlign={[Function]}
                      onPopupVisibleChange={[Function]}
                      onVisibleChange={[Function]}
                      overlay={[Function]}
                      popup={[Function]}
                      popupAlign={Object {}}
                      popupClassName=""
                      popupPlacement="bottomRight"
                      popupStyle={Object {}}
                      popupTransitionName="slide-up"
                      popupVisible={false}
                      prefixCls="ant-dropdown"
                      showAction={Array []}
                    >
                      <Button
                        block={false}
                        className="action-trigger ant-dropdown-trigger"
                        ghost={false}
                        htmlType="button"
                        key="trigger"
                        loading={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        size="small"
                      >
                        <Wave>
                          <button
                            className="ant-btn action-trigger ant-dropdown-trigger ant-btn-sm"
                            onClick={[Function]}
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            type="button"
                          >
                            <Icon
                              key=".0"
                              type="ellipsis"
                            >
                              <LocaleReceiver
                                componentName="Icon"
                              >
                                <i
                                  aria-label="icon: ellipsis"
                                  className="anticon anticon-ellipsis"
                                >
                                  <IconReact
                                    className=""
                                    type="ellipsis-o"
                                  >
                                    <svg
                                      aria-hidden="true"
                                      className=""
                                      data-icon="ellipsis"
                                      fill="currentColor"
                                      focusable="false"
                                      height="1em"
                                      key="svg-ellipsis"
                                      viewBox="64 64 896 896"
                                      width="1em"
                                    >
                                      <path
                                        d="M176 511a56 56 0 1 0 112 0 56 56 0 1 0-112 0zm280 0a56 56 0 1 0 112 0 56 56 0 1 0-112 0zm280 0a56 56 0 1 0 112 0 56 56 0 1 0-112 0z"
                                        key="svg-ellipsis-svg-0"
                                      />
                                    </svg>
                                  </IconReact>
                                </i>
                              </LocaleReceiver>
                            </Icon>
                          </button>
                        </Wave>
                      </Button>
                    </Trigger>
                  </Dropdown>
                </Dropdown>
              </div>
            </Menu>
          </div>
        </div>
      </NavBar>
      <IssueDetail>
        <div
          className="issue-detail"
        >
          <div
            className="header"
          >
            <div
              className="header-title"
            >
              Reporte 25iaLjm
              <div
                className="header-status"
              >
                <_default
                  status="open"
                >
                  <span>
                    <Icon
                      className="status-icon status-icon--open"
                      type="exclamation-circle"
                    >
                      <LocaleReceiver
                        componentName="Icon"
                      >
                        <i
                          aria-label="icon: exclamation-circle"
                          className="anticon anticon-exclamation-circle status-icon status-icon--open"
                        >
                          <IconReact
                            className=""
                            type="exclamation-circle-o"
                          >
                            <svg
                              aria-hidden="true"
                              className=""
                              data-icon="exclamation-circle"
                              fill="currentColor"
                              focusable="false"
                              height="1em"
                              key="svg-exclamation-circle"
                              viewBox="64 64 896 896"
                              width="1em"
                            >
                              <path
                                d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
                                key="svg-exclamation-circle-svg-0"
                              />
                              <path
                                d="M464 688a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z"
                                key="svg-exclamation-circle-svg-1"
                              />
                            </svg>
                          </IconReact>
                        </i>
                      </LocaleReceiver>
                    </Icon>
                    Abierto
                  </span>
                </_default>
              </div>
            </div>
            <div
              className="header-subtitle"
            >
              Por 
              gferrero
               en ql-gferrero
               el 20 de junio de 2019 11:40
            </div>
          </div>
          <div
            className="section"
          >
            <div
              className="section-title"
            >
              Asunto
            </div>
            <div
              className="section-content"
            >
              <div
                className="common-issue-text"
              >
                <Subject
                  issue={
                    Object {
                      "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                      "comments": Array [],
                      "commonIssueId": "from_precise_moment",
                      "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                      "node": "ql-gferrero",
                      "status": "open",
                      "timestamp": 1561041610000,
                      "user": Object {
                        "avatar": "gferrero_avatar.jpeg",
                        "client": Object {
                          "hostname": "gf",
                          "ip": "192.168.1.4",
                        },
                        "is_bot": false,
                        "username": "gferrero",
                      },
                    }
                  }
                >
                  Puedo navegar pero anda lento &gt; EmpezÃ³ a andar lento en un momento puntual
                </Subject>
              </div>
            </div>
          </div>
          <div
            className="section"
          >
            <div
              className="section-title"
            >
              Detalles
            </div>
            <div
              className="section-content"
            >
              Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop
            </div>
          </div>
        </div>
      </IssueDetail>
      <Comments
        issueId="%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256"
      >
        <div
          className="comments-list"
        >
          <div
            className="comments-list-header"
          >
            Comentarios
          </div>
          <div
            className="comments-list-content"
          >
            <p>
              No hay comentarios
            </p>
          </div>
          <div
            className="comments-list-header"
          >
             Haz un comentario 
          </div>
          <div
            className="comments-list-content"
          >
            <CommentEditor
              onChange={[Function]}
              onSubmit={[Function]}
              submitting={false}
              value={null}
            >
              Loading
            </CommentEditor>
          </div>
        </div>
      </Comments>
    </div>
  </Issue>
</IssueContextProvider>
`;

exports[`Storyshots IssuePage Non common issue selecetd 1`] = `
<IssueContextProvider
  issue={
    Object {
      "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
      "comments": Array [],
      "commonIssueId": "custom",
      "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
      "node": "ql-gferrero",
      "status": "open",
      "timestamp": 1561041610000,
      "title": "Ayuda para alinear la antena de casa",
      "user": Object {
        "avatar": "gferrero_avatar.jpeg",
        "client": Object {
          "hostname": "gf",
          "ip": "192.168.1.4",
        },
        "is_bot": false,
        "username": "gferrero",
      },
    }
  }
>
  <Issue
    issueId="%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256"
  >
    <div
      className="issue-page"
    >
      <NavBar>
        <div
          className="nav-bar"
        >
          <Button
            block={false}
            ghost={false}
            htmlType="button"
            icon="arrow-left"
            loading={false}
            onClick={[Function]}
            type="link"
          >
            <button
              className="ant-btn ant-btn-link ant-btn-icon-only"
              onClick={[Function]}
              type="button"
            >
              <Icon
                type="arrow-left"
              >
                <LocaleReceiver
                  componentName="Icon"
                >
                  <i
                    aria-label="icon: arrow-left"
                    className="anticon anticon-arrow-left"
                  >
                    <IconReact
                      className=""
                      type="arrow-left-o"
                    >
                      <svg
                        aria-hidden="true"
                        className=""
                        data-icon="arrow-left"
                        fill="currentColor"
                        focusable="false"
                        height="1em"
                        key="svg-arrow-left"
                        viewBox="64 64 896 896"
                        width="1em"
                      >
                        <path
                          d="M872 474H286.9l350.2-304c5.6-4.9 2.2-14-5.2-14h-88.5c-3.9 0-7.6 1.4-10.5 3.9L155 487.8a31.96 31.96 0 0 0 0 48.3L535.1 866c1.5 1.3 3.3 2 5.2 2h91.5c7.4 0 10.8-9.2 5.2-14L286.9 550H872c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z"
                          key="svg-arrow-left-svg-0"
                        />
                      </svg>
                    </IconReact>
                  </i>
                </LocaleReceiver>
              </Icon>
            </button>
          </Button>
          <div
            className="nav-bar-menu"
          >
            <Menu
              onChange={[Function]}
              status="open"
            >
              <div>
                <Dropdown
                  mouseEnterDelay={0.15}
                  mouseLeaveDelay={0.1}
                  overlay={
                    <Menu
                      onClick={[Function]}
                    >
                      <MenuItem>
                        Marcar como Resuelto
                      </MenuItem>
                    </Menu>
                  }
                  placement="bottomRight"
                >
                  <Dropdown
                    defaultVisible={false}
                    mouseEnterDelay={0.15}
                    mouseLeaveDelay={0.1}
                    onVisibleChange={[Function]}
                    overlay={[Function]}
                    overlayClassName=""
                    overlayStyle={Object {}}
                    placement="bottomRight"
                    prefixCls="ant-dropdown"
                    showAction={Array []}
                    transitionName="slide-up"
                    trigger={
                      Array [
                        "hover",
                      ]
                    }
                  >
                    <Trigger
                      action={
                        Array [
                          "hover",
                        ]
                      }
                      afterPopupVisibleChange={[Function]}
                      blurDelay={0.15}
                      builtinPlacements={
                        Object {
                          "bottomCenter": Object {
                            "offset": Array [
                              0,
                              4,
                            ],
                            "overflow": Object {
                              "adjustX": 1,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "tc",
                              "bc",
                            ],
                            "targetOffset": Array [
                              0,
                              0,
                            ],
                          },
                          "bottomLeft": Object {
                            "offset": Array [
                              0,
                              4,
                            ],
                            "overflow": Object {
                              "adjustX": 1,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "tl",
                              "bl",
                            ],
                            "targetOffset": Array [
                              0,
                              0,
                            ],
                          },
                          "bottomRight": Object {
                            "offset": Array [
                              0,
                              4,
                            ],
                            "overflow": Object {
                              "adjustX": 1,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "tr",
                              "br",
                            ],
                            "targetOffset": Array [
                              0,
                              0,
                            ],
                          },
                          "topCenter": Object {
                            "offset": Array [
                              0,
                              -4,
                            ],
                            "overflow": Object {
                              "adjustX": 1,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "bc",
                              "tc",
                            ],
                            "targetOffset": Array [
                              0,
                              0,
                            ],
                          },
                          "topLeft": Object {
                            "offset": Array [
                              0,
                              -4,
                            ],
                            "overflow": Object {
                              "adjustX": 1,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "bl",
                              "tl",
                            ],
                            "targetOffset": Array [
                              0,
                              0,
                            ],
                          },
                          "topRight": Object {
                            "offset": Array [
                              0,
                              -4,
                            ],
                            "overflow": Object {
                              "adjustX": 1,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "br",
                              "tr",
                            ],
                            "targetOffset": Array [
                              0,
                              0,
                            ],
                          },
                        }
                      }
                      defaultPopupVisible={false}
                      defaultVisible={false}
                      destroyPopupOnHide={false}
                      focusDelay={0}
                      getDocument={[Function]}
                      getPopupClassNameFromAlign={[Function]}
                      hideAction={Array []}
                      mask={false}
                      maskClosable={true}
                      mouseEnterDelay={0.15}
                      mouseLeaveDelay={0.1}
                      onPopupAlign={[Function]}
                      onPopupVisibleChange={[Function]}
                      onVisibleChange={[Function]}
                      overlay={[Function]}
                      popup={[Function]}
                      popupAlign={Object {}}
                      popupClassName=""
                      popupPlacement="bottomRight"
                      popupStyle={Object {}}
                      popupTransitionName="slide-up"
                      popupVisible={false}
                      prefixCls="ant-dropdown"
                      showAction={Array []}
                    >
                      <Button
                        block={false}
                        className="action-trigger ant-dropdown-trigger"
                        ghost={false}
                        htmlType="button"
                        key="trigger"
                        loading={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        size="small"
                      >
                        <Wave>
                          <button
                            className="ant-btn action-trigger ant-dropdown-trigger ant-btn-sm"
                            onClick={[Function]}
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            type="button"
                          >
                            <Icon
                              key=".0"
                              type="ellipsis"
                            >
                              <LocaleReceiver
                                componentName="Icon"
                              >
                                <i
                                  aria-label="icon: ellipsis"
                                  className="anticon anticon-ellipsis"
                                >
                                  <IconReact
                                    className=""
                                    type="ellipsis-o"
                                  >
                                    <svg
                                      aria-hidden="true"
                                      className=""
                                      data-icon="ellipsis"
                                      fill="currentColor"
                                      focusable="false"
                                      height="1em"
                                      key="svg-ellipsis"
                                      viewBox="64 64 896 896"
                                      width="1em"
                                    >
                                      <path
                                        d="M176 511a56 56 0 1 0 112 0 56 56 0 1 0-112 0zm280 0a56 56 0 1 0 112 0 56 56 0 1 0-112 0zm280 0a56 56 0 1 0 112 0 56 56 0 1 0-112 0z"
                                        key="svg-ellipsis-svg-0"
                                      />
                                    </svg>
                                  </IconReact>
                                </i>
                              </LocaleReceiver>
                            </Icon>
                          </button>
                        </Wave>
                      </Button>
                    </Trigger>
                  </Dropdown>
                </Dropdown>
              </div>
            </Menu>
          </div>
        </div>
      </NavBar>
      <IssueDetail>
        <div
          className="issue-detail"
        >
          <div
            className="header"
          >
            <div
              className="header-title"
            >
              Reporte 25iaLjm
              <div
                className="header-status"
              >
                <_default
                  status="open"
                >
                  <span>
                    <Icon
                      className="status-icon status-icon--open"
                      type="exclamation-circle"
                    >
                      <LocaleReceiver
                        componentName="Icon"
                      >
                        <i
                          aria-label="icon: exclamation-circle"
                          className="anticon anticon-exclamation-circle status-icon status-icon--open"
                        >
                          <IconReact
                            className=""
                            type="exclamation-circle-o"
                          >
                            <svg
                              aria-hidden="true"
                              className=""
                              data-icon="exclamation-circle"
                              fill="currentColor"
                              focusable="false"
                              height="1em"
                              key="svg-exclamation-circle"
                              viewBox="64 64 896 896"
                              width="1em"
                            >
                              <path
                                d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
                                key="svg-exclamation-circle-svg-0"
                              />
                              <path
                                d="M464 688a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z"
                                key="svg-exclamation-circle-svg-1"
                              />
                            </svg>
                          </IconReact>
                        </i>
                      </LocaleReceiver>
                    </Icon>
                    Abierto
                  </span>
                </_default>
              </div>
            </div>
            <div
              className="header-subtitle"
            >
              Por 
              gferrero
               en ql-gferrero
               el 20 de junio de 2019 11:40
            </div>
          </div>
          <div
            className="section"
          >
            <div
              className="section-title"
            >
              Asunto
            </div>
            <div
              className="section-content"
            >
              <div
                className="common-issue-text"
              >
                <Subject
                  issue={
                    Object {
                      "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                      "comments": Array [],
                      "commonIssueId": "custom",
                      "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                      "node": "ql-gferrero",
                      "status": "open",
                      "timestamp": 1561041610000,
                      "title": "Ayuda para alinear la antena de casa",
                      "user": Object {
                        "avatar": "gferrero_avatar.jpeg",
                        "client": Object {
                          "hostname": "gf",
                          "ip": "192.168.1.4",
                        },
                        "is_bot": false,
                        "username": "gferrero",
                      },
                    }
                  }
                >
                  Ayuda para alinear la antena de casa
                </Subject>
              </div>
            </div>
          </div>
          <div
            className="section"
          >
            <div
              className="section-title"
            >
              Detalles
            </div>
            <div
              className="section-content"
            >
              Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop
            </div>
          </div>
        </div>
      </IssueDetail>
      <Comments
        issueId="%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256"
      >
        <div
          className="comments-list"
        >
          <div
            className="comments-list-header"
          >
            Comentarios
          </div>
          <div
            className="comments-list-content"
          >
            <p>
              No hay comentarios
            </p>
          </div>
          <div
            className="comments-list-header"
          >
             Haz un comentario 
          </div>
          <div
            className="comments-list-content"
          >
            <CommentEditor
              onChange={[Function]}
              onSubmit={[Function]}
              submitting={false}
              value={null}
            >
              Loading
            </CommentEditor>
          </div>
        </div>
      </Comments>
    </div>
  </Issue>
</IssueContextProvider>
`;

exports[`Storyshots LastIssuesPanel Empty List 1`] = `
<LastIssuesPanel
  issues={Array []}
>
  <div
    className="last-issues-panel"
  >
    <IssuesTabs
      closed_issues={Array []}
      open_issues={Array []}
    >
      <Tabs
        defaultActiveKey="1"
        hideAdd={false}
        style={
          Object {
            "display": "flex",
            "flex": "auto",
            "flexDirection": "column",
          }
        }
        tabBarStyle={
          Object {
            "margin": "0",
          }
        }
        tabPosition="top"
      >
        <Tabs
          className="ant-tabs-line"
          defaultActiveKey="1"
          destroyInactiveTabPane={false}
          direction="ltr"
          hideAdd={false}
          navWrapper={[Function]}
          onChange={[Function]}
          prefixCls="ant-tabs"
          renderTabBar={[Function]}
          renderTabContent={[Function]}
          style={
            Object {
              "display": "flex",
              "flex": "auto",
              "flexDirection": "column",
            }
          }
          tabBarPosition="top"
          tabBarStyle={
            Object {
              "margin": "0",
            }
          }
          tabPosition="top"
        >
          <div
            className="ant-tabs ant-tabs-top ant-tabs-line"
            onScroll={[Function]}
            style={
              Object {
                "display": "flex",
                "flex": "auto",
                "flexDirection": "column",
              }
            }
          >
            <TabBar
              activeKey="1"
              animated={true}
              defaultActiveKey="1"
              direction="ltr"
              hideAdd={false}
              key="tabBar"
              navWrapper={[Function]}
              onKeyDown={[Function]}
              onTabClick={[Function]}
              panels={
                Array [
                  <TabPane
                    placeholder={null}
                    style={
                      Object {
                        "display": "flex",
                        "overflow": "auto",
                      }
                    }
                    tab={
                      <React.Fragment>
                        <Icon
                          type="exclamation-circle"
                        />
                         
                        0
                         Abiertos 
                      </React.Fragment>
                    }
                  >
                    <IssuesList
                      issues={Array []}
                    />
                  </TabPane>,
                  <TabPane
                    placeholder={null}
                    tab={
                      <React.Fragment>
                        <Icon
                          type="check-circle"
                        />
                         
                        0
                         Resueltos 
                      </React.Fragment>
                    }
                  >
                    <IssuesList
                      issues={Array []}
                    />
                  </TabPane>,
                ]
              }
              prefixCls="ant-tabs"
              style={
                Object {
                  "display": "flex",
                  "flex": "auto",
                  "flexDirection": "column",
                }
              }
              tabBarExtraContent={null}
              tabBarPosition="top"
              tabBarStyle={
                Object {
                  "margin": "0",
                }
              }
              tabPosition="top"
              type="line"
            >
              <ScrollableInkTabBar
                activeKey="1"
                animated={true}
                className="ant-tabs-top-bar"
                defaultActiveKey="1"
                direction="ltr"
                extraContent={null}
                hideAdd={false}
                inkBarAnimated={true}
                navWrapper={[Function]}
                nextIcon={
                  <span
                    className="ant-tabs-tab-next-icon"
                  >
                    <Icon
                      className="ant-tabs-tab-next-icon-target"
                      type="right"
                    />
                  </span>
                }
                onKeyDown={[Function]}
                onTabClick={[Function]}
                panels={
                  Array [
                    <TabPane
                      placeholder={null}
                      style={
                        Object {
                          "display": "flex",
                          "overflow": "auto",
                        }
                      }
                      tab={
                        <React.Fragment>
                          <Icon
                            type="exclamation-circle"
                          />
                           
                          0
                           Abiertos 
                        </React.Fragment>
                      }
                    >
                      <IssuesList
                        issues={Array []}
                      />
                    </TabPane>,
                    <TabPane
                      placeholder={null}
                      tab={
                        <React.Fragment>
                          <Icon
                            type="check-circle"
                          />
                           
                          0
                           Resueltos 
                        </React.Fragment>
                      }
                    >
                      <IssuesList
                        issues={Array []}
                      />
                    </TabPane>,
                  ]
                }
                prefixCls="ant-tabs"
                prevIcon={
                  <span
                    className="ant-tabs-tab-prev-icon"
                  >
                    <Icon
                      className="ant-tabs-tab-prev-icon-target"
                      type="left"
                    />
                  </span>
                }
                style={
                  Object {
                    "margin": "0",
                  }
                }
                tabBarExtraContent={null}
                tabBarPosition="top"
                tabBarStyle={
                  Object {
                    "margin": "0",
                  }
                }
                tabPosition="top"
                type="line"
              >
                <SaveRef>
                  <TabBarRootNode
                    activeKey="1"
                    animated={true}
                    className="ant-tabs-top-bar"
                    defaultActiveKey="1"
                    direction="ltr"
                    extraContent={null}
                    hideAdd={false}
                    inkBarAnimated={true}
                    navWrapper={[Function]}
                    nextIcon={
                      <span
                        className="ant-tabs-tab-next-icon"
                      >
                        <Icon
                          className="ant-tabs-tab-next-icon-target"
                          type="right"
                        />
                      </span>
                    }
                    onKeyDown={[Function]}
                    onTabClick={[Function]}
                    panels={
                      Array [
                        <TabPane
                          placeholder={null}
                          style={
                            Object {
                              "display": "flex",
                              "overflow": "auto",
                            }
                          }
                          tab={
                            <React.Fragment>
                              <Icon
                                type="exclamation-circle"
                              />
                               
                              0
                               Abiertos 
                            </React.Fragment>
                          }
                        >
                          <IssuesList
                            issues={Array []}
                          />
                        </TabPane>,
                        <TabPane
                          placeholder={null}
                          tab={
                            <React.Fragment>
                              <Icon
                                type="check-circle"
                              />
                               
                              0
                               Resueltos 
                            </React.Fragment>
                          }
                        >
                          <IssuesList
                            issues={Array []}
                          />
                        </TabPane>,
                      ]
                    }
                    prefixCls="ant-tabs"
                    prevIcon={
                      <span
                        className="ant-tabs-tab-prev-icon"
                      >
                        <Icon
                          className="ant-tabs-tab-prev-icon-target"
                          type="left"
                        />
                      </span>
                    }
                    saveRef={[Function]}
                    style={
                      Object {
                        "margin": "0",
                      }
                    }
                    tabBarExtraContent={null}
                    tabBarPosition="top"
                    tabBarStyle={
                      Object {
                        "margin": "0",
                      }
                    }
                    tabPosition="top"
                    type="line"
                  >
                    <div
                      className="ant-tabs-bar ant-tabs-top-bar"
                      onKeyDown={[Function]}
                      role="tablist"
                      style={
                        Object {
                          "margin": "0",
                        }
                      }
                      tabIndex="0"
                    >
                      <ScrollableTabBarNode
                        activeKey="1"
                        animated={true}
                        className="ant-tabs-top-bar"
                        defaultActiveKey="1"
                        direction="ltr"
                        extraContent={null}
                        getRef={[Function]}
                        hideAdd={false}
                        inkBarAnimated={true}
                        navWrapper={[Function]}
                        nextIcon={
                          <span
                            className="ant-tabs-tab-next-icon"
                          >
                            <Icon
                              className="ant-tabs-tab-next-icon-target"
                              type="right"
                            />
                          </span>
                        }
                        onKeyDown={[Function]}
                        onNextClick={[Function]}
                        onPrevClick={[Function]}
                        onTabClick={[Function]}
                        panels={
                          Array [
                            <TabPane
                              placeholder={null}
                              style={
                                Object {
                                  "display": "flex",
                                  "overflow": "auto",
                                }
                              }
                              tab={
                                <React.Fragment>
                                  <Icon
                                    type="exclamation-circle"
                                  />
                                   
                                  0
                                   Abiertos 
                                </React.Fragment>
                              }
                            >
                              <IssuesList
                                issues={Array []}
                              />
                            </TabPane>,
                            <TabPane
                              placeholder={null}
                              tab={
                                <React.Fragment>
                                  <Icon
                                    type="check-circle"
                                  />
                                   
                                  0
                                   Resueltos 
                                </React.Fragment>
                              }
                            >
                              <IssuesList
                                issues={Array []}
                              />
                            </TabPane>,
                          ]
                        }
                        prefixCls="ant-tabs"
                        prevIcon={
                          <span
                            className="ant-tabs-tab-prev-icon"
                          >
                            <Icon
                              className="ant-tabs-tab-prev-icon-target"
                              type="left"
                            />
                          </span>
                        }
                        saveRef={[Function]}
                        scrollAnimated={true}
                        style={
                          Object {
                            "margin": "0",
                          }
                        }
                        tabBarExtraContent={null}
                        tabBarPosition="top"
                        tabBarStyle={
                          Object {
                            "margin": "0",
                          }
                        }
                        tabPosition="top"
                        type="line"
                      >
                        <div
                          className="ant-tabs-nav-container"
                          key="container"
                        >
                          <span
                            className="ant-tabs-tab-prev ant-tabs-tab-btn-disabled"
                            onClick={null}
                            onTransitionEnd={[Function]}
                            unselectable="unselectable"
                          >
                            <span
                              className="ant-tabs-tab-prev-icon"
                            >
                              <Icon
                                className="ant-tabs-tab-prev-icon-target"
                                type="left"
                              >
                                <LocaleReceiver
                                  componentName="Icon"
                                >
                                  <i
                                    aria-label="icon: left"
                                    className="anticon anticon-left ant-tabs-tab-prev-icon-target"
                                  >
                                    <IconReact
                                      className=""
                                      type="left-o"
                                    >
                                      <svg
                                        aria-hidden="true"
                                        className=""
                                        data-icon="left"
                                        fill="currentColor"
                                        focusable="false"
                                        height="1em"
                                        key="svg-left"
                                        viewBox="64 64 896 896"
                                        width="1em"
                                      >
                                        <path
                                          d="M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 0 0 0 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z"
                                          key="svg-left-svg-0"
                                        />
                                      </svg>
                                    </IconReact>
                                  </i>
                                </LocaleReceiver>
                              </Icon>
                            </span>
                          </span>
                          <span
                            className="ant-tabs-tab-next ant-tabs-tab-btn-disabled"
                            onClick={null}
                            unselectable="unselectable"
                          >
                            <span
                              className="ant-tabs-tab-next-icon"
                            >
                              <Icon
                                className="ant-tabs-tab-next-icon-target"
                                type="right"
                              >
                                <LocaleReceiver
                                  componentName="Icon"
                                >
                                  <i
                                    aria-label="icon: right"
                                    className="anticon anticon-right ant-tabs-tab-next-icon-target"
                                  >
                                    <IconReact
                                      className=""
                                      type="right-o"
                                    >
                                      <svg
                                        aria-hidden="true"
                                        className=""
                                        data-icon="right"
                                        fill="currentColor"
                                        focusable="false"
                                        height="1em"
                                        key="svg-right"
                                        viewBox="64 64 896 896"
                                        width="1em"
                                      >
                                        <path
                                          d="M765.7 486.8L314.9 134.7A7.97 7.97 0 0 0 302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 0 0 0-50.4z"
                                          key="svg-right-svg-0"
                                        />
                                      </svg>
                                    </IconReact>
                                  </i>
                                </LocaleReceiver>
                              </Icon>
                            </span>
                          </span>
                          <div
                            className="ant-tabs-nav-wrap"
                          >
                            <div
                              className="ant-tabs-nav-scroll"
                            >
                              <div
                                className="ant-tabs-nav ant-tabs-nav-animated"
                              >
                                <TabBarTabsNode
                                  activeKey="1"
                                  animated={true}
                                  className="ant-tabs-top-bar"
                                  defaultActiveKey="1"
                                  direction="ltr"
                                  extraContent={null}
                                  hideAdd={false}
                                  inkBarAnimated={true}
                                  navWrapper={[Function]}
                                  nextIcon={
                                    <span
                                      className="ant-tabs-tab-next-icon"
                                    >
                                      <Icon
                                        className="ant-tabs-tab-next-icon-target"
                                        type="right"
                                      />
                                    </span>
                                  }
                                  onKeyDown={[Function]}
                                  onTabClick={[Function]}
                                  panels={
                                    Array [
                                      <TabPane
                                        placeholder={null}
                                        style={
                                          Object {
                                            "display": "flex",
                                            "overflow": "auto",
                                          }
                                        }
                                        tab={
                                          <React.Fragment>
                                            <Icon
                                              type="exclamation-circle"
                                            />
                                             
                                            0
                                             Abiertos 
                                          </React.Fragment>
                                        }
                                      >
                                        <IssuesList
                                          issues={Array []}
                                        />
                                      </TabPane>,
                                      <TabPane
                                        placeholder={null}
                                        tab={
                                          <React.Fragment>
                                            <Icon
                                              type="check-circle"
                                            />
                                             
                                            0
                                             Resueltos 
                                          </React.Fragment>
                                        }
                                      >
                                        <IssuesList
                                          issues={Array []}
                                        />
                                      </TabPane>,
                                    ]
                                  }
                                  prefixCls="ant-tabs"
                                  prevIcon={
                                    <span
                                      className="ant-tabs-tab-prev-icon"
                                    >
                                      <Icon
                                        className="ant-tabs-tab-prev-icon-target"
                                        type="left"
                                      />
                                    </span>
                                  }
                                  renderTabBarNode={null}
                                  saveRef={[Function]}
                                  style={
                                    Object {
                                      "margin": "0",
                                    }
                                  }
                                  tabBarExtraContent={null}
                                  tabBarGutter={null}
                                  tabBarPosition="top"
                                  tabBarStyle={
                                    Object {
                                      "margin": "0",
                                    }
                                  }
                                  tabPosition="top"
                                  type="line"
                                >
                                  <div>
                                    <div
                                      aria-disabled="false"
                                      aria-selected="true"
                                      className="ant-tabs-tab-active ant-tabs-tab"
                                      key="1"
                                      onClick={[Function]}
                                      role="tab"
                                      style={
                                        Object {
                                          "marginRight": null,
                                        }
                                      }
                                    >
                                      <Icon
                                        type="exclamation-circle"
                                      >
                                        <LocaleReceiver
                                          componentName="Icon"
                                        >
                                          <i
                                            aria-label="icon: exclamation-circle"
                                            className="anticon anticon-exclamation-circle"
                                          >
                                            <IconReact
                                              className=""
                                              type="exclamation-circle-o"
                                            >
                                              <svg
                                                aria-hidden="true"
                                                className=""
                                                data-icon="exclamation-circle"
                                                fill="currentColor"
                                                focusable="false"
                                                height="1em"
                                                key="svg-exclamation-circle"
                                                viewBox="64 64 896 896"
                                                width="1em"
                                              >
                                                <path
                                                  d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
                                                  key="svg-exclamation-circle-svg-0"
                                                />
                                                <path
                                                  d="M464 688a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z"
                                                  key="svg-exclamation-circle-svg-1"
                                                />
                                              </svg>
                                            </IconReact>
                                          </i>
                                        </LocaleReceiver>
                                      </Icon>
                                       
                                      0
                                       Abiertos 
                                    </div>
                                    <div
                                      aria-disabled="false"
                                      aria-selected="false"
                                      className=" ant-tabs-tab"
                                      key="2"
                                      onClick={[Function]}
                                      role="tab"
                                      style={
                                        Object {
                                          "marginRight": null,
                                        }
                                      }
                                    >
                                      <Icon
                                        type="check-circle"
                                      >
                                        <LocaleReceiver
                                          componentName="Icon"
                                        >
                                          <i
                                            aria-label="icon: check-circle"
                                            className="anticon anticon-check-circle"
                                          >
                                            <IconReact
                                              className=""
                                              type="check-circle-o"
                                            >
                                              <svg
                                                aria-hidden="true"
                                                className=""
                                                data-icon="check-circle"
                                                fill="currentColor"
                                                focusable="false"
                                                height="1em"
                                                key="svg-check-circle"
                                                viewBox="64 64 896 896"
                                                width="1em"
                                              >
                                                <path
                                                  d="M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0 0 51.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z"
                                                  key="svg-check-circle-svg-0"
                                                />
                                                <path
                                                  d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
                                                  key="svg-check-circle-svg-1"
                                                />
                                              </svg>
                                            </IconReact>
                                          </i>
                                        </LocaleReceiver>
                                      </Icon>
                                       
                                      0
                                       Resueltos 
                                    </div>
                                  </div>
                                </TabBarTabsNode>
                                <InkTabBarNode
                                  activeKey="1"
                                  animated={true}
                                  className="ant-tabs-top-bar"
                                  defaultActiveKey="1"
                                  direction="ltr"
                                  extraContent={null}
                                  getRef={[Function]}
                                  hideAdd={false}
                                  inkBarAnimated={true}
                                  navWrapper={[Function]}
                                  nextIcon={
                                    <span
                                      className="ant-tabs-tab-next-icon"
                                    >
                                      <Icon
                                        className="ant-tabs-tab-next-icon-target"
                                        type="right"
                                      />
                                    </span>
                                  }
                                  onKeyDown={[Function]}
                                  onTabClick={[Function]}
                                  panels={
                                    Array [
                                      <TabPane
                                        placeholder={null}
                                        style={
                                          Object {
                                            "display": "flex",
                                            "overflow": "auto",
                                          }
                                        }
                                        tab={
                                          <React.Fragment>
                                            <Icon
                                              type="exclamation-circle"
                                            />
                                             
                                            0
                                             Abiertos 
                                          </React.Fragment>
                                        }
                                      >
                                        <IssuesList
                                          issues={Array []}
                                        />
                                      </TabPane>,
                                      <TabPane
                                        placeholder={null}
                                        tab={
                                          <React.Fragment>
                                            <Icon
                                              type="check-circle"
                                            />
                                             
                                            0
                                             Resueltos 
                                          </React.Fragment>
                                        }
                                      >
                                        <IssuesList
                                          issues={Array []}
                                        />
                                      </TabPane>,
                                    ]
                                  }
                                  prefixCls="ant-tabs"
                                  prevIcon={
                                    <span
                                      className="ant-tabs-tab-prev-icon"
                                    >
                                      <Icon
                                        className="ant-tabs-tab-prev-icon-target"
                                        type="left"
                                      />
                                    </span>
                                  }
                                  saveRef={[Function]}
                                  style={
                                    Object {
                                      "margin": "0",
                                    }
                                  }
                                  styles={Object {}}
                                  tabBarExtraContent={null}
                                  tabBarPosition="top"
                                  tabBarStyle={
                                    Object {
                                      "margin": "0",
                                    }
                                  }
                                  tabPosition="top"
                                  type="line"
                                >
                                  <div
                                    className="ant-tabs-ink-bar ant-tabs-ink-bar-animated"
                                    key="inkBar"
                                  />
                                </InkTabBarNode>
                              </div>
                            </div>
                          </div>
                        </div>
                      </ScrollableTabBarNode>
                    </div>
                  </TabBarRootNode>
                </SaveRef>
              </ScrollableInkTabBar>
            </TabBar>
            <Sentinel
              key="sentinelStart"
              setRef={[Function]}
            >
              <div
                onKeyDown={[Function]}
                role="presentation"
                style={
                  Object {
                    "height": 0,
                    "overflow": "hidden",
                    "position": "absolute",
                    "width": 0,
                  }
                }
                tabIndex={0}
              />
            </Sentinel>
            <TabContent
              activeKey="1"
              animated={true}
              animatedWithMargin={true}
              className="ant-tabs-top-content"
              destroyInactiveTabPane={false}
              direction="ltr"
              key="tabContent"
              onChange={[Function]}
              prefixCls="ant-tabs"
              tabBarPosition="top"
            >
              <div
                className="ant-tabs-content ant-tabs-content-animated ant-tabs-top-content"
                style={
                  Object {
                    "marginLeft": "0%",
                  }
                }
              >
                <TabPane
                  active={true}
                  destroyInactiveTabPane={false}
                  key="1"
                  placeholder={null}
                  rootPrefixCls="ant-tabs"
                  style={
                    Object {
                      "display": "flex",
                      "overflow": "auto",
                    }
                  }
                  tab={
                    <React.Fragment>
                      <Icon
                        type="exclamation-circle"
                      />
                       
                      0
                       Abiertos 
                    </React.Fragment>
                  }
                >
                  <div
                    aria-hidden="false"
                    className="ant-tabs-tabpane ant-tabs-tabpane-active"
                    role="tabpanel"
                    style={
                      Object {
                        "display": "flex",
                        "overflow": "auto",
                      }
                    }
                  >
                    <Sentinel
                      setRef={[Function]}
                    >
                      <div
                        onKeyDown={[Function]}
                        role="presentation"
                        style={
                          Object {
                            "height": 0,
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": 0,
                          }
                        }
                        tabIndex={0}
                      />
                    </Sentinel>
                    <IssuesList
                      issues={Array []}
                    >
                      <List
                        bordered={false}
                        className="issues-list"
                        dataSource={Array []}
                        loading={false}
                        pagination={false}
                        renderItem={[Function]}
                        size="small"
                        split={true}
                      >
                        <div
                          className="ant-list issues-list ant-list-sm ant-list-split"
                        >
                          <Spin
                            size="default"
                            spinning={false}
                            wrapperClassName=""
                          >
                            <div
                              className="ant-spin-nested-loading"
                            >
                              <div
                                className="ant-spin-container"
                                key="container"
                              >
                                <div
                                  className="ant-list-empty-text"
                                >
                                  <Empty
                                    image={<Simple />}
                                  >
                                    <LocaleReceiver
                                      componentName="Empty"
                                    >
                                      <div
                                        className="ant-empty ant-empty-normal"
                                      >
                                        <div
                                          className="ant-empty-image"
                                        >
                                          <Simple>
                                            <svg
                                              height="41"
                                              viewBox="0 0 64 41"
                                              width="64"
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <g
                                                fill="none"
                                                fillRule="evenodd"
                                                transform="translate(0 1)"
                                              >
                                                <ellipse
                                                  cx="32"
                                                  cy="33"
                                                  fill="#F5F5F5"
                                                  rx="32"
                                                  ry="7"
                                                />
                                                <g
                                                  fillRule="nonzero"
                                                  stroke="#D9D9D9"
                                                >
                                                  <path
                                                    d="M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z"
                                                  />
                                                  <path
                                                    d="M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z"
                                                    fill="#FAFAFA"
                                                  />
                                                </g>
                                              </g>
                                            </svg>
                                          </Simple>
                                        </div>
                                        <p
                                          className="ant-empty-description"
                                        >
                                          No Data
                                        </p>
                                      </div>
                                    </LocaleReceiver>
                                  </Empty>
                                </div>
                              </div>
                            </div>
                          </Spin>
                        </div>
                      </List>
                    </IssuesList>
                    <Sentinel
                      setRef={[Function]}
                    >
                      <div
                        onKeyDown={[Function]}
                        role="presentation"
                        style={
                          Object {
                            "height": 0,
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": 0,
                          }
                        }
                        tabIndex={0}
                      />
                    </Sentinel>
                  </div>
                </TabPane>
                <TabPane
                  active={false}
                  destroyInactiveTabPane={false}
                  key="2"
                  placeholder={null}
                  rootPrefixCls="ant-tabs"
                  tab={
                    <React.Fragment>
                      <Icon
                        type="check-circle"
                      />
                       
                      0
                       Resueltos 
                    </React.Fragment>
                  }
                >
                  <div
                    aria-hidden="true"
                    className="ant-tabs-tabpane ant-tabs-tabpane-inactive"
                    role="tabpanel"
                  />
                </TabPane>
              </div>
            </TabContent>
            <Sentinel
              key="sentinelEnd"
              setRef={[Function]}
            >
              <div
                onKeyDown={[Function]}
                role="presentation"
                style={
                  Object {
                    "height": 0,
                    "overflow": "hidden",
                    "position": "absolute",
                    "width": 0,
                  }
                }
                tabIndex={0}
              />
            </Sentinel>
          </div>
        </Tabs>
      </Tabs>
    </IssuesTabs>
    <NewIssue>
      <div
        className="new-issue"
      >
        <ForwardRef
          to="/reports/new"
        >
          <Location>
            <LocationProvider
              history={
                Object {
                  "_onTransitionComplete": [Function],
                  "listen": [Function],
                  "location": Object {
                    "assign": [Function],
                    "hash": "",
                    "host": "localhost",
                    "hostname": "localhost",
                    "href": "http://localhost/",
                    "key": "initial",
                    "origin": "http://localhost",
                    "pathname": "/",
                    "port": "",
                    "protocol": "http:",
                    "reload": [Function],
                    "replace": [Function],
                    "search": "",
                    "state": null,
                    "toString": [Function],
                  },
                  "navigate": [Function],
                  "transitioning": false,
                }
              }
            >
              <a
                href="/reports/new"
                onClick={[Function]}
              >
                <Button
                  block={false}
                  ghost={false}
                  htmlType="button"
                  icon="notification"
                  loading={false}
                  size="large"
                  type="link"
                >
                  <button
                    className="ant-btn ant-btn-link ant-btn-lg"
                    onClick={[Function]}
                    type="button"
                  >
                    <Icon
                      type="notification"
                    >
                      <LocaleReceiver
                        componentName="Icon"
                      >
                        <i
                          aria-label="icon: notification"
                          className="anticon anticon-notification"
                        >
                          <IconReact
                            className=""
                            type="notification-o"
                          >
                            <svg
                              aria-hidden="true"
                              className=""
                              data-icon="notification"
                              fill="currentColor"
                              focusable="false"
                              height="1em"
                              key="svg-notification"
                              viewBox="64 64 896 896"
                              width="1em"
                            >
                              <path
                                d="M880 112c-3.8 0-7.7.7-11.6 2.3L292 345.9H128c-8.8 0-16 7.4-16 16.6v299c0 9.2 7.2 16.6 16 16.6h101.7c-3.7 11.6-5.7 23.9-5.7 36.4 0 65.9 53.8 119.5 120 119.5 55.4 0 102.1-37.6 115.9-88.4l408.6 164.2c3.9 1.5 7.8 2.3 11.6 2.3 16.9 0 32-14.2 32-33.2V145.2C912 126.2 897 112 880 112zM344 762.3c-26.5 0-48-21.4-48-47.8 0-11.2 3.9-21.9 11-30.4l84.9 34.1c-2 24.6-22.7 44.1-47.9 44.1zm496 58.4L318.8 611.3l-12.9-5.2H184V417.9h121.9l12.9-5.2L840 203.3v617.4z"
                                key="svg-notification-svg-0"
                              />
                            </svg>
                          </IconReact>
                        </i>
                      </LocaleReceiver>
                    </Icon>
                    <span
                      key=".0"
                    >
                      Nuevo Reporte
                    </span>
                  </button>
                </Button>
              </a>
            </LocationProvider>
          </Location>
        </ForwardRef>
      </div>
    </NewIssue>
  </div>
</LastIssuesPanel>
`;

exports[`Storyshots LastIssuesPanel Open and Closed Issues 1`] = `
<LastIssuesPanel
  issues={
    Array [
      Object {
        "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
        "comments": Array [],
        "commonIssueId": "unreachable_network",
        "common_issue": Object {
          "id": "cuts_out_connection",
          "parent": null,
          "text": "Puedo navegar pero de a ratos se corta",
        },
        "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
        "node": "ql-gferrero",
        "status": "open",
        "timestamp": 1561387210000,
        "user": Object {
          "avatar": "gferrero_avatar.jpeg",
          "client": Object {
            "hostname": "gf",
            "ip": "192.168.1.4",
          },
          "is_bot": false,
          "username": "gferrero",
        },
      },
      Object {
        "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
        "comments": Array [],
        "commonIssueId": "unreachable_network",
        "common_issue": Object {
          "id": "only_with_some_sites",
          "parent": "slow_connection",
          "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
        },
        "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
        "node": "ql-gferrero",
        "status": "open",
        "timestamp": 1561560010000,
        "user": Object {
          "username": "chana",
        },
      },
      Object {
        "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
        "comments": Array [],
        "commonIssueId": "unreachable_network",
        "common_issue": Object {
          "id": "only_by_ip",
          "parent": "unreachable_resources",
          "text": "Puedo utilizar algunas aplicaciones como whatsapp pero no puedo navegar",
        },
        "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
        "node": "ql-gferrero",
        "status": "open",
        "timestamp": 1561473610000,
        "user": Object {
          "username": "ale",
        },
      },
      Object {
        "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
        "comments": Array [],
        "commonIssueId": "unreachable_network",
        "common_issue": Object {
          "id": "from_precise_moment",
          "parent": "slow_connection",
          "text": "EmpezÃ³ a andar lento en un momento puntual",
        },
        "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
        "node": "ql-gferrero",
        "status": "open",
        "timestamp": 1561300810000,
        "user": Object {
          "username": "sofi",
        },
      },
      Object {
        "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
        "comments": Array [],
        "commonIssueId": "unreachable_network",
        "common_issue": Object {
          "id": "unavailable_network",
          "parent": null,
          "text": "Red wifi no disponible",
        },
        "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
        "node": "ql-gferrero",
        "status": "open",
        "timestamp": 1561128010000,
        "user": Object {
          "username": "lalo",
        },
      },
      Object {
        "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
        "comments": Array [],
        "commonIssueId": "unreachable_network",
        "common_issue": Object {
          "id": "all_resources",
          "parent": "unreachable_resources",
          "text": "No puedo visitar ninguna pÃ¡gina ni usar ninguna aplicaciÃ³n",
        },
        "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
        "node": "ql-gferrero",
        "status": "closed",
        "timestamp": 1561128010000,
        "user": Object {
          "username": "jesi",
        },
      },
      Object {
        "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
        "comments": Array [],
        "commonIssueId": "unreachable_network",
        "common_issue": Object {
          "id": "only_with_some_sites",
          "parent": "slow_connection",
          "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
        },
        "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
        "node": "ql-gferrero",
        "status": "closed",
        "timestamp": 1560523210000,
        "user": Object {
          "username": "nati",
        },
      },
    ]
  }
>
  <div
    className="last-issues-panel"
  >
    <IssuesTabs
      closed_issues={
        Array [
          Object {
            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
            "comments": Array [],
            "commonIssueId": "unreachable_network",
            "common_issue": Object {
              "id": "all_resources",
              "parent": "unreachable_resources",
              "text": "No puedo visitar ninguna pÃ¡gina ni usar ninguna aplicaciÃ³n",
            },
            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
            "node": "ql-gferrero",
            "status": "closed",
            "timestamp": 1561128010000,
            "user": Object {
              "username": "jesi",
            },
          },
          Object {
            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
            "comments": Array [],
            "commonIssueId": "unreachable_network",
            "common_issue": Object {
              "id": "only_with_some_sites",
              "parent": "slow_connection",
              "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
            },
            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
            "node": "ql-gferrero",
            "status": "closed",
            "timestamp": 1560523210000,
            "user": Object {
              "username": "nati",
            },
          },
        ]
      }
      open_issues={
        Array [
          Object {
            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
            "comments": Array [],
            "commonIssueId": "unreachable_network",
            "common_issue": Object {
              "id": "only_with_some_sites",
              "parent": "slow_connection",
              "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
            },
            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
            "node": "ql-gferrero",
            "status": "open",
            "timestamp": 1561560010000,
            "user": Object {
              "username": "chana",
            },
          },
          Object {
            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
            "comments": Array [],
            "commonIssueId": "unreachable_network",
            "common_issue": Object {
              "id": "only_by_ip",
              "parent": "unreachable_resources",
              "text": "Puedo utilizar algunas aplicaciones como whatsapp pero no puedo navegar",
            },
            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
            "node": "ql-gferrero",
            "status": "open",
            "timestamp": 1561473610000,
            "user": Object {
              "username": "ale",
            },
          },
          Object {
            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
            "comments": Array [],
            "commonIssueId": "unreachable_network",
            "common_issue": Object {
              "id": "cuts_out_connection",
              "parent": null,
              "text": "Puedo navegar pero de a ratos se corta",
            },
            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
            "node": "ql-gferrero",
            "status": "open",
            "timestamp": 1561387210000,
            "user": Object {
              "avatar": "gferrero_avatar.jpeg",
              "client": Object {
                "hostname": "gf",
                "ip": "192.168.1.4",
              },
              "is_bot": false,
              "username": "gferrero",
            },
          },
          Object {
            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
            "comments": Array [],
            "commonIssueId": "unreachable_network",
            "common_issue": Object {
              "id": "from_precise_moment",
              "parent": "slow_connection",
              "text": "EmpezÃ³ a andar lento en un momento puntual",
            },
            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
            "node": "ql-gferrero",
            "status": "open",
            "timestamp": 1561300810000,
            "user": Object {
              "username": "sofi",
            },
          },
          Object {
            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
            "comments": Array [],
            "commonIssueId": "unreachable_network",
            "common_issue": Object {
              "id": "unavailable_network",
              "parent": null,
              "text": "Red wifi no disponible",
            },
            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
            "node": "ql-gferrero",
            "status": "open",
            "timestamp": 1561128010000,
            "user": Object {
              "username": "lalo",
            },
          },
        ]
      }
    >
      <Tabs
        defaultActiveKey="1"
        hideAdd={false}
        style={
          Object {
            "display": "flex",
            "flex": "auto",
            "flexDirection": "column",
          }
        }
        tabBarStyle={
          Object {
            "margin": "0",
          }
        }
        tabPosition="top"
      >
        <Tabs
          className="ant-tabs-line"
          defaultActiveKey="1"
          destroyInactiveTabPane={false}
          direction="ltr"
          hideAdd={false}
          navWrapper={[Function]}
          onChange={[Function]}
          prefixCls="ant-tabs"
          renderTabBar={[Function]}
          renderTabContent={[Function]}
          style={
            Object {
              "display": "flex",
              "flex": "auto",
              "flexDirection": "column",
            }
          }
          tabBarPosition="top"
          tabBarStyle={
            Object {
              "margin": "0",
            }
          }
          tabPosition="top"
        >
          <div
            className="ant-tabs ant-tabs-top ant-tabs-line"
            onScroll={[Function]}
            style={
              Object {
                "display": "flex",
                "flex": "auto",
                "flexDirection": "column",
              }
            }
          >
            <TabBar
              activeKey="1"
              animated={true}
              defaultActiveKey="1"
              direction="ltr"
              hideAdd={false}
              key="tabBar"
              navWrapper={[Function]}
              onKeyDown={[Function]}
              onTabClick={[Function]}
              panels={
                Array [
                  <TabPane
                    placeholder={null}
                    style={
                      Object {
                        "display": "flex",
                        "overflow": "auto",
                      }
                    }
                    tab={
                      <React.Fragment>
                        <Icon
                          type="exclamation-circle"
                        />
                         
                        5
                         Abiertos 
                      </React.Fragment>
                    }
                  >
                    <IssuesList
                      issues={
                        Array [
                          Object {
                            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                            "comments": Array [],
                            "commonIssueId": "unreachable_network",
                            "common_issue": Object {
                              "id": "only_with_some_sites",
                              "parent": "slow_connection",
                              "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
                            },
                            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                            "node": "ql-gferrero",
                            "status": "open",
                            "timestamp": 1561560010000,
                            "user": Object {
                              "username": "chana",
                            },
                          },
                          Object {
                            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                            "comments": Array [],
                            "commonIssueId": "unreachable_network",
                            "common_issue": Object {
                              "id": "only_by_ip",
                              "parent": "unreachable_resources",
                              "text": "Puedo utilizar algunas aplicaciones como whatsapp pero no puedo navegar",
                            },
                            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                            "node": "ql-gferrero",
                            "status": "open",
                            "timestamp": 1561473610000,
                            "user": Object {
                              "username": "ale",
                            },
                          },
                          Object {
                            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                            "comments": Array [],
                            "commonIssueId": "unreachable_network",
                            "common_issue": Object {
                              "id": "cuts_out_connection",
                              "parent": null,
                              "text": "Puedo navegar pero de a ratos se corta",
                            },
                            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                            "node": "ql-gferrero",
                            "status": "open",
                            "timestamp": 1561387210000,
                            "user": Object {
                              "avatar": "gferrero_avatar.jpeg",
                              "client": Object {
                                "hostname": "gf",
                                "ip": "192.168.1.4",
                              },
                              "is_bot": false,
                              "username": "gferrero",
                            },
                          },
                          Object {
                            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                            "comments": Array [],
                            "commonIssueId": "unreachable_network",
                            "common_issue": Object {
                              "id": "from_precise_moment",
                              "parent": "slow_connection",
                              "text": "EmpezÃ³ a andar lento en un momento puntual",
                            },
                            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                            "node": "ql-gferrero",
                            "status": "open",
                            "timestamp": 1561300810000,
                            "user": Object {
                              "username": "sofi",
                            },
                          },
                          Object {
                            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                            "comments": Array [],
                            "commonIssueId": "unreachable_network",
                            "common_issue": Object {
                              "id": "unavailable_network",
                              "parent": null,
                              "text": "Red wifi no disponible",
                            },
                            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                            "node": "ql-gferrero",
                            "status": "open",
                            "timestamp": 1561128010000,
                            "user": Object {
                              "username": "lalo",
                            },
                          },
                        ]
                      }
                    />
                  </TabPane>,
                  <TabPane
                    placeholder={null}
                    tab={
                      <React.Fragment>
                        <Icon
                          type="check-circle"
                        />
                         
                        2
                         Resueltos 
                      </React.Fragment>
                    }
                  >
                    <IssuesList
                      issues={
                        Array [
                          Object {
                            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                            "comments": Array [],
                            "commonIssueId": "unreachable_network",
                            "common_issue": Object {
                              "id": "all_resources",
                              "parent": "unreachable_resources",
                              "text": "No puedo visitar ninguna pÃ¡gina ni usar ninguna aplicaciÃ³n",
                            },
                            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                            "node": "ql-gferrero",
                            "status": "closed",
                            "timestamp": 1561128010000,
                            "user": Object {
                              "username": "jesi",
                            },
                          },
                          Object {
                            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                            "comments": Array [],
                            "commonIssueId": "unreachable_network",
                            "common_issue": Object {
                              "id": "only_with_some_sites",
                              "parent": "slow_connection",
                              "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
                            },
                            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                            "node": "ql-gferrero",
                            "status": "closed",
                            "timestamp": 1560523210000,
                            "user": Object {
                              "username": "nati",
                            },
                          },
                        ]
                      }
                    />
                  </TabPane>,
                ]
              }
              prefixCls="ant-tabs"
              style={
                Object {
                  "display": "flex",
                  "flex": "auto",
                  "flexDirection": "column",
                }
              }
              tabBarExtraContent={null}
              tabBarPosition="top"
              tabBarStyle={
                Object {
                  "margin": "0",
                }
              }
              tabPosition="top"
              type="line"
            >
              <ScrollableInkTabBar
                activeKey="1"
                animated={true}
                className="ant-tabs-top-bar"
                defaultActiveKey="1"
                direction="ltr"
                extraContent={null}
                hideAdd={false}
                inkBarAnimated={true}
                navWrapper={[Function]}
                nextIcon={
                  <span
                    className="ant-tabs-tab-next-icon"
                  >
                    <Icon
                      className="ant-tabs-tab-next-icon-target"
                      type="right"
                    />
                  </span>
                }
                onKeyDown={[Function]}
                onTabClick={[Function]}
                panels={
                  Array [
                    <TabPane
                      placeholder={null}
                      style={
                        Object {
                          "display": "flex",
                          "overflow": "auto",
                        }
                      }
                      tab={
                        <React.Fragment>
                          <Icon
                            type="exclamation-circle"
                          />
                           
                          5
                           Abiertos 
                        </React.Fragment>
                      }
                    >
                      <IssuesList
                        issues={
                          Array [
                            Object {
                              "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                              "comments": Array [],
                              "commonIssueId": "unreachable_network",
                              "common_issue": Object {
                                "id": "only_with_some_sites",
                                "parent": "slow_connection",
                                "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
                              },
                              "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                              "node": "ql-gferrero",
                              "status": "open",
                              "timestamp": 1561560010000,
                              "user": Object {
                                "username": "chana",
                              },
                            },
                            Object {
                              "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                              "comments": Array [],
                              "commonIssueId": "unreachable_network",
                              "common_issue": Object {
                                "id": "only_by_ip",
                                "parent": "unreachable_resources",
                                "text": "Puedo utilizar algunas aplicaciones como whatsapp pero no puedo navegar",
                              },
                              "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                              "node": "ql-gferrero",
                              "status": "open",
                              "timestamp": 1561473610000,
                              "user": Object {
                                "username": "ale",
                              },
                            },
                            Object {
                              "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                              "comments": Array [],
                              "commonIssueId": "unreachable_network",
                              "common_issue": Object {
                                "id": "cuts_out_connection",
                                "parent": null,
                                "text": "Puedo navegar pero de a ratos se corta",
                              },
                              "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                              "node": "ql-gferrero",
                              "status": "open",
                              "timestamp": 1561387210000,
                              "user": Object {
                                "avatar": "gferrero_avatar.jpeg",
                                "client": Object {
                                  "hostname": "gf",
                                  "ip": "192.168.1.4",
                                },
                                "is_bot": false,
                                "username": "gferrero",
                              },
                            },
                            Object {
                              "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                              "comments": Array [],
                              "commonIssueId": "unreachable_network",
                              "common_issue": Object {
                                "id": "from_precise_moment",
                                "parent": "slow_connection",
                                "text": "EmpezÃ³ a andar lento en un momento puntual",
                              },
                              "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                              "node": "ql-gferrero",
                              "status": "open",
                              "timestamp": 1561300810000,
                              "user": Object {
                                "username": "sofi",
                              },
                            },
                            Object {
                              "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                              "comments": Array [],
                              "commonIssueId": "unreachable_network",
                              "common_issue": Object {
                                "id": "unavailable_network",
                                "parent": null,
                                "text": "Red wifi no disponible",
                              },
                              "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                              "node": "ql-gferrero",
                              "status": "open",
                              "timestamp": 1561128010000,
                              "user": Object {
                                "username": "lalo",
                              },
                            },
                          ]
                        }
                      />
                    </TabPane>,
                    <TabPane
                      placeholder={null}
                      tab={
                        <React.Fragment>
                          <Icon
                            type="check-circle"
                          />
                           
                          2
                           Resueltos 
                        </React.Fragment>
                      }
                    >
                      <IssuesList
                        issues={
                          Array [
                            Object {
                              "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                              "comments": Array [],
                              "commonIssueId": "unreachable_network",
                              "common_issue": Object {
                                "id": "all_resources",
                                "parent": "unreachable_resources",
                                "text": "No puedo visitar ninguna pÃ¡gina ni usar ninguna aplicaciÃ³n",
                              },
                              "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                              "node": "ql-gferrero",
                              "status": "closed",
                              "timestamp": 1561128010000,
                              "user": Object {
                                "username": "jesi",
                              },
                            },
                            Object {
                              "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                              "comments": Array [],
                              "commonIssueId": "unreachable_network",
                              "common_issue": Object {
                                "id": "only_with_some_sites",
                                "parent": "slow_connection",
                                "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
                              },
                              "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                              "node": "ql-gferrero",
                              "status": "closed",
                              "timestamp": 1560523210000,
                              "user": Object {
                                "username": "nati",
                              },
                            },
                          ]
                        }
                      />
                    </TabPane>,
                  ]
                }
                prefixCls="ant-tabs"
                prevIcon={
                  <span
                    className="ant-tabs-tab-prev-icon"
                  >
                    <Icon
                      className="ant-tabs-tab-prev-icon-target"
                      type="left"
                    />
                  </span>
                }
                style={
                  Object {
                    "margin": "0",
                  }
                }
                tabBarExtraContent={null}
                tabBarPosition="top"
                tabBarStyle={
                  Object {
                    "margin": "0",
                  }
                }
                tabPosition="top"
                type="line"
              >
                <SaveRef>
                  <TabBarRootNode
                    activeKey="1"
                    animated={true}
                    className="ant-tabs-top-bar"
                    defaultActiveKey="1"
                    direction="ltr"
                    extraContent={null}
                    hideAdd={false}
                    inkBarAnimated={true}
                    navWrapper={[Function]}
                    nextIcon={
                      <span
                        className="ant-tabs-tab-next-icon"
                      >
                        <Icon
                          className="ant-tabs-tab-next-icon-target"
                          type="right"
                        />
                      </span>
                    }
                    onKeyDown={[Function]}
                    onTabClick={[Function]}
                    panels={
                      Array [
                        <TabPane
                          placeholder={null}
                          style={
                            Object {
                              "display": "flex",
                              "overflow": "auto",
                            }
                          }
                          tab={
                            <React.Fragment>
                              <Icon
                                type="exclamation-circle"
                              />
                               
                              5
                               Abiertos 
                            </React.Fragment>
                          }
                        >
                          <IssuesList
                            issues={
                              Array [
                                Object {
                                  "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                  "comments": Array [],
                                  "commonIssueId": "unreachable_network",
                                  "common_issue": Object {
                                    "id": "only_with_some_sites",
                                    "parent": "slow_connection",
                                    "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
                                  },
                                  "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                  "node": "ql-gferrero",
                                  "status": "open",
                                  "timestamp": 1561560010000,
                                  "user": Object {
                                    "username": "chana",
                                  },
                                },
                                Object {
                                  "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                  "comments": Array [],
                                  "commonIssueId": "unreachable_network",
                                  "common_issue": Object {
                                    "id": "only_by_ip",
                                    "parent": "unreachable_resources",
                                    "text": "Puedo utilizar algunas aplicaciones como whatsapp pero no puedo navegar",
                                  },
                                  "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                  "node": "ql-gferrero",
                                  "status": "open",
                                  "timestamp": 1561473610000,
                                  "user": Object {
                                    "username": "ale",
                                  },
                                },
                                Object {
                                  "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                  "comments": Array [],
                                  "commonIssueId": "unreachable_network",
                                  "common_issue": Object {
                                    "id": "cuts_out_connection",
                                    "parent": null,
                                    "text": "Puedo navegar pero de a ratos se corta",
                                  },
                                  "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                  "node": "ql-gferrero",
                                  "status": "open",
                                  "timestamp": 1561387210000,
                                  "user": Object {
                                    "avatar": "gferrero_avatar.jpeg",
                                    "client": Object {
                                      "hostname": "gf",
                                      "ip": "192.168.1.4",
                                    },
                                    "is_bot": false,
                                    "username": "gferrero",
                                  },
                                },
                                Object {
                                  "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                  "comments": Array [],
                                  "commonIssueId": "unreachable_network",
                                  "common_issue": Object {
                                    "id": "from_precise_moment",
                                    "parent": "slow_connection",
                                    "text": "EmpezÃ³ a andar lento en un momento puntual",
                                  },
                                  "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                  "node": "ql-gferrero",
                                  "status": "open",
                                  "timestamp": 1561300810000,
                                  "user": Object {
                                    "username": "sofi",
                                  },
                                },
                                Object {
                                  "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                  "comments": Array [],
                                  "commonIssueId": "unreachable_network",
                                  "common_issue": Object {
                                    "id": "unavailable_network",
                                    "parent": null,
                                    "text": "Red wifi no disponible",
                                  },
                                  "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                  "node": "ql-gferrero",
                                  "status": "open",
                                  "timestamp": 1561128010000,
                                  "user": Object {
                                    "username": "lalo",
                                  },
                                },
                              ]
                            }
                          />
                        </TabPane>,
                        <TabPane
                          placeholder={null}
                          tab={
                            <React.Fragment>
                              <Icon
                                type="check-circle"
                              />
                               
                              2
                               Resueltos 
                            </React.Fragment>
                          }
                        >
                          <IssuesList
                            issues={
                              Array [
                                Object {
                                  "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                  "comments": Array [],
                                  "commonIssueId": "unreachable_network",
                                  "common_issue": Object {
                                    "id": "all_resources",
                                    "parent": "unreachable_resources",
                                    "text": "No puedo visitar ninguna pÃ¡gina ni usar ninguna aplicaciÃ³n",
                                  },
                                  "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                  "node": "ql-gferrero",
                                  "status": "closed",
                                  "timestamp": 1561128010000,
                                  "user": Object {
                                    "username": "jesi",
                                  },
                                },
                                Object {
                                  "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                  "comments": Array [],
                                  "commonIssueId": "unreachable_network",
                                  "common_issue": Object {
                                    "id": "only_with_some_sites",
                                    "parent": "slow_connection",
                                    "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
                                  },
                                  "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                  "node": "ql-gferrero",
                                  "status": "closed",
                                  "timestamp": 1560523210000,
                                  "user": Object {
                                    "username": "nati",
                                  },
                                },
                              ]
                            }
                          />
                        </TabPane>,
                      ]
                    }
                    prefixCls="ant-tabs"
                    prevIcon={
                      <span
                        className="ant-tabs-tab-prev-icon"
                      >
                        <Icon
                          className="ant-tabs-tab-prev-icon-target"
                          type="left"
                        />
                      </span>
                    }
                    saveRef={[Function]}
                    style={
                      Object {
                        "margin": "0",
                      }
                    }
                    tabBarExtraContent={null}
                    tabBarPosition="top"
                    tabBarStyle={
                      Object {
                        "margin": "0",
                      }
                    }
                    tabPosition="top"
                    type="line"
                  >
                    <div
                      className="ant-tabs-bar ant-tabs-top-bar"
                      onKeyDown={[Function]}
                      role="tablist"
                      style={
                        Object {
                          "margin": "0",
                        }
                      }
                      tabIndex="0"
                    >
                      <ScrollableTabBarNode
                        activeKey="1"
                        animated={true}
                        className="ant-tabs-top-bar"
                        defaultActiveKey="1"
                        direction="ltr"
                        extraContent={null}
                        getRef={[Function]}
                        hideAdd={false}
                        inkBarAnimated={true}
                        navWrapper={[Function]}
                        nextIcon={
                          <span
                            className="ant-tabs-tab-next-icon"
                          >
                            <Icon
                              className="ant-tabs-tab-next-icon-target"
                              type="right"
                            />
                          </span>
                        }
                        onKeyDown={[Function]}
                        onNextClick={[Function]}
                        onPrevClick={[Function]}
                        onTabClick={[Function]}
                        panels={
                          Array [
                            <TabPane
                              placeholder={null}
                              style={
                                Object {
                                  "display": "flex",
                                  "overflow": "auto",
                                }
                              }
                              tab={
                                <React.Fragment>
                                  <Icon
                                    type="exclamation-circle"
                                  />
                                   
                                  5
                                   Abiertos 
                                </React.Fragment>
                              }
                            >
                              <IssuesList
                                issues={
                                  Array [
                                    Object {
                                      "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                      "comments": Array [],
                                      "commonIssueId": "unreachable_network",
                                      "common_issue": Object {
                                        "id": "only_with_some_sites",
                                        "parent": "slow_connection",
                                        "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
                                      },
                                      "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                      "node": "ql-gferrero",
                                      "status": "open",
                                      "timestamp": 1561560010000,
                                      "user": Object {
                                        "username": "chana",
                                      },
                                    },
                                    Object {
                                      "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                      "comments": Array [],
                                      "commonIssueId": "unreachable_network",
                                      "common_issue": Object {
                                        "id": "only_by_ip",
                                        "parent": "unreachable_resources",
                                        "text": "Puedo utilizar algunas aplicaciones como whatsapp pero no puedo navegar",
                                      },
                                      "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                      "node": "ql-gferrero",
                                      "status": "open",
                                      "timestamp": 1561473610000,
                                      "user": Object {
                                        "username": "ale",
                                      },
                                    },
                                    Object {
                                      "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                      "comments": Array [],
                                      "commonIssueId": "unreachable_network",
                                      "common_issue": Object {
                                        "id": "cuts_out_connection",
                                        "parent": null,
                                        "text": "Puedo navegar pero de a ratos se corta",
                                      },
                                      "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                      "node": "ql-gferrero",
                                      "status": "open",
                                      "timestamp": 1561387210000,
                                      "user": Object {
                                        "avatar": "gferrero_avatar.jpeg",
                                        "client": Object {
                                          "hostname": "gf",
                                          "ip": "192.168.1.4",
                                        },
                                        "is_bot": false,
                                        "username": "gferrero",
                                      },
                                    },
                                    Object {
                                      "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                      "comments": Array [],
                                      "commonIssueId": "unreachable_network",
                                      "common_issue": Object {
                                        "id": "from_precise_moment",
                                        "parent": "slow_connection",
                                        "text": "EmpezÃ³ a andar lento en un momento puntual",
                                      },
                                      "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                      "node": "ql-gferrero",
                                      "status": "open",
                                      "timestamp": 1561300810000,
                                      "user": Object {
                                        "username": "sofi",
                                      },
                                    },
                                    Object {
                                      "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                      "comments": Array [],
                                      "commonIssueId": "unreachable_network",
                                      "common_issue": Object {
                                        "id": "unavailable_network",
                                        "parent": null,
                                        "text": "Red wifi no disponible",
                                      },
                                      "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                      "node": "ql-gferrero",
                                      "status": "open",
                                      "timestamp": 1561128010000,
                                      "user": Object {
                                        "username": "lalo",
                                      },
                                    },
                                  ]
                                }
                              />
                            </TabPane>,
                            <TabPane
                              placeholder={null}
                              tab={
                                <React.Fragment>
                                  <Icon
                                    type="check-circle"
                                  />
                                   
                                  2
                                   Resueltos 
                                </React.Fragment>
                              }
                            >
                              <IssuesList
                                issues={
                                  Array [
                                    Object {
                                      "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                      "comments": Array [],
                                      "commonIssueId": "unreachable_network",
                                      "common_issue": Object {
                                        "id": "all_resources",
                                        "parent": "unreachable_resources",
                                        "text": "No puedo visitar ninguna pÃ¡gina ni usar ninguna aplicaciÃ³n",
                                      },
                                      "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                      "node": "ql-gferrero",
                                      "status": "closed",
                                      "timestamp": 1561128010000,
                                      "user": Object {
                                        "username": "jesi",
                                      },
                                    },
                                    Object {
                                      "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                      "comments": Array [],
                                      "commonIssueId": "unreachable_network",
                                      "common_issue": Object {
                                        "id": "only_with_some_sites",
                                        "parent": "slow_connection",
                                        "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
                                      },
                                      "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                      "node": "ql-gferrero",
                                      "status": "closed",
                                      "timestamp": 1560523210000,
                                      "user": Object {
                                        "username": "nati",
                                      },
                                    },
                                  ]
                                }
                              />
                            </TabPane>,
                          ]
                        }
                        prefixCls="ant-tabs"
                        prevIcon={
                          <span
                            className="ant-tabs-tab-prev-icon"
                          >
                            <Icon
                              className="ant-tabs-tab-prev-icon-target"
                              type="left"
                            />
                          </span>
                        }
                        saveRef={[Function]}
                        scrollAnimated={true}
                        style={
                          Object {
                            "margin": "0",
                          }
                        }
                        tabBarExtraContent={null}
                        tabBarPosition="top"
                        tabBarStyle={
                          Object {
                            "margin": "0",
                          }
                        }
                        tabPosition="top"
                        type="line"
                      >
                        <div
                          className="ant-tabs-nav-container"
                          key="container"
                        >
                          <span
                            className="ant-tabs-tab-prev ant-tabs-tab-btn-disabled"
                            onClick={null}
                            onTransitionEnd={[Function]}
                            unselectable="unselectable"
                          >
                            <span
                              className="ant-tabs-tab-prev-icon"
                            >
                              <Icon
                                className="ant-tabs-tab-prev-icon-target"
                                type="left"
                              >
                                <LocaleReceiver
                                  componentName="Icon"
                                >
                                  <i
                                    aria-label="icon: left"
                                    className="anticon anticon-left ant-tabs-tab-prev-icon-target"
                                  >
                                    <IconReact
                                      className=""
                                      type="left-o"
                                    >
                                      <svg
                                        aria-hidden="true"
                                        className=""
                                        data-icon="left"
                                        fill="currentColor"
                                        focusable="false"
                                        height="1em"
                                        key="svg-left"
                                        viewBox="64 64 896 896"
                                        width="1em"
                                      >
                                        <path
                                          d="M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 0 0 0 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z"
                                          key="svg-left-svg-0"
                                        />
                                      </svg>
                                    </IconReact>
                                  </i>
                                </LocaleReceiver>
                              </Icon>
                            </span>
                          </span>
                          <span
                            className="ant-tabs-tab-next ant-tabs-tab-btn-disabled"
                            onClick={null}
                            unselectable="unselectable"
                          >
                            <span
                              className="ant-tabs-tab-next-icon"
                            >
                              <Icon
                                className="ant-tabs-tab-next-icon-target"
                                type="right"
                              >
                                <LocaleReceiver
                                  componentName="Icon"
                                >
                                  <i
                                    aria-label="icon: right"
                                    className="anticon anticon-right ant-tabs-tab-next-icon-target"
                                  >
                                    <IconReact
                                      className=""
                                      type="right-o"
                                    >
                                      <svg
                                        aria-hidden="true"
                                        className=""
                                        data-icon="right"
                                        fill="currentColor"
                                        focusable="false"
                                        height="1em"
                                        key="svg-right"
                                        viewBox="64 64 896 896"
                                        width="1em"
                                      >
                                        <path
                                          d="M765.7 486.8L314.9 134.7A7.97 7.97 0 0 0 302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 0 0 0-50.4z"
                                          key="svg-right-svg-0"
                                        />
                                      </svg>
                                    </IconReact>
                                  </i>
                                </LocaleReceiver>
                              </Icon>
                            </span>
                          </span>
                          <div
                            className="ant-tabs-nav-wrap"
                          >
                            <div
                              className="ant-tabs-nav-scroll"
                            >
                              <div
                                className="ant-tabs-nav ant-tabs-nav-animated"
                              >
                                <TabBarTabsNode
                                  activeKey="1"
                                  animated={true}
                                  className="ant-tabs-top-bar"
                                  defaultActiveKey="1"
                                  direction="ltr"
                                  extraContent={null}
                                  hideAdd={false}
                                  inkBarAnimated={true}
                                  navWrapper={[Function]}
                                  nextIcon={
                                    <span
                                      className="ant-tabs-tab-next-icon"
                                    >
                                      <Icon
                                        className="ant-tabs-tab-next-icon-target"
                                        type="right"
                                      />
                                    </span>
                                  }
                                  onKeyDown={[Function]}
                                  onTabClick={[Function]}
                                  panels={
                                    Array [
                                      <TabPane
                                        placeholder={null}
                                        style={
                                          Object {
                                            "display": "flex",
                                            "overflow": "auto",
                                          }
                                        }
                                        tab={
                                          <React.Fragment>
                                            <Icon
                                              type="exclamation-circle"
                                            />
                                             
                                            5
                                             Abiertos 
                                          </React.Fragment>
                                        }
                                      >
                                        <IssuesList
                                          issues={
                                            Array [
                                              Object {
                                                "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                                "comments": Array [],
                                                "commonIssueId": "unreachable_network",
                                                "common_issue": Object {
                                                  "id": "only_with_some_sites",
                                                  "parent": "slow_connection",
                                                  "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
                                                },
                                                "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                                "node": "ql-gferrero",
                                                "status": "open",
                                                "timestamp": 1561560010000,
                                                "user": Object {
                                                  "username": "chana",
                                                },
                                              },
                                              Object {
                                                "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                                "comments": Array [],
                                                "commonIssueId": "unreachable_network",
                                                "common_issue": Object {
                                                  "id": "only_by_ip",
                                                  "parent": "unreachable_resources",
                                                  "text": "Puedo utilizar algunas aplicaciones como whatsapp pero no puedo navegar",
                                                },
                                                "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                                "node": "ql-gferrero",
                                                "status": "open",
                                                "timestamp": 1561473610000,
                                                "user": Object {
                                                  "username": "ale",
                                                },
                                              },
                                              Object {
                                                "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                                "comments": Array [],
                                                "commonIssueId": "unreachable_network",
                                                "common_issue": Object {
                                                  "id": "cuts_out_connection",
                                                  "parent": null,
                                                  "text": "Puedo navegar pero de a ratos se corta",
                                                },
                                                "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                                "node": "ql-gferrero",
                                                "status": "open",
                                                "timestamp": 1561387210000,
                                                "user": Object {
                                                  "avatar": "gferrero_avatar.jpeg",
                                                  "client": Object {
                                                    "hostname": "gf",
                                                    "ip": "192.168.1.4",
                                                  },
                                                  "is_bot": false,
                                                  "username": "gferrero",
                                                },
                                              },
                                              Object {
                                                "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                                "comments": Array [],
                                                "commonIssueId": "unreachable_network",
                                                "common_issue": Object {
                                                  "id": "from_precise_moment",
                                                  "parent": "slow_connection",
                                                  "text": "EmpezÃ³ a andar lento en un momento puntual",
                                                },
                                                "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                                "node": "ql-gferrero",
                                                "status": "open",
                                                "timestamp": 1561300810000,
                                                "user": Object {
                                                  "username": "sofi",
                                                },
                                              },
                                              Object {
                                                "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                                "comments": Array [],
                                                "commonIssueId": "unreachable_network",
                                                "common_issue": Object {
                                                  "id": "unavailable_network",
                                                  "parent": null,
                                                  "text": "Red wifi no disponible",
                                                },
                                                "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                                "node": "ql-gferrero",
                                                "status": "open",
                                                "timestamp": 1561128010000,
                                                "user": Object {
                                                  "username": "lalo",
                                                },
                                              },
                                            ]
                                          }
                                        />
                                      </TabPane>,
                                      <TabPane
                                        placeholder={null}
                                        tab={
                                          <React.Fragment>
                                            <Icon
                                              type="check-circle"
                                            />
                                             
                                            2
                                             Resueltos 
                                          </React.Fragment>
                                        }
                                      >
                                        <IssuesList
                                          issues={
                                            Array [
                                              Object {
                                                "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                                "comments": Array [],
                                                "commonIssueId": "unreachable_network",
                                                "common_issue": Object {
                                                  "id": "all_resources",
                                                  "parent": "unreachable_resources",
                                                  "text": "No puedo visitar ninguna pÃ¡gina ni usar ninguna aplicaciÃ³n",
                                                },
                                                "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                                "node": "ql-gferrero",
                                                "status": "closed",
                                                "timestamp": 1561128010000,
                                                "user": Object {
                                                  "username": "jesi",
                                                },
                                              },
                                              Object {
                                                "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                                "comments": Array [],
                                                "commonIssueId": "unreachable_network",
                                                "common_issue": Object {
                                                  "id": "only_with_some_sites",
                                                  "parent": "slow_connection",
                                                  "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
                                                },
                                                "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                                "node": "ql-gferrero",
                                                "status": "closed",
                                                "timestamp": 1560523210000,
                                                "user": Object {
                                                  "username": "nati",
                                                },
                                              },
                                            ]
                                          }
                                        />
                                      </TabPane>,
                                    ]
                                  }
                                  prefixCls="ant-tabs"
                                  prevIcon={
                                    <span
                                      className="ant-tabs-tab-prev-icon"
                                    >
                                      <Icon
                                        className="ant-tabs-tab-prev-icon-target"
                                        type="left"
                                      />
                                    </span>
                                  }
                                  renderTabBarNode={null}
                                  saveRef={[Function]}
                                  style={
                                    Object {
                                      "margin": "0",
                                    }
                                  }
                                  tabBarExtraContent={null}
                                  tabBarGutter={null}
                                  tabBarPosition="top"
                                  tabBarStyle={
                                    Object {
                                      "margin": "0",
                                    }
                                  }
                                  tabPosition="top"
                                  type="line"
                                >
                                  <div>
                                    <div
                                      aria-disabled="false"
                                      aria-selected="true"
                                      className="ant-tabs-tab-active ant-tabs-tab"
                                      key="1"
                                      onClick={[Function]}
                                      role="tab"
                                      style={
                                        Object {
                                          "marginRight": null,
                                        }
                                      }
                                    >
                                      <Icon
                                        type="exclamation-circle"
                                      >
                                        <LocaleReceiver
                                          componentName="Icon"
                                        >
                                          <i
                                            aria-label="icon: exclamation-circle"
                                            className="anticon anticon-exclamation-circle"
                                          >
                                            <IconReact
                                              className=""
                                              type="exclamation-circle-o"
                                            >
                                              <svg
                                                aria-hidden="true"
                                                className=""
                                                data-icon="exclamation-circle"
                                                fill="currentColor"
                                                focusable="false"
                                                height="1em"
                                                key="svg-exclamation-circle"
                                                viewBox="64 64 896 896"
                                                width="1em"
                                              >
                                                <path
                                                  d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
                                                  key="svg-exclamation-circle-svg-0"
                                                />
                                                <path
                                                  d="M464 688a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z"
                                                  key="svg-exclamation-circle-svg-1"
                                                />
                                              </svg>
                                            </IconReact>
                                          </i>
                                        </LocaleReceiver>
                                      </Icon>
                                       
                                      5
                                       Abiertos 
                                    </div>
                                    <div
                                      aria-disabled="false"
                                      aria-selected="false"
                                      className=" ant-tabs-tab"
                                      key="2"
                                      onClick={[Function]}
                                      role="tab"
                                      style={
                                        Object {
                                          "marginRight": null,
                                        }
                                      }
                                    >
                                      <Icon
                                        type="check-circle"
                                      >
                                        <LocaleReceiver
                                          componentName="Icon"
                                        >
                                          <i
                                            aria-label="icon: check-circle"
                                            className="anticon anticon-check-circle"
                                          >
                                            <IconReact
                                              className=""
                                              type="check-circle-o"
                                            >
                                              <svg
                                                aria-hidden="true"
                                                className=""
                                                data-icon="check-circle"
                                                fill="currentColor"
                                                focusable="false"
                                                height="1em"
                                                key="svg-check-circle"
                                                viewBox="64 64 896 896"
                                                width="1em"
                                              >
                                                <path
                                                  d="M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0 0 51.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z"
                                                  key="svg-check-circle-svg-0"
                                                />
                                                <path
                                                  d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
                                                  key="svg-check-circle-svg-1"
                                                />
                                              </svg>
                                            </IconReact>
                                          </i>
                                        </LocaleReceiver>
                                      </Icon>
                                       
                                      2
                                       Resueltos 
                                    </div>
                                  </div>
                                </TabBarTabsNode>
                                <InkTabBarNode
                                  activeKey="1"
                                  animated={true}
                                  className="ant-tabs-top-bar"
                                  defaultActiveKey="1"
                                  direction="ltr"
                                  extraContent={null}
                                  getRef={[Function]}
                                  hideAdd={false}
                                  inkBarAnimated={true}
                                  navWrapper={[Function]}
                                  nextIcon={
                                    <span
                                      className="ant-tabs-tab-next-icon"
                                    >
                                      <Icon
                                        className="ant-tabs-tab-next-icon-target"
                                        type="right"
                                      />
                                    </span>
                                  }
                                  onKeyDown={[Function]}
                                  onTabClick={[Function]}
                                  panels={
                                    Array [
                                      <TabPane
                                        placeholder={null}
                                        style={
                                          Object {
                                            "display": "flex",
                                            "overflow": "auto",
                                          }
                                        }
                                        tab={
                                          <React.Fragment>
                                            <Icon
                                              type="exclamation-circle"
                                            />
                                             
                                            5
                                             Abiertos 
                                          </React.Fragment>
                                        }
                                      >
                                        <IssuesList
                                          issues={
                                            Array [
                                              Object {
                                                "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                                "comments": Array [],
                                                "commonIssueId": "unreachable_network",
                                                "common_issue": Object {
                                                  "id": "only_with_some_sites",
                                                  "parent": "slow_connection",
                                                  "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
                                                },
                                                "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                                "node": "ql-gferrero",
                                                "status": "open",
                                                "timestamp": 1561560010000,
                                                "user": Object {
                                                  "username": "chana",
                                                },
                                              },
                                              Object {
                                                "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                                "comments": Array [],
                                                "commonIssueId": "unreachable_network",
                                                "common_issue": Object {
                                                  "id": "only_by_ip",
                                                  "parent": "unreachable_resources",
                                                  "text": "Puedo utilizar algunas aplicaciones como whatsapp pero no puedo navegar",
                                                },
                                                "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                                "node": "ql-gferrero",
                                                "status": "open",
                                                "timestamp": 1561473610000,
                                                "user": Object {
                                                  "username": "ale",
                                                },
                                              },
                                              Object {
                                                "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                                "comments": Array [],
                                                "commonIssueId": "unreachable_network",
                                                "common_issue": Object {
                                                  "id": "cuts_out_connection",
                                                  "parent": null,
                                                  "text": "Puedo navegar pero de a ratos se corta",
                                                },
                                                "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                                "node": "ql-gferrero",
                                                "status": "open",
                                                "timestamp": 1561387210000,
                                                "user": Object {
                                                  "avatar": "gferrero_avatar.jpeg",
                                                  "client": Object {
                                                    "hostname": "gf",
                                                    "ip": "192.168.1.4",
                                                  },
                                                  "is_bot": false,
                                                  "username": "gferrero",
                                                },
                                              },
                                              Object {
                                                "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                                "comments": Array [],
                                                "commonIssueId": "unreachable_network",
                                                "common_issue": Object {
                                                  "id": "from_precise_moment",
                                                  "parent": "slow_connection",
                                                  "text": "EmpezÃ³ a andar lento en un momento puntual",
                                                },
                                                "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                                "node": "ql-gferrero",
                                                "status": "open",
                                                "timestamp": 1561300810000,
                                                "user": Object {
                                                  "username": "sofi",
                                                },
                                              },
                                              Object {
                                                "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                                "comments": Array [],
                                                "commonIssueId": "unreachable_network",
                                                "common_issue": Object {
                                                  "id": "unavailable_network",
                                                  "parent": null,
                                                  "text": "Red wifi no disponible",
                                                },
                                                "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                                "node": "ql-gferrero",
                                                "status": "open",
                                                "timestamp": 1561128010000,
                                                "user": Object {
                                                  "username": "lalo",
                                                },
                                              },
                                            ]
                                          }
                                        />
                                      </TabPane>,
                                      <TabPane
                                        placeholder={null}
                                        tab={
                                          <React.Fragment>
                                            <Icon
                                              type="check-circle"
                                            />
                                             
                                            2
                                             Resueltos 
                                          </React.Fragment>
                                        }
                                      >
                                        <IssuesList
                                          issues={
                                            Array [
                                              Object {
                                                "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                                "comments": Array [],
                                                "commonIssueId": "unreachable_network",
                                                "common_issue": Object {
                                                  "id": "all_resources",
                                                  "parent": "unreachable_resources",
                                                  "text": "No puedo visitar ninguna pÃ¡gina ni usar ninguna aplicaciÃ³n",
                                                },
                                                "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                                "node": "ql-gferrero",
                                                "status": "closed",
                                                "timestamp": 1561128010000,
                                                "user": Object {
                                                  "username": "jesi",
                                                },
                                              },
                                              Object {
                                                "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                                "comments": Array [],
                                                "commonIssueId": "unreachable_network",
                                                "common_issue": Object {
                                                  "id": "only_with_some_sites",
                                                  "parent": "slow_connection",
                                                  "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
                                                },
                                                "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                                "node": "ql-gferrero",
                                                "status": "closed",
                                                "timestamp": 1560523210000,
                                                "user": Object {
                                                  "username": "nati",
                                                },
                                              },
                                            ]
                                          }
                                        />
                                      </TabPane>,
                                    ]
                                  }
                                  prefixCls="ant-tabs"
                                  prevIcon={
                                    <span
                                      className="ant-tabs-tab-prev-icon"
                                    >
                                      <Icon
                                        className="ant-tabs-tab-prev-icon-target"
                                        type="left"
                                      />
                                    </span>
                                  }
                                  saveRef={[Function]}
                                  style={
                                    Object {
                                      "margin": "0",
                                    }
                                  }
                                  styles={Object {}}
                                  tabBarExtraContent={null}
                                  tabBarPosition="top"
                                  tabBarStyle={
                                    Object {
                                      "margin": "0",
                                    }
                                  }
                                  tabPosition="top"
                                  type="line"
                                >
                                  <div
                                    className="ant-tabs-ink-bar ant-tabs-ink-bar-animated"
                                    key="inkBar"
                                  />
                                </InkTabBarNode>
                              </div>
                            </div>
                          </div>
                        </div>
                      </ScrollableTabBarNode>
                    </div>
                  </TabBarRootNode>
                </SaveRef>
              </ScrollableInkTabBar>
            </TabBar>
            <Sentinel
              key="sentinelStart"
              setRef={[Function]}
            >
              <div
                onKeyDown={[Function]}
                role="presentation"
                style={
                  Object {
                    "height": 0,
                    "overflow": "hidden",
                    "position": "absolute",
                    "width": 0,
                  }
                }
                tabIndex={0}
              />
            </Sentinel>
            <TabContent
              activeKey="1"
              animated={true}
              animatedWithMargin={true}
              className="ant-tabs-top-content"
              destroyInactiveTabPane={false}
              direction="ltr"
              key="tabContent"
              onChange={[Function]}
              prefixCls="ant-tabs"
              tabBarPosition="top"
            >
              <div
                className="ant-tabs-content ant-tabs-content-animated ant-tabs-top-content"
                style={
                  Object {
                    "marginLeft": "0%",
                  }
                }
              >
                <TabPane
                  active={true}
                  destroyInactiveTabPane={false}
                  key="1"
                  placeholder={null}
                  rootPrefixCls="ant-tabs"
                  style={
                    Object {
                      "display": "flex",
                      "overflow": "auto",
                    }
                  }
                  tab={
                    <React.Fragment>
                      <Icon
                        type="exclamation-circle"
                      />
                       
                      5
                       Abiertos 
                    </React.Fragment>
                  }
                >
                  <div
                    aria-hidden="false"
                    className="ant-tabs-tabpane ant-tabs-tabpane-active"
                    role="tabpanel"
                    style={
                      Object {
                        "display": "flex",
                        "overflow": "auto",
                      }
                    }
                  >
                    <Sentinel
                      setRef={[Function]}
                    >
                      <div
                        onKeyDown={[Function]}
                        role="presentation"
                        style={
                          Object {
                            "height": 0,
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": 0,
                          }
                        }
                        tabIndex={0}
                      />
                    </Sentinel>
                    <IssuesList
                      issues={
                        Array [
                          Object {
                            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                            "comments": Array [],
                            "commonIssueId": "unreachable_network",
                            "common_issue": Object {
                              "id": "only_with_some_sites",
                              "parent": "slow_connection",
                              "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
                            },
                            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                            "node": "ql-gferrero",
                            "status": "open",
                            "timestamp": 1561560010000,
                            "user": Object {
                              "username": "chana",
                            },
                          },
                          Object {
                            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                            "comments": Array [],
                            "commonIssueId": "unreachable_network",
                            "common_issue": Object {
                              "id": "only_by_ip",
                              "parent": "unreachable_resources",
                              "text": "Puedo utilizar algunas aplicaciones como whatsapp pero no puedo navegar",
                            },
                            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                            "node": "ql-gferrero",
                            "status": "open",
                            "timestamp": 1561473610000,
                            "user": Object {
                              "username": "ale",
                            },
                          },
                          Object {
                            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                            "comments": Array [],
                            "commonIssueId": "unreachable_network",
                            "common_issue": Object {
                              "id": "cuts_out_connection",
                              "parent": null,
                              "text": "Puedo navegar pero de a ratos se corta",
                            },
                            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                            "node": "ql-gferrero",
                            "status": "open",
                            "timestamp": 1561387210000,
                            "user": Object {
                              "avatar": "gferrero_avatar.jpeg",
                              "client": Object {
                                "hostname": "gf",
                                "ip": "192.168.1.4",
                              },
                              "is_bot": false,
                              "username": "gferrero",
                            },
                          },
                          Object {
                            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                            "comments": Array [],
                            "commonIssueId": "unreachable_network",
                            "common_issue": Object {
                              "id": "from_precise_moment",
                              "parent": "slow_connection",
                              "text": "EmpezÃ³ a andar lento en un momento puntual",
                            },
                            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                            "node": "ql-gferrero",
                            "status": "open",
                            "timestamp": 1561300810000,
                            "user": Object {
                              "username": "sofi",
                            },
                          },
                          Object {
                            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                            "comments": Array [],
                            "commonIssueId": "unreachable_network",
                            "common_issue": Object {
                              "id": "unavailable_network",
                              "parent": null,
                              "text": "Red wifi no disponible",
                            },
                            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                            "node": "ql-gferrero",
                            "status": "open",
                            "timestamp": 1561128010000,
                            "user": Object {
                              "username": "lalo",
                            },
                          },
                        ]
                      }
                    >
                      <List
                        bordered={false}
                        className="issues-list"
                        dataSource={
                          Array [
                            Object {
                              "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                              "comments": Array [],
                              "commonIssueId": "unreachable_network",
                              "common_issue": Object {
                                "id": "only_with_some_sites",
                                "parent": "slow_connection",
                                "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
                              },
                              "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                              "node": "ql-gferrero",
                              "status": "open",
                              "timestamp": 1561560010000,
                              "user": Object {
                                "username": "chana",
                              },
                            },
                            Object {
                              "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                              "comments": Array [],
                              "commonIssueId": "unreachable_network",
                              "common_issue": Object {
                                "id": "only_by_ip",
                                "parent": "unreachable_resources",
                                "text": "Puedo utilizar algunas aplicaciones como whatsapp pero no puedo navegar",
                              },
                              "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                              "node": "ql-gferrero",
                              "status": "open",
                              "timestamp": 1561473610000,
                              "user": Object {
                                "username": "ale",
                              },
                            },
                            Object {
                              "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                              "comments": Array [],
                              "commonIssueId": "unreachable_network",
                              "common_issue": Object {
                                "id": "cuts_out_connection",
                                "parent": null,
                                "text": "Puedo navegar pero de a ratos se corta",
                              },
                              "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                              "node": "ql-gferrero",
                              "status": "open",
                              "timestamp": 1561387210000,
                              "user": Object {
                                "avatar": "gferrero_avatar.jpeg",
                                "client": Object {
                                  "hostname": "gf",
                                  "ip": "192.168.1.4",
                                },
                                "is_bot": false,
                                "username": "gferrero",
                              },
                            },
                            Object {
                              "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                              "comments": Array [],
                              "commonIssueId": "unreachable_network",
                              "common_issue": Object {
                                "id": "from_precise_moment",
                                "parent": "slow_connection",
                                "text": "EmpezÃ³ a andar lento en un momento puntual",
                              },
                              "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                              "node": "ql-gferrero",
                              "status": "open",
                              "timestamp": 1561300810000,
                              "user": Object {
                                "username": "sofi",
                              },
                            },
                            Object {
                              "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                              "comments": Array [],
                              "commonIssueId": "unreachable_network",
                              "common_issue": Object {
                                "id": "unavailable_network",
                                "parent": null,
                                "text": "Red wifi no disponible",
                              },
                              "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                              "node": "ql-gferrero",
                              "status": "open",
                              "timestamp": 1561128010000,
                              "user": Object {
                                "username": "lalo",
                              },
                            },
                          ]
                        }
                        loading={false}
                        pagination={false}
                        renderItem={[Function]}
                        size="small"
                        split={true}
                      >
                        <div
                          className="ant-list issues-list ant-list-sm ant-list-split"
                        >
                          <Spin
                            size="default"
                            spinning={false}
                            wrapperClassName=""
                          >
                            <div
                              className="ant-spin-nested-loading"
                            >
                              <div
                                className="ant-spin-container"
                                key="container"
                              >
                                <ul
                                  className="ant-list-items"
                                >
                                  <Item
                                    key="list-item-0"
                                    style={
                                      Object {
                                        "display": "flex",
                                      }
                                    }
                                  >
                                    <li
                                      className="ant-list-item"
                                      style={
                                        Object {
                                          "display": "flex",
                                        }
                                      }
                                    >
                                      <IssueSmallResume
                                        issue={
                                          Object {
                                            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                            "comments": Array [],
                                            "commonIssueId": "unreachable_network",
                                            "common_issue": Object {
                                              "id": "only_with_some_sites",
                                              "parent": "slow_connection",
                                              "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
                                            },
                                            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                            "node": "ql-gferrero",
                                            "status": "open",
                                            "timestamp": 1561560010000,
                                            "user": Object {
                                              "username": "chana",
                                            },
                                          }
                                        }
                                        onSelect={[Function]}
                                      >
                                        <div
                                          className="container"
                                          onClick={[Function]}
                                        >
                                          <div
                                            className="side"
                                          >
                                            <Avatar
                                              size={64}
                                              user={
                                                Object {
                                                  "username": "chana",
                                                }
                                              }
                                            >
                                              <Avatar
                                                shape="circle"
                                                size={64}
                                              >
                                                <span
                                                  className="ant-avatar ant-avatar-circle"
                                                  style={
                                                    Object {
                                                      "fontSize": 18,
                                                      "height": 64,
                                                      "lineHeight": "64px",
                                                      "width": 64,
                                                    }
                                                  }
                                                >
                                                  <span
                                                    className="ant-avatar-string"
                                                    style={
                                                      Object {
                                                        "WebkitTransform": "scale(1) translateX(-50%)",
                                                        "lineHeight": "64px",
                                                        "msTransform": "scale(1) translateX(-50%)",
                                                        "transform": "scale(1) translateX(-50%)",
                                                      }
                                                    }
                                                  >
                                                    C
                                                  </span>
                                                </span>
                                              </Avatar>
                                            </Avatar>
                                            <span
                                              className="username"
                                            >
                                              @
                                              chana
                                            </span>
                                            <span
                                              className="node"
                                            >
                                              en ql-gferrero
                                            </span>
                                          </div>
                                          <div
                                            className="content"
                                          >
                                            Veo mi red wifi disponible pero no puedo conectarme
                                          </div>
                                          <div
                                            className="bottom"
                                          >
                                            <span
                                              className="comments"
                                            >
                                              <Icon
                                                type="message"
                                              >
                                                <LocaleReceiver
                                                  componentName="Icon"
                                                >
                                                  <i
                                                    aria-label="icon: message"
                                                    className="anticon anticon-message"
                                                  >
                                                    <IconReact
                                                      className=""
                                                      type="message-o"
                                                    >
                                                      <svg
                                                        aria-hidden="true"
                                                        className=""
                                                        data-icon="message"
                                                        fill="currentColor"
                                                        focusable="false"
                                                        height="1em"
                                                        key="svg-message"
                                                        viewBox="64 64 896 896"
                                                        width="1em"
                                                      >
                                                        <path
                                                          d="M464 512a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm200 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm-400 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm661.2-173.6c-22.6-53.7-55-101.9-96.3-143.3a444.35 444.35 0 0 0-143.3-96.3C630.6 75.7 572.2 64 512 64h-2c-60.6.3-119.3 12.3-174.5 35.9a445.35 445.35 0 0 0-142 96.5c-40.9 41.3-73 89.3-95.2 142.8-23 55.4-34.6 114.3-34.3 174.9A449.4 449.4 0 0 0 112 714v152a46 46 0 0 0 46 46h152.1A449.4 449.4 0 0 0 510 960h2.1c59.9 0 118-11.6 172.7-34.3a444.48 444.48 0 0 0 142.8-95.2c41.3-40.9 73.8-88.7 96.5-142 23.6-55.2 35.6-113.9 35.9-174.5.3-60.9-11.5-120-34.8-175.6zm-151.1 438C704 845.8 611 884 512 884h-1.7c-60.3-.3-120.2-15.3-173.1-43.5l-8.4-4.5H188V695.2l-4.5-8.4C155.3 633.9 140.3 574 140 513.7c-.4-99.7 37.7-193.3 107.6-263.8 69.8-70.5 163.1-109.5 262.8-109.9h1.7c50 0 98.5 9.7 144.2 28.9 44.6 18.7 84.6 45.6 119 80 34.3 34.3 61.3 74.4 80 119 19.4 46.2 29.1 95.2 28.9 145.8-.6 99.6-39.7 192.9-110.1 262.7z"
                                                          key="svg-message-svg-0"
                                                        />
                                                      </svg>
                                                    </IconReact>
                                                  </i>
                                                </LocaleReceiver>
                                              </Icon>
                                               
                                              0
                                            </span>
                                            <span
                                              className="date"
                                            >
                                              <t
                                                ago={false}
                                                calendar={false}
                                                decimal={false}
                                                element={null}
                                                filter={[Function]}
                                                format="D MMM"
                                                fromNow={false}
                                                interval={60000}
                                                local={false}
                                                locale="es"
                                                onChange={[Function]}
                                                titleFormat=""
                                                toNow={false}
                                                unit={null}
                                                unix={false}
                                                utc={false}
                                                withTitle={false}
                                              >
                                                <time
                                                  dateTime={"2019-06-26T14:40:10.000Z"}
                                                >
                                                  26 jun.
                                                </time>
                                              </t>
                                            </span>
                                          </div>
                                        </div>
                                      </IssueSmallResume>
                                    </li>
                                  </Item>
                                  <Item
                                    key="list-item-1"
                                    style={
                                      Object {
                                        "display": "flex",
                                      }
                                    }
                                  >
                                    <li
                                      className="ant-list-item"
                                      style={
                                        Object {
                                          "display": "flex",
                                        }
                                      }
                                    >
                                      <IssueSmallResume
                                        issue={
                                          Object {
                                            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                            "comments": Array [],
                                            "commonIssueId": "unreachable_network",
                                            "common_issue": Object {
                                              "id": "only_by_ip",
                                              "parent": "unreachable_resources",
                                              "text": "Puedo utilizar algunas aplicaciones como whatsapp pero no puedo navegar",
                                            },
                                            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                            "node": "ql-gferrero",
                                            "status": "open",
                                            "timestamp": 1561473610000,
                                            "user": Object {
                                              "username": "ale",
                                            },
                                          }
                                        }
                                        onSelect={[Function]}
                                      >
                                        <div
                                          className="container"
                                          onClick={[Function]}
                                        >
                                          <div
                                            className="side"
                                          >
                                            <Avatar
                                              size={64}
                                              user={
                                                Object {
                                                  "username": "ale",
                                                }
                                              }
                                            >
                                              <Avatar
                                                shape="circle"
                                                size={64}
                                              >
                                                <span
                                                  className="ant-avatar ant-avatar-circle"
                                                  style={
                                                    Object {
                                                      "fontSize": 18,
                                                      "height": 64,
                                                      "lineHeight": "64px",
                                                      "width": 64,
                                                    }
                                                  }
                                                >
                                                  <span
                                                    className="ant-avatar-string"
                                                    style={
                                                      Object {
                                                        "WebkitTransform": "scale(1) translateX(-50%)",
                                                        "lineHeight": "64px",
                                                        "msTransform": "scale(1) translateX(-50%)",
                                                        "transform": "scale(1) translateX(-50%)",
                                                      }
                                                    }
                                                  >
                                                    A
                                                  </span>
                                                </span>
                                              </Avatar>
                                            </Avatar>
                                            <span
                                              className="username"
                                            >
                                              @
                                              ale
                                            </span>
                                            <span
                                              className="node"
                                            >
                                              en ql-gferrero
                                            </span>
                                          </div>
                                          <div
                                            className="content"
                                          >
                                            Veo mi red wifi disponible pero no puedo conectarme
                                          </div>
                                          <div
                                            className="bottom"
                                          >
                                            <span
                                              className="comments"
                                            >
                                              <Icon
                                                type="message"
                                              >
                                                <LocaleReceiver
                                                  componentName="Icon"
                                                >
                                                  <i
                                                    aria-label="icon: message"
                                                    className="anticon anticon-message"
                                                  >
                                                    <IconReact
                                                      className=""
                                                      type="message-o"
                                                    >
                                                      <svg
                                                        aria-hidden="true"
                                                        className=""
                                                        data-icon="message"
                                                        fill="currentColor"
                                                        focusable="false"
                                                        height="1em"
                                                        key="svg-message"
                                                        viewBox="64 64 896 896"
                                                        width="1em"
                                                      >
                                                        <path
                                                          d="M464 512a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm200 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm-400 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm661.2-173.6c-22.6-53.7-55-101.9-96.3-143.3a444.35 444.35 0 0 0-143.3-96.3C630.6 75.7 572.2 64 512 64h-2c-60.6.3-119.3 12.3-174.5 35.9a445.35 445.35 0 0 0-142 96.5c-40.9 41.3-73 89.3-95.2 142.8-23 55.4-34.6 114.3-34.3 174.9A449.4 449.4 0 0 0 112 714v152a46 46 0 0 0 46 46h152.1A449.4 449.4 0 0 0 510 960h2.1c59.9 0 118-11.6 172.7-34.3a444.48 444.48 0 0 0 142.8-95.2c41.3-40.9 73.8-88.7 96.5-142 23.6-55.2 35.6-113.9 35.9-174.5.3-60.9-11.5-120-34.8-175.6zm-151.1 438C704 845.8 611 884 512 884h-1.7c-60.3-.3-120.2-15.3-173.1-43.5l-8.4-4.5H188V695.2l-4.5-8.4C155.3 633.9 140.3 574 140 513.7c-.4-99.7 37.7-193.3 107.6-263.8 69.8-70.5 163.1-109.5 262.8-109.9h1.7c50 0 98.5 9.7 144.2 28.9 44.6 18.7 84.6 45.6 119 80 34.3 34.3 61.3 74.4 80 119 19.4 46.2 29.1 95.2 28.9 145.8-.6 99.6-39.7 192.9-110.1 262.7z"
                                                          key="svg-message-svg-0"
                                                        />
                                                      </svg>
                                                    </IconReact>
                                                  </i>
                                                </LocaleReceiver>
                                              </Icon>
                                               
                                              0
                                            </span>
                                            <span
                                              className="date"
                                            >
                                              <t
                                                ago={false}
                                                calendar={false}
                                                decimal={false}
                                                element={null}
                                                filter={[Function]}
                                                format="D MMM"
                                                fromNow={false}
                                                interval={60000}
                                                local={false}
                                                locale="es"
                                                onChange={[Function]}
                                                titleFormat=""
                                                toNow={false}
                                                unit={null}
                                                unix={false}
                                                utc={false}
                                                withTitle={false}
                                              >
                                                <time
                                                  dateTime={"2019-06-25T14:40:10.000Z"}
                                                >
                                                  25 jun.
                                                </time>
                                              </t>
                                            </span>
                                          </div>
                                        </div>
                                      </IssueSmallResume>
                                    </li>
                                  </Item>
                                  <Item
                                    key="list-item-2"
                                    style={
                                      Object {
                                        "display": "flex",
                                      }
                                    }
                                  >
                                    <li
                                      className="ant-list-item"
                                      style={
                                        Object {
                                          "display": "flex",
                                        }
                                      }
                                    >
                                      <IssueSmallResume
                                        issue={
                                          Object {
                                            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                            "comments": Array [],
                                            "commonIssueId": "unreachable_network",
                                            "common_issue": Object {
                                              "id": "cuts_out_connection",
                                              "parent": null,
                                              "text": "Puedo navegar pero de a ratos se corta",
                                            },
                                            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                            "node": "ql-gferrero",
                                            "status": "open",
                                            "timestamp": 1561387210000,
                                            "user": Object {
                                              "avatar": "gferrero_avatar.jpeg",
                                              "client": Object {
                                                "hostname": "gf",
                                                "ip": "192.168.1.4",
                                              },
                                              "is_bot": false,
                                              "username": "gferrero",
                                            },
                                          }
                                        }
                                        onSelect={[Function]}
                                      >
                                        <div
                                          className="container"
                                          onClick={[Function]}
                                        >
                                          <div
                                            className="side"
                                          >
                                            <Avatar
                                              size={64}
                                              user={
                                                Object {
                                                  "avatar": "gferrero_avatar.jpeg",
                                                  "client": Object {
                                                    "hostname": "gf",
                                                    "ip": "192.168.1.4",
                                                  },
                                                  "is_bot": false,
                                                  "username": "gferrero",
                                                }
                                              }
                                            >
                                              <Avatar
                                                shape="circle"
                                                size={64}
                                                src="gferrero_avatar.jpeg"
                                              >
                                                <span
                                                  className="ant-avatar ant-avatar-circle ant-avatar-image"
                                                  style={
                                                    Object {
                                                      "fontSize": 18,
                                                      "height": 64,
                                                      "lineHeight": "64px",
                                                      "width": 64,
                                                    }
                                                  }
                                                >
                                                  <img
                                                    onError={[Function]}
                                                    src="gferrero_avatar.jpeg"
                                                  />
                                                </span>
                                              </Avatar>
                                            </Avatar>
                                            <span
                                              className="username"
                                            >
                                              @
                                              gferrero
                                            </span>
                                            <span
                                              className="node"
                                            >
                                              en ql-gferrero
                                            </span>
                                          </div>
                                          <div
                                            className="content"
                                          >
                                            Veo mi red wifi disponible pero no puedo conectarme
                                          </div>
                                          <div
                                            className="bottom"
                                          >
                                            <span
                                              className="comments"
                                            >
                                              <Icon
                                                type="message"
                                              >
                                                <LocaleReceiver
                                                  componentName="Icon"
                                                >
                                                  <i
                                                    aria-label="icon: message"
                                                    className="anticon anticon-message"
                                                  >
                                                    <IconReact
                                                      className=""
                                                      type="message-o"
                                                    >
                                                      <svg
                                                        aria-hidden="true"
                                                        className=""
                                                        data-icon="message"
                                                        fill="currentColor"
                                                        focusable="false"
                                                        height="1em"
                                                        key="svg-message"
                                                        viewBox="64 64 896 896"
                                                        width="1em"
                                                      >
                                                        <path
                                                          d="M464 512a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm200 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm-400 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm661.2-173.6c-22.6-53.7-55-101.9-96.3-143.3a444.35 444.35 0 0 0-143.3-96.3C630.6 75.7 572.2 64 512 64h-2c-60.6.3-119.3 12.3-174.5 35.9a445.35 445.35 0 0 0-142 96.5c-40.9 41.3-73 89.3-95.2 142.8-23 55.4-34.6 114.3-34.3 174.9A449.4 449.4 0 0 0 112 714v152a46 46 0 0 0 46 46h152.1A449.4 449.4 0 0 0 510 960h2.1c59.9 0 118-11.6 172.7-34.3a444.48 444.48 0 0 0 142.8-95.2c41.3-40.9 73.8-88.7 96.5-142 23.6-55.2 35.6-113.9 35.9-174.5.3-60.9-11.5-120-34.8-175.6zm-151.1 438C704 845.8 611 884 512 884h-1.7c-60.3-.3-120.2-15.3-173.1-43.5l-8.4-4.5H188V695.2l-4.5-8.4C155.3 633.9 140.3 574 140 513.7c-.4-99.7 37.7-193.3 107.6-263.8 69.8-70.5 163.1-109.5 262.8-109.9h1.7c50 0 98.5 9.7 144.2 28.9 44.6 18.7 84.6 45.6 119 80 34.3 34.3 61.3 74.4 80 119 19.4 46.2 29.1 95.2 28.9 145.8-.6 99.6-39.7 192.9-110.1 262.7z"
                                                          key="svg-message-svg-0"
                                                        />
                                                      </svg>
                                                    </IconReact>
                                                  </i>
                                                </LocaleReceiver>
                                              </Icon>
                                               
                                              0
                                            </span>
                                            <span
                                              className="date"
                                            >
                                              <t
                                                ago={false}
                                                calendar={false}
                                                decimal={false}
                                                element={null}
                                                filter={[Function]}
                                                format="D MMM"
                                                fromNow={false}
                                                interval={60000}
                                                local={false}
                                                locale="es"
                                                onChange={[Function]}
                                                titleFormat=""
                                                toNow={false}
                                                unit={null}
                                                unix={false}
                                                utc={false}
                                                withTitle={false}
                                              >
                                                <time
                                                  dateTime={"2019-06-24T14:40:10.000Z"}
                                                >
                                                  24 jun.
                                                </time>
                                              </t>
                                            </span>
                                          </div>
                                        </div>
                                      </IssueSmallResume>
                                    </li>
                                  </Item>
                                  <Item
                                    key="list-item-3"
                                    style={
                                      Object {
                                        "display": "flex",
                                      }
                                    }
                                  >
                                    <li
                                      className="ant-list-item"
                                      style={
                                        Object {
                                          "display": "flex",
                                        }
                                      }
                                    >
                                      <IssueSmallResume
                                        issue={
                                          Object {
                                            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                            "comments": Array [],
                                            "commonIssueId": "unreachable_network",
                                            "common_issue": Object {
                                              "id": "from_precise_moment",
                                              "parent": "slow_connection",
                                              "text": "EmpezÃ³ a andar lento en un momento puntual",
                                            },
                                            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                            "node": "ql-gferrero",
                                            "status": "open",
                                            "timestamp": 1561300810000,
                                            "user": Object {
                                              "username": "sofi",
                                            },
                                          }
                                        }
                                        onSelect={[Function]}
                                      >
                                        <div
                                          className="container"
                                          onClick={[Function]}
                                        >
                                          <div
                                            className="side"
                                          >
                                            <Avatar
                                              size={64}
                                              user={
                                                Object {
                                                  "username": "sofi",
                                                }
                                              }
                                            >
                                              <Avatar
                                                shape="circle"
                                                size={64}
                                              >
                                                <span
                                                  className="ant-avatar ant-avatar-circle"
                                                  style={
                                                    Object {
                                                      "fontSize": 18,
                                                      "height": 64,
                                                      "lineHeight": "64px",
                                                      "width": 64,
                                                    }
                                                  }
                                                >
                                                  <span
                                                    className="ant-avatar-string"
                                                    style={
                                                      Object {
                                                        "WebkitTransform": "scale(1) translateX(-50%)",
                                                        "lineHeight": "64px",
                                                        "msTransform": "scale(1) translateX(-50%)",
                                                        "transform": "scale(1) translateX(-50%)",
                                                      }
                                                    }
                                                  >
                                                    S
                                                  </span>
                                                </span>
                                              </Avatar>
                                            </Avatar>
                                            <span
                                              className="username"
                                            >
                                              @
                                              sofi
                                            </span>
                                            <span
                                              className="node"
                                            >
                                              en ql-gferrero
                                            </span>
                                          </div>
                                          <div
                                            className="content"
                                          >
                                            Veo mi red wifi disponible pero no puedo conectarme
                                          </div>
                                          <div
                                            className="bottom"
                                          >
                                            <span
                                              className="comments"
                                            >
                                              <Icon
                                                type="message"
                                              >
                                                <LocaleReceiver
                                                  componentName="Icon"
                                                >
                                                  <i
                                                    aria-label="icon: message"
                                                    className="anticon anticon-message"
                                                  >
                                                    <IconReact
                                                      className=""
                                                      type="message-o"
                                                    >
                                                      <svg
                                                        aria-hidden="true"
                                                        className=""
                                                        data-icon="message"
                                                        fill="currentColor"
                                                        focusable="false"
                                                        height="1em"
                                                        key="svg-message"
                                                        viewBox="64 64 896 896"
                                                        width="1em"
                                                      >
                                                        <path
                                                          d="M464 512a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm200 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm-400 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm661.2-173.6c-22.6-53.7-55-101.9-96.3-143.3a444.35 444.35 0 0 0-143.3-96.3C630.6 75.7 572.2 64 512 64h-2c-60.6.3-119.3 12.3-174.5 35.9a445.35 445.35 0 0 0-142 96.5c-40.9 41.3-73 89.3-95.2 142.8-23 55.4-34.6 114.3-34.3 174.9A449.4 449.4 0 0 0 112 714v152a46 46 0 0 0 46 46h152.1A449.4 449.4 0 0 0 510 960h2.1c59.9 0 118-11.6 172.7-34.3a444.48 444.48 0 0 0 142.8-95.2c41.3-40.9 73.8-88.7 96.5-142 23.6-55.2 35.6-113.9 35.9-174.5.3-60.9-11.5-120-34.8-175.6zm-151.1 438C704 845.8 611 884 512 884h-1.7c-60.3-.3-120.2-15.3-173.1-43.5l-8.4-4.5H188V695.2l-4.5-8.4C155.3 633.9 140.3 574 140 513.7c-.4-99.7 37.7-193.3 107.6-263.8 69.8-70.5 163.1-109.5 262.8-109.9h1.7c50 0 98.5 9.7 144.2 28.9 44.6 18.7 84.6 45.6 119 80 34.3 34.3 61.3 74.4 80 119 19.4 46.2 29.1 95.2 28.9 145.8-.6 99.6-39.7 192.9-110.1 262.7z"
                                                          key="svg-message-svg-0"
                                                        />
                                                      </svg>
                                                    </IconReact>
                                                  </i>
                                                </LocaleReceiver>
                                              </Icon>
                                               
                                              0
                                            </span>
                                            <span
                                              className="date"
                                            >
                                              <t
                                                ago={false}
                                                calendar={false}
                                                decimal={false}
                                                element={null}
                                                filter={[Function]}
                                                format="D MMM"
                                                fromNow={false}
                                                interval={60000}
                                                local={false}
                                                locale="es"
                                                onChange={[Function]}
                                                titleFormat=""
                                                toNow={false}
                                                unit={null}
                                                unix={false}
                                                utc={false}
                                                withTitle={false}
                                              >
                                                <time
                                                  dateTime={"2019-06-23T14:40:10.000Z"}
                                                >
                                                  23 jun.
                                                </time>
                                              </t>
                                            </span>
                                          </div>
                                        </div>
                                      </IssueSmallResume>
                                    </li>
                                  </Item>
                                  <Item
                                    key="list-item-4"
                                    style={
                                      Object {
                                        "display": "flex",
                                      }
                                    }
                                  >
                                    <li
                                      className="ant-list-item"
                                      style={
                                        Object {
                                          "display": "flex",
                                        }
                                      }
                                    >
                                      <IssueSmallResume
                                        issue={
                                          Object {
                                            "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
                                            "comments": Array [],
                                            "commonIssueId": "unreachable_network",
                                            "common_issue": Object {
                                              "id": "unavailable_network",
                                              "parent": null,
                                              "text": "Red wifi no disponible",
                                            },
                                            "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
                                            "node": "ql-gferrero",
                                            "status": "open",
                                            "timestamp": 1561128010000,
                                            "user": Object {
                                              "username": "lalo",
                                            },
                                          }
                                        }
                                        onSelect={[Function]}
                                      >
                                        <div
                                          className="container"
                                          onClick={[Function]}
                                        >
                                          <div
                                            className="side"
                                          >
                                            <Avatar
                                              size={64}
                                              user={
                                                Object {
                                                  "username": "lalo",
                                                }
                                              }
                                            >
                                              <Avatar
                                                shape="circle"
                                                size={64}
                                              >
                                                <span
                                                  className="ant-avatar ant-avatar-circle"
                                                  style={
                                                    Object {
                                                      "fontSize": 18,
                                                      "height": 64,
                                                      "lineHeight": "64px",
                                                      "width": 64,
                                                    }
                                                  }
                                                >
                                                  <span
                                                    className="ant-avatar-string"
                                                    style={
                                                      Object {
                                                        "WebkitTransform": "scale(1) translateX(-50%)",
                                                        "lineHeight": "64px",
                                                        "msTransform": "scale(1) translateX(-50%)",
                                                        "transform": "scale(1) translateX(-50%)",
                                                      }
                                                    }
                                                  >
                                                    L
                                                  </span>
                                                </span>
                                              </Avatar>
                                            </Avatar>
                                            <span
                                              className="username"
                                            >
                                              @
                                              lalo
                                            </span>
                                            <span
                                              className="node"
                                            >
                                              en ql-gferrero
                                            </span>
                                          </div>
                                          <div
                                            className="content"
                                          >
                                            Veo mi red wifi disponible pero no puedo conectarme
                                          </div>
                                          <div
                                            className="bottom"
                                          >
                                            <span
                                              className="comments"
                                            >
                                              <Icon
                                                type="message"
                                              >
                                                <LocaleReceiver
                                                  componentName="Icon"
                                                >
                                                  <i
                                                    aria-label="icon: message"
                                                    className="anticon anticon-message"
                                                  >
                                                    <IconReact
                                                      className=""
                                                      type="message-o"
                                                    >
                                                      <svg
                                                        aria-hidden="true"
                                                        className=""
                                                        data-icon="message"
                                                        fill="currentColor"
                                                        focusable="false"
                                                        height="1em"
                                                        key="svg-message"
                                                        viewBox="64 64 896 896"
                                                        width="1em"
                                                      >
                                                        <path
                                                          d="M464 512a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm200 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm-400 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm661.2-173.6c-22.6-53.7-55-101.9-96.3-143.3a444.35 444.35 0 0 0-143.3-96.3C630.6 75.7 572.2 64 512 64h-2c-60.6.3-119.3 12.3-174.5 35.9a445.35 445.35 0 0 0-142 96.5c-40.9 41.3-73 89.3-95.2 142.8-23 55.4-34.6 114.3-34.3 174.9A449.4 449.4 0 0 0 112 714v152a46 46 0 0 0 46 46h152.1A449.4 449.4 0 0 0 510 960h2.1c59.9 0 118-11.6 172.7-34.3a444.48 444.48 0 0 0 142.8-95.2c41.3-40.9 73.8-88.7 96.5-142 23.6-55.2 35.6-113.9 35.9-174.5.3-60.9-11.5-120-34.8-175.6zm-151.1 438C704 845.8 611 884 512 884h-1.7c-60.3-.3-120.2-15.3-173.1-43.5l-8.4-4.5H188V695.2l-4.5-8.4C155.3 633.9 140.3 574 140 513.7c-.4-99.7 37.7-193.3 107.6-263.8 69.8-70.5 163.1-109.5 262.8-109.9h1.7c50 0 98.5 9.7 144.2 28.9 44.6 18.7 84.6 45.6 119 80 34.3 34.3 61.3 74.4 80 119 19.4 46.2 29.1 95.2 28.9 145.8-.6 99.6-39.7 192.9-110.1 262.7z"
                                                          key="svg-message-svg-0"
                                                        />
                                                      </svg>
                                                    </IconReact>
                                                  </i>
                                                </LocaleReceiver>
                                              </Icon>
                                               
                                              0
                                            </span>
                                            <span
                                              className="date"
                                            >
                                              <t
                                                ago={false}
                                                calendar={false}
                                                decimal={false}
                                                element={null}
                                                filter={[Function]}
                                                format="D MMM"
                                                fromNow={false}
                                                interval={60000}
                                                local={false}
                                                locale="es"
                                                onChange={[Function]}
                                                titleFormat=""
                                                toNow={false}
                                                unit={null}
                                                unix={false}
                                                utc={false}
                                                withTitle={false}
                                              >
                                                <time
                                                  dateTime={"2019-06-21T14:40:10.000Z"}
                                                >
                                                  21 jun.
                                                </time>
                                              </t>
                                            </span>
                                          </div>
                                        </div>
                                      </IssueSmallResume>
                                    </li>
                                  </Item>
                                </ul>
                              </div>
                            </div>
                          </Spin>
                        </div>
                      </List>
                    </IssuesList>
                    <Sentinel
                      setRef={[Function]}
                    >
                      <div
                        onKeyDown={[Function]}
                        role="presentation"
                        style={
                          Object {
                            "height": 0,
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": 0,
                          }
                        }
                        tabIndex={0}
                      />
                    </Sentinel>
                  </div>
                </TabPane>
                <TabPane
                  active={false}
                  destroyInactiveTabPane={false}
                  key="2"
                  placeholder={null}
                  rootPrefixCls="ant-tabs"
                  tab={
                    <React.Fragment>
                      <Icon
                        type="check-circle"
                      />
                       
                      2
                       Resueltos 
                    </React.Fragment>
                  }
                >
                  <div
                    aria-hidden="true"
                    className="ant-tabs-tabpane ant-tabs-tabpane-inactive"
                    role="tabpanel"
                  />
                </TabPane>
              </div>
            </TabContent>
            <Sentinel
              key="sentinelEnd"
              setRef={[Function]}
            >
              <div
                onKeyDown={[Function]}
                role="presentation"
                style={
                  Object {
                    "height": 0,
                    "overflow": "hidden",
                    "position": "absolute",
                    "width": 0,
                  }
                }
                tabIndex={0}
              />
            </Sentinel>
          </div>
        </Tabs>
      </Tabs>
    </IssuesTabs>
    <NewIssue>
      <div
        className="new-issue"
      >
        <ForwardRef
          to="/reports/new"
        >
          <Location>
            <LocationProvider
              history={
                Object {
                  "_onTransitionComplete": [Function],
                  "listen": [Function],
                  "location": Object {
                    "assign": [Function],
                    "hash": "",
                    "host": "localhost",
                    "hostname": "localhost",
                    "href": "http://localhost/",
                    "key": "initial",
                    "origin": "http://localhost",
                    "pathname": "/",
                    "port": "",
                    "protocol": "http:",
                    "reload": [Function],
                    "replace": [Function],
                    "search": "",
                    "state": null,
                    "toString": [Function],
                  },
                  "navigate": [Function],
                  "transitioning": false,
                }
              }
            >
              <a
                href="/reports/new"
                onClick={[Function]}
              >
                <Button
                  block={false}
                  ghost={false}
                  htmlType="button"
                  icon="notification"
                  loading={false}
                  size="large"
                  type="link"
                >
                  <button
                    className="ant-btn ant-btn-link ant-btn-lg"
                    onClick={[Function]}
                    type="button"
                  >
                    <Icon
                      type="notification"
                    >
                      <LocaleReceiver
                        componentName="Icon"
                      >
                        <i
                          aria-label="icon: notification"
                          className="anticon anticon-notification"
                        >
                          <IconReact
                            className=""
                            type="notification-o"
                          >
                            <svg
                              aria-hidden="true"
                              className=""
                              data-icon="notification"
                              fill="currentColor"
                              focusable="false"
                              height="1em"
                              key="svg-notification"
                              viewBox="64 64 896 896"
                              width="1em"
                            >
                              <path
                                d="M880 112c-3.8 0-7.7.7-11.6 2.3L292 345.9H128c-8.8 0-16 7.4-16 16.6v299c0 9.2 7.2 16.6 16 16.6h101.7c-3.7 11.6-5.7 23.9-5.7 36.4 0 65.9 53.8 119.5 120 119.5 55.4 0 102.1-37.6 115.9-88.4l408.6 164.2c3.9 1.5 7.8 2.3 11.6 2.3 16.9 0 32-14.2 32-33.2V145.2C912 126.2 897 112 880 112zM344 762.3c-26.5 0-48-21.4-48-47.8 0-11.2 3.9-21.9 11-30.4l84.9 34.1c-2 24.6-22.7 44.1-47.9 44.1zm496 58.4L318.8 611.3l-12.9-5.2H184V417.9h121.9l12.9-5.2L840 203.3v617.4z"
                                key="svg-notification-svg-0"
                              />
                            </svg>
                          </IconReact>
                        </i>
                      </LocaleReceiver>
                    </Icon>
                    <span
                      key=".0"
                    >
                      Nuevo Reporte
                    </span>
                  </button>
                </Button>
              </a>
            </LocationProvider>
          </Location>
        </ForwardRef>
      </div>
    </NewIssue>
  </div>
</LastIssuesPanel>
`;

exports[`Storyshots LastIssuesPanel/IssueSmallResume A person issue 1`] = `
<IssueSmallResume
  issue={
    Object {
      "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
      "comments": Array [],
      "commonIssueId": "unreachable_network",
      "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
      "node": "ql-gferrero",
      "status": "open",
      "timestamp": 1561041610000,
      "user": Object {
        "avatar": "gferrero_avatar.jpeg",
        "client": Object {
          "hostname": "gf",
          "ip": "192.168.1.4",
        },
        "is_bot": false,
        "username": "gferrero",
      },
    }
  }
  onSelect={[Function]}
>
  <div
    className="container"
    onClick={[Function]}
  >
    <div
      className="side"
    >
      <Avatar
        size={64}
        user={
          Object {
            "avatar": "gferrero_avatar.jpeg",
            "client": Object {
              "hostname": "gf",
              "ip": "192.168.1.4",
            },
            "is_bot": false,
            "username": "gferrero",
          }
        }
      >
        <Avatar
          shape="circle"
          size={64}
          src="gferrero_avatar.jpeg"
        >
          <span
            className="ant-avatar ant-avatar-circle ant-avatar-image"
            style={
              Object {
                "fontSize": 18,
                "height": 64,
                "lineHeight": "64px",
                "width": 64,
              }
            }
          >
            <img
              onError={[Function]}
              src="gferrero_avatar.jpeg"
            />
          </span>
        </Avatar>
      </Avatar>
      <span
        className="username"
      >
        @
        gferrero
      </span>
      <span
        className="node"
      >
        en ql-gferrero
      </span>
    </div>
    <div
      className="content"
    >
      Veo mi red wifi disponible pero no puedo conectarme
    </div>
    <div
      className="bottom"
    >
      <span
        className="comments"
      >
        <Icon
          type="message"
        >
          <LocaleReceiver
            componentName="Icon"
          >
            <i
              aria-label="icon: message"
              className="anticon anticon-message"
            >
              <IconReact
                className=""
                type="message-o"
              >
                <svg
                  aria-hidden="true"
                  className=""
                  data-icon="message"
                  fill="currentColor"
                  focusable="false"
                  height="1em"
                  key="svg-message"
                  viewBox="64 64 896 896"
                  width="1em"
                >
                  <path
                    d="M464 512a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm200 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm-400 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm661.2-173.6c-22.6-53.7-55-101.9-96.3-143.3a444.35 444.35 0 0 0-143.3-96.3C630.6 75.7 572.2 64 512 64h-2c-60.6.3-119.3 12.3-174.5 35.9a445.35 445.35 0 0 0-142 96.5c-40.9 41.3-73 89.3-95.2 142.8-23 55.4-34.6 114.3-34.3 174.9A449.4 449.4 0 0 0 112 714v152a46 46 0 0 0 46 46h152.1A449.4 449.4 0 0 0 510 960h2.1c59.9 0 118-11.6 172.7-34.3a444.48 444.48 0 0 0 142.8-95.2c41.3-40.9 73.8-88.7 96.5-142 23.6-55.2 35.6-113.9 35.9-174.5.3-60.9-11.5-120-34.8-175.6zm-151.1 438C704 845.8 611 884 512 884h-1.7c-60.3-.3-120.2-15.3-173.1-43.5l-8.4-4.5H188V695.2l-4.5-8.4C155.3 633.9 140.3 574 140 513.7c-.4-99.7 37.7-193.3 107.6-263.8 69.8-70.5 163.1-109.5 262.8-109.9h1.7c50 0 98.5 9.7 144.2 28.9 44.6 18.7 84.6 45.6 119 80 34.3 34.3 61.3 74.4 80 119 19.4 46.2 29.1 95.2 28.9 145.8-.6 99.6-39.7 192.9-110.1 262.7z"
                    key="svg-message-svg-0"
                  />
                </svg>
              </IconReact>
            </i>
          </LocaleReceiver>
        </Icon>
         
        0
      </span>
      <span
        className="date"
      >
        <t
          ago={false}
          calendar={false}
          decimal={false}
          element={null}
          filter={[Function]}
          format="D MMM"
          fromNow={false}
          interval={60000}
          local={false}
          locale="es"
          onChange={[Function]}
          titleFormat=""
          toNow={false}
          unit={null}
          unix={false}
          utc={false}
          withTitle={false}
        >
          <time
            dateTime={"2019-06-20T14:40:10.000Z"}
          >
            20 jun.
          </time>
        </t>
      </span>
    </div>
  </div>
</IssueSmallResume>
`;

exports[`Storyshots LastIssuesPanel/IssueSmallResume A person issue that affects me 1`] = `
<IssueSmallResume
  affectsMe={true}
  issue={
    Object {
      "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
      "comments": Array [],
      "commonIssueId": "unreachable_network",
      "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
      "node": "ql-gferrero",
      "status": "open",
      "timestamp": 1561041610000,
      "user": Object {
        "avatar": "gferrero_avatar.jpeg",
        "client": Object {
          "hostname": "gf",
          "ip": "192.168.1.4",
        },
        "is_bot": false,
        "username": "gferrero",
      },
    }
  }
  onSelect={[Function]}
>
  <div
    className="container"
    onClick={[Function]}
  >
    <div
      className="side"
    >
      <Avatar
        size={64}
        user={
          Object {
            "avatar": "gferrero_avatar.jpeg",
            "client": Object {
              "hostname": "gf",
              "ip": "192.168.1.4",
            },
            "is_bot": false,
            "username": "gferrero",
          }
        }
      >
        <Avatar
          shape="circle"
          size={64}
          src="gferrero_avatar.jpeg"
        >
          <span
            className="ant-avatar ant-avatar-circle ant-avatar-image"
            style={
              Object {
                "fontSize": 18,
                "height": 64,
                "lineHeight": "64px",
                "width": 64,
              }
            }
          >
            <img
              onError={[Function]}
              src="gferrero_avatar.jpeg"
            />
          </span>
        </Avatar>
      </Avatar>
      <span
        className="username"
      >
        @
        gferrero
      </span>
      <span
        className="node"
      >
        en ql-gferrero
      </span>
    </div>
    <div
      className="content"
    >
      Veo mi red wifi disponible pero no puedo conectarme
      <div
        className="affects-me"
      >
        Este problema afecta tu nodo!
      </div>
    </div>
    <div
      className="bottom"
    >
      <span
        className="comments"
      >
        <Icon
          type="message"
        >
          <LocaleReceiver
            componentName="Icon"
          >
            <i
              aria-label="icon: message"
              className="anticon anticon-message"
            >
              <IconReact
                className=""
                type="message-o"
              >
                <svg
                  aria-hidden="true"
                  className=""
                  data-icon="message"
                  fill="currentColor"
                  focusable="false"
                  height="1em"
                  key="svg-message"
                  viewBox="64 64 896 896"
                  width="1em"
                >
                  <path
                    d="M464 512a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm200 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm-400 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm661.2-173.6c-22.6-53.7-55-101.9-96.3-143.3a444.35 444.35 0 0 0-143.3-96.3C630.6 75.7 572.2 64 512 64h-2c-60.6.3-119.3 12.3-174.5 35.9a445.35 445.35 0 0 0-142 96.5c-40.9 41.3-73 89.3-95.2 142.8-23 55.4-34.6 114.3-34.3 174.9A449.4 449.4 0 0 0 112 714v152a46 46 0 0 0 46 46h152.1A449.4 449.4 0 0 0 510 960h2.1c59.9 0 118-11.6 172.7-34.3a444.48 444.48 0 0 0 142.8-95.2c41.3-40.9 73.8-88.7 96.5-142 23.6-55.2 35.6-113.9 35.9-174.5.3-60.9-11.5-120-34.8-175.6zm-151.1 438C704 845.8 611 884 512 884h-1.7c-60.3-.3-120.2-15.3-173.1-43.5l-8.4-4.5H188V695.2l-4.5-8.4C155.3 633.9 140.3 574 140 513.7c-.4-99.7 37.7-193.3 107.6-263.8 69.8-70.5 163.1-109.5 262.8-109.9h1.7c50 0 98.5 9.7 144.2 28.9 44.6 18.7 84.6 45.6 119 80 34.3 34.3 61.3 74.4 80 119 19.4 46.2 29.1 95.2 28.9 145.8-.6 99.6-39.7 192.9-110.1 262.7z"
                    key="svg-message-svg-0"
                  />
                </svg>
              </IconReact>
            </i>
          </LocaleReceiver>
        </Icon>
         
        0
      </span>
      <span
        className="date"
      >
        <t
          ago={false}
          calendar={false}
          decimal={false}
          element={null}
          filter={[Function]}
          format="D MMM"
          fromNow={false}
          interval={60000}
          local={false}
          locale="es"
          onChange={[Function]}
          titleFormat=""
          toNow={false}
          unit={null}
          unix={false}
          utc={false}
          withTitle={false}
        >
          <time
            dateTime={"2019-06-20T14:40:10.000Z"}
          >
            20 jun.
          </time>
        </t>
      </span>
    </div>
  </div>
</IssueSmallResume>
`;

exports[`Storyshots LastIssuesPanel/IssueSmallResume An issue with custom title 1`] = `
<IssueSmallResume
  issue={
    Object {
      "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
      "comments": Array [],
      "commonIssueId": "unreachable_network",
      "common_issue": null,
      "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
      "node": "ql-gferrero",
      "status": "open",
      "timestamp": 1561041610000,
      "title": "Ayuda para alinear mi antena",
      "user": Object {
        "avatar": "gferrero_avatar.jpeg",
        "client": Object {
          "hostname": "gf",
          "ip": "192.168.1.4",
        },
        "is_bot": false,
        "username": "gferrero",
      },
    }
  }
  onSelect={[Function]}
>
  <div
    className="container"
    onClick={[Function]}
  >
    <div
      className="side"
    >
      <Avatar
        size={64}
        user={
          Object {
            "avatar": "gferrero_avatar.jpeg",
            "client": Object {
              "hostname": "gf",
              "ip": "192.168.1.4",
            },
            "is_bot": false,
            "username": "gferrero",
          }
        }
      >
        <Avatar
          shape="circle"
          size={64}
          src="gferrero_avatar.jpeg"
        >
          <span
            className="ant-avatar ant-avatar-circle ant-avatar-image"
            style={
              Object {
                "fontSize": 18,
                "height": 64,
                "lineHeight": "64px",
                "width": 64,
              }
            }
          >
            <img
              onError={[Function]}
              src="gferrero_avatar.jpeg"
            />
          </span>
        </Avatar>
      </Avatar>
      <span
        className="username"
      >
        @
        gferrero
      </span>
      <span
        className="node"
      >
        en ql-gferrero
      </span>
    </div>
    <div
      className="content"
    >
      Veo mi red wifi disponible pero no puedo conectarme
    </div>
    <div
      className="bottom"
    >
      <span
        className="comments"
      >
        <Icon
          type="message"
        >
          <LocaleReceiver
            componentName="Icon"
          >
            <i
              aria-label="icon: message"
              className="anticon anticon-message"
            >
              <IconReact
                className=""
                type="message-o"
              >
                <svg
                  aria-hidden="true"
                  className=""
                  data-icon="message"
                  fill="currentColor"
                  focusable="false"
                  height="1em"
                  key="svg-message"
                  viewBox="64 64 896 896"
                  width="1em"
                >
                  <path
                    d="M464 512a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm200 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm-400 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm661.2-173.6c-22.6-53.7-55-101.9-96.3-143.3a444.35 444.35 0 0 0-143.3-96.3C630.6 75.7 572.2 64 512 64h-2c-60.6.3-119.3 12.3-174.5 35.9a445.35 445.35 0 0 0-142 96.5c-40.9 41.3-73 89.3-95.2 142.8-23 55.4-34.6 114.3-34.3 174.9A449.4 449.4 0 0 0 112 714v152a46 46 0 0 0 46 46h152.1A449.4 449.4 0 0 0 510 960h2.1c59.9 0 118-11.6 172.7-34.3a444.48 444.48 0 0 0 142.8-95.2c41.3-40.9 73.8-88.7 96.5-142 23.6-55.2 35.6-113.9 35.9-174.5.3-60.9-11.5-120-34.8-175.6zm-151.1 438C704 845.8 611 884 512 884h-1.7c-60.3-.3-120.2-15.3-173.1-43.5l-8.4-4.5H188V695.2l-4.5-8.4C155.3 633.9 140.3 574 140 513.7c-.4-99.7 37.7-193.3 107.6-263.8 69.8-70.5 163.1-109.5 262.8-109.9h1.7c50 0 98.5 9.7 144.2 28.9 44.6 18.7 84.6 45.6 119 80 34.3 34.3 61.3 74.4 80 119 19.4 46.2 29.1 95.2 28.9 145.8-.6 99.6-39.7 192.9-110.1 262.7z"
                    key="svg-message-svg-0"
                  />
                </svg>
              </IconReact>
            </i>
          </LocaleReceiver>
        </Icon>
         
        0
      </span>
      <span
        className="date"
      >
        <t
          ago={false}
          calendar={false}
          decimal={false}
          element={null}
          filter={[Function]}
          format="D MMM"
          fromNow={false}
          interval={60000}
          local={false}
          locale="es"
          onChange={[Function]}
          titleFormat=""
          toNow={false}
          unit={null}
          unix={false}
          utc={false}
          withTitle={false}
        >
          <time
            dateTime={"2019-06-20T14:40:10.000Z"}
          >
            20 jun.
          </time>
        </t>
      </span>
    </div>
  </div>
</IssueSmallResume>
`;

exports[`Storyshots LastIssuesPanel/IssueSmallResume Bot issue 1`] = `
<IssueSmallResume
  issue={
    Object {
      "body": "Enlace roxa-natisofi caÃ­do",
      "comments": Array [],
      "commonIssueId": "unreachable_network",
      "common_issue": null,
      "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
      "node": null,
      "status": "open",
      "timestamp": 1561041610000,
      "user": Object {
        "is_bot": true,
        "username": "automÃ¡tico",
      },
    }
  }
  onSelect={[Function]}
>
  <div
    className="container"
    onClick={[Function]}
  >
    <div
      className="side"
    >
      <Avatar
        size={64}
        user={
          Object {
            "is_bot": true,
            "username": "automÃ¡tico",
          }
        }
      >
        <Avatar
          icon="robot"
          shape="circle"
          size={64}
        >
          <span
            className="ant-avatar ant-avatar-circle ant-avatar-icon"
            style={
              Object {
                "fontSize": 32,
                "height": 64,
                "lineHeight": "64px",
                "width": 64,
              }
            }
          >
            <Icon
              type="robot"
            >
              <LocaleReceiver
                componentName="Icon"
              >
                <i
                  aria-label="icon: robot"
                  className="anticon anticon-robot"
                >
                  <IconReact
                    className=""
                    type="robot-o"
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-icon="robot"
                      fill="currentColor"
                      focusable="false"
                      height="1em"
                      key="svg-robot"
                      viewBox="64 64 896 896"
                      width="1em"
                    >
                      <path
                        d="M300 328a60 60 0 1 0 120 0 60 60 0 1 0-120 0zM852 64H172c-17.7 0-32 14.3-32 32v660c0 17.7 14.3 32 32 32h680c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32zm-32 660H204V128h616v596zM604 328a60 60 0 1 0 120 0 60 60 0 1 0-120 0zm250.2 556H169.8c-16.5 0-29.8 14.3-29.8 32v36c0 4.4 3.3 8 7.4 8h729.1c4.1 0 7.4-3.6 7.4-8v-36c.1-17.7-13.2-32-29.7-32zM664 508H360c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h304c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z"
                        key="svg-robot-svg-0"
                      />
                    </svg>
                  </IconReact>
                </i>
              </LocaleReceiver>
            </Icon>
          </span>
        </Avatar>
      </Avatar>
      <span
        className="username"
      >
        @
        automÃ¡tico
      </span>
      <span
        className="node"
      />
    </div>
    <div
      className="content"
    >
      Veo mi red wifi disponible pero no puedo conectarme
    </div>
    <div
      className="bottom"
    >
      <span
        className="comments"
      >
        <Icon
          type="message"
        >
          <LocaleReceiver
            componentName="Icon"
          >
            <i
              aria-label="icon: message"
              className="anticon anticon-message"
            >
              <IconReact
                className=""
                type="message-o"
              >
                <svg
                  aria-hidden="true"
                  className=""
                  data-icon="message"
                  fill="currentColor"
                  focusable="false"
                  height="1em"
                  key="svg-message"
                  viewBox="64 64 896 896"
                  width="1em"
                >
                  <path
                    d="M464 512a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm200 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm-400 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm661.2-173.6c-22.6-53.7-55-101.9-96.3-143.3a444.35 444.35 0 0 0-143.3-96.3C630.6 75.7 572.2 64 512 64h-2c-60.6.3-119.3 12.3-174.5 35.9a445.35 445.35 0 0 0-142 96.5c-40.9 41.3-73 89.3-95.2 142.8-23 55.4-34.6 114.3-34.3 174.9A449.4 449.4 0 0 0 112 714v152a46 46 0 0 0 46 46h152.1A449.4 449.4 0 0 0 510 960h2.1c59.9 0 118-11.6 172.7-34.3a444.48 444.48 0 0 0 142.8-95.2c41.3-40.9 73.8-88.7 96.5-142 23.6-55.2 35.6-113.9 35.9-174.5.3-60.9-11.5-120-34.8-175.6zm-151.1 438C704 845.8 611 884 512 884h-1.7c-60.3-.3-120.2-15.3-173.1-43.5l-8.4-4.5H188V695.2l-4.5-8.4C155.3 633.9 140.3 574 140 513.7c-.4-99.7 37.7-193.3 107.6-263.8 69.8-70.5 163.1-109.5 262.8-109.9h1.7c50 0 98.5 9.7 144.2 28.9 44.6 18.7 84.6 45.6 119 80 34.3 34.3 61.3 74.4 80 119 19.4 46.2 29.1 95.2 28.9 145.8-.6 99.6-39.7 192.9-110.1 262.7z"
                    key="svg-message-svg-0"
                  />
                </svg>
              </IconReact>
            </i>
          </LocaleReceiver>
        </Icon>
         
        0
      </span>
      <span
        className="date"
      >
        <t
          ago={false}
          calendar={false}
          decimal={false}
          element={null}
          filter={[Function]}
          format="D MMM"
          fromNow={false}
          interval={60000}
          local={false}
          locale="es"
          onChange={[Function]}
          titleFormat=""
          toNow={false}
          unit={null}
          unix={false}
          utc={false}
          withTitle={false}
        >
          <time
            dateTime={"2019-06-20T14:40:10.000Z"}
          >
            20 jun.
          </time>
        </t>
      </span>
    </div>
  </div>
</IssueSmallResume>
`;

exports[`Storyshots LastIssuesPanel/IssueSmallResume No avatar issue 1`] = `
<IssueSmallResume
  issue={
    Object {
      "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
      "comments": Array [],
      "commonIssueId": "unreachable_network",
      "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
      "node": "ql-gferrero",
      "status": "open",
      "timestamp": 1561041610000,
      "user": Object {
        "avatar": null,
        "client": Object {
          "hostname": "gf",
          "ip": "192.168.1.4",
        },
        "is_bot": false,
        "username": "gferrero",
      },
    }
  }
  onSelect={[Function]}
>
  <div
    className="container"
    onClick={[Function]}
  >
    <div
      className="side"
    >
      <Avatar
        size={64}
        user={
          Object {
            "avatar": null,
            "client": Object {
              "hostname": "gf",
              "ip": "192.168.1.4",
            },
            "is_bot": false,
            "username": "gferrero",
          }
        }
      >
        <Avatar
          shape="circle"
          size={64}
        >
          <span
            className="ant-avatar ant-avatar-circle"
            style={
              Object {
                "fontSize": 18,
                "height": 64,
                "lineHeight": "64px",
                "width": 64,
              }
            }
          >
            <span
              className="ant-avatar-string"
              style={
                Object {
                  "WebkitTransform": "scale(1) translateX(-50%)",
                  "lineHeight": "64px",
                  "msTransform": "scale(1) translateX(-50%)",
                  "transform": "scale(1) translateX(-50%)",
                }
              }
            >
              G
            </span>
          </span>
        </Avatar>
      </Avatar>
      <span
        className="username"
      >
        @
        gferrero
      </span>
      <span
        className="node"
      >
        en ql-gferrero
      </span>
    </div>
    <div
      className="content"
    >
      Veo mi red wifi disponible pero no puedo conectarme
    </div>
    <div
      className="bottom"
    >
      <span
        className="comments"
      >
        <Icon
          type="message"
        >
          <LocaleReceiver
            componentName="Icon"
          >
            <i
              aria-label="icon: message"
              className="anticon anticon-message"
            >
              <IconReact
                className=""
                type="message-o"
              >
                <svg
                  aria-hidden="true"
                  className=""
                  data-icon="message"
                  fill="currentColor"
                  focusable="false"
                  height="1em"
                  key="svg-message"
                  viewBox="64 64 896 896"
                  width="1em"
                >
                  <path
                    d="M464 512a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm200 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm-400 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm661.2-173.6c-22.6-53.7-55-101.9-96.3-143.3a444.35 444.35 0 0 0-143.3-96.3C630.6 75.7 572.2 64 512 64h-2c-60.6.3-119.3 12.3-174.5 35.9a445.35 445.35 0 0 0-142 96.5c-40.9 41.3-73 89.3-95.2 142.8-23 55.4-34.6 114.3-34.3 174.9A449.4 449.4 0 0 0 112 714v152a46 46 0 0 0 46 46h152.1A449.4 449.4 0 0 0 510 960h2.1c59.9 0 118-11.6 172.7-34.3a444.48 444.48 0 0 0 142.8-95.2c41.3-40.9 73.8-88.7 96.5-142 23.6-55.2 35.6-113.9 35.9-174.5.3-60.9-11.5-120-34.8-175.6zm-151.1 438C704 845.8 611 884 512 884h-1.7c-60.3-.3-120.2-15.3-173.1-43.5l-8.4-4.5H188V695.2l-4.5-8.4C155.3 633.9 140.3 574 140 513.7c-.4-99.7 37.7-193.3 107.6-263.8 69.8-70.5 163.1-109.5 262.8-109.9h1.7c50 0 98.5 9.7 144.2 28.9 44.6 18.7 84.6 45.6 119 80 34.3 34.3 61.3 74.4 80 119 19.4 46.2 29.1 95.2 28.9 145.8-.6 99.6-39.7 192.9-110.1 262.7z"
                    key="svg-message-svg-0"
                  />
                </svg>
              </IconReact>
            </i>
          </LocaleReceiver>
        </Icon>
         
        0
      </span>
      <span
        className="date"
      >
        <t
          ago={false}
          calendar={false}
          decimal={false}
          element={null}
          filter={[Function]}
          format="D MMM"
          fromNow={false}
          interval={60000}
          local={false}
          locale="es"
          onChange={[Function]}
          titleFormat=""
          toNow={false}
          unit={null}
          unix={false}
          utc={false}
          withTitle={false}
        >
          <time
            dateTime={"2019-06-20T14:40:10.000Z"}
          >
            20 jun.
          </time>
        </t>
      </span>
    </div>
  </div>
</IssueSmallResume>
`;

exports[`Storyshots LastIssuesPanel/IssueSmallResume Very long reporter one 1`] = `
<IssueSmallResume
  issue={
    Object {
      "body": "Desde ayer a la maÃ±ana que no puedo conectarme a la red desde mi laptop",
      "comments": Array [],
      "commonIssueId": "unreachable_network",
      "id": "%25iaLjmMSCMYpUslj%2Bo8%2FEJJqkc%2BrtHJ%2B9tYpH4VXEwhQ%3D.sha256",
      "node": "ql-gferrero",
      "status": "open",
      "timestamp": 1561041610000,
      "user": Object {
        "avatar": "gferrero_avatar.jpeg",
        "client": Object {
          "hostname": "gf",
          "ip": "192.168.1.4",
        },
        "is_bot": false,
        "username": "averyverylongusername",
      },
    }
  }
  onSelect={[Function]}
>
  <div
    className="container"
    onClick={[Function]}
  >
    <div
      className="side"
    >
      <Avatar
        size={64}
        user={
          Object {
            "avatar": "gferrero_avatar.jpeg",
            "client": Object {
              "hostname": "gf",
              "ip": "192.168.1.4",
            },
            "is_bot": false,
            "username": "averyverylongusername",
          }
        }
      >
        <Avatar
          shape="circle"
          size={64}
          src="gferrero_avatar.jpeg"
        >
          <span
            className="ant-avatar ant-avatar-circle ant-avatar-image"
            style={
              Object {
                "fontSize": 18,
                "height": 64,
                "lineHeight": "64px",
                "width": 64,
              }
            }
          >
            <img
              onError={[Function]}
              src="gferrero_avatar.jpeg"
            />
          </span>
        </Avatar>
      </Avatar>
      <span
        className="username"
      >
        @
        averyverylongusername
      </span>
      <span
        className="node"
      >
        en ql-gferrero
      </span>
    </div>
    <div
      className="content"
    >
      Veo mi red wifi disponible pero no puedo conectarme
    </div>
    <div
      className="bottom"
    >
      <span
        className="comments"
      >
        <Icon
          type="message"
        >
          <LocaleReceiver
            componentName="Icon"
          >
            <i
              aria-label="icon: message"
              className="anticon anticon-message"
            >
              <IconReact
                className=""
                type="message-o"
              >
                <svg
                  aria-hidden="true"
                  className=""
                  data-icon="message"
                  fill="currentColor"
                  focusable="false"
                  height="1em"
                  key="svg-message"
                  viewBox="64 64 896 896"
                  width="1em"
                >
                  <path
                    d="M464 512a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm200 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm-400 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm661.2-173.6c-22.6-53.7-55-101.9-96.3-143.3a444.35 444.35 0 0 0-143.3-96.3C630.6 75.7 572.2 64 512 64h-2c-60.6.3-119.3 12.3-174.5 35.9a445.35 445.35 0 0 0-142 96.5c-40.9 41.3-73 89.3-95.2 142.8-23 55.4-34.6 114.3-34.3 174.9A449.4 449.4 0 0 0 112 714v152a46 46 0 0 0 46 46h152.1A449.4 449.4 0 0 0 510 960h2.1c59.9 0 118-11.6 172.7-34.3a444.48 444.48 0 0 0 142.8-95.2c41.3-40.9 73.8-88.7 96.5-142 23.6-55.2 35.6-113.9 35.9-174.5.3-60.9-11.5-120-34.8-175.6zm-151.1 438C704 845.8 611 884 512 884h-1.7c-60.3-.3-120.2-15.3-173.1-43.5l-8.4-4.5H188V695.2l-4.5-8.4C155.3 633.9 140.3 574 140 513.7c-.4-99.7 37.7-193.3 107.6-263.8 69.8-70.5 163.1-109.5 262.8-109.9h1.7c50 0 98.5 9.7 144.2 28.9 44.6 18.7 84.6 45.6 119 80 34.3 34.3 61.3 74.4 80 119 19.4 46.2 29.1 95.2 28.9 145.8-.6 99.6-39.7 192.9-110.1 262.7z"
                    key="svg-message-svg-0"
                  />
                </svg>
              </IconReact>
            </i>
          </LocaleReceiver>
        </Icon>
         
        0
      </span>
      <span
        className="date"
      >
        <t
          ago={false}
          calendar={false}
          decimal={false}
          element={null}
          filter={[Function]}
          format="D MMM"
          fromNow={false}
          interval={60000}
          local={false}
          locale="es"
          onChange={[Function]}
          titleFormat=""
          toNow={false}
          unit={null}
          unix={false}
          utc={false}
          withTitle={false}
        >
          <time
            dateTime={"2019-06-20T14:40:10.000Z"}
          >
            20 jun.
          </time>
        </t>
      </span>
    </div>
  </div>
</IssueSmallResume>
`;

exports[`Storyshots Login Authentication Error Form 1`] = `
<Login
  handleSubmit={[Function]}
  showError={true}
>
  <Formik
    enableReinitialize={false}
    initialValues={
      Object {
        "seedPhrase": "",
      }
    }
    isInitialValid={false}
    onSubmit={[Function]}
    validate={[Function]}
    validateOnBlur={true}
    validateOnChange={true}
  >
    <Form
      className="login-form"
    >
      <FormikConnect(FieldInner)>
        <FieldInner
          formik={
            Object {
              "dirty": false,
              "errors": Object {},
              "handleBlur": [Function],
              "handleChange": [Function],
              "handleReset": [Function],
              "handleSubmit": [Function],
              "initialValues": Object {
                "seedPhrase": "",
              },
              "isSubmitting": false,
              "isValid": false,
              "isValidating": false,
              "registerField": [Function],
              "resetForm": [Function],
              "setError": [Function],
              "setErrors": [Function],
              "setFieldError": [Function],
              "setFieldTouched": [Function],
              "setFieldValue": [Function],
              "setFormikState": [Function],
              "setStatus": [Function],
              "setSubmitting": [Function],
              "setTouched": [Function],
              "setValues": [Function],
              "status": undefined,
              "submitCount": 0,
              "submitForm": [Function],
              "touched": Object {},
              "unregisterField": [Function],
              "validate": [Function],
              "validateField": [Function],
              "validateForm": [Function],
              "validateOnBlur": true,
              "validateOnChange": true,
              "validationSchema": undefined,
              "values": Object {
                "seedPhrase": "",
              },
            }
          }
        >
          <Form
            className="login-form"
            colon={true}
            hideRequiredMark={false}
            layout="horizontal"
            onReset={[Function]}
            onSubmit={[Function]}
          >
            <form
              className="ant-form ant-form-horizontal login-form"
              onReset={[Function]}
              onSubmit={[Function]}
            >
              <Component
                htmlFor="seedPhrase"
                label="Frase Secreta"
                name="seedPhrase"
              >
                <FormikConnect(FieldInner)
                  name="seedPhrase"
                >
                  <FieldInner
                    formik={
                      Object {
                        "dirty": false,
                        "errors": Object {},
                        "handleBlur": [Function],
                        "handleChange": [Function],
                        "handleReset": [Function],
                        "handleSubmit": [Function],
                        "initialValues": Object {
                          "seedPhrase": "",
                        },
                        "isSubmitting": false,
                        "isValid": false,
                        "isValidating": false,
                        "registerField": [Function],
                        "resetForm": [Function],
                        "setError": [Function],
                        "setErrors": [Function],
                        "setFieldError": [Function],
                        "setFieldTouched": [Function],
                        "setFieldValue": [Function],
                        "setFormikState": [Function],
                        "setStatus": [Function],
                        "setSubmitting": [Function],
                        "setTouched": [Function],
                        "setValues": [Function],
                        "status": undefined,
                        "submitCount": 0,
                        "submitForm": [Function],
                        "touched": Object {},
                        "unregisterField": [Function],
                        "validate": [Function],
                        "validateField": [Function],
                        "validateForm": [Function],
                        "validateOnBlur": true,
                        "validateOnChange": true,
                        "validationSchema": undefined,
                        "values": Object {
                          "seedPhrase": "",
                        },
                      }
                    }
                    name="seedPhrase"
                  >
                    <FormItem
                      hasFeedback={false}
                      help={false}
                      htmlFor="seedPhrase"
                      label="Frase Secreta"
                    >
                      <Row
                        className="ant-form-item"
                        gutter={0}
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <Col
                            className="ant-form-item-label"
                          >
                            <div
                              className="ant-col ant-form-item-label"
                              style={Object {}}
                            >
                              <label
                                className=""
                                htmlFor="seedPhrase"
                                onClick={[Function]}
                                title="Frase Secreta"
                              >
                                Frase Secreta
                              </label>
                            </div>
                          </Col>
                          <Col
                            className="ant-form-item-control-wrapper"
                          >
                            <div
                              className="ant-col ant-form-item-control-wrapper"
                              style={Object {}}
                            >
                              <div
                                className="ant-form-item-control"
                              >
                                <span
                                  className="ant-form-item-children"
                                >
                                  <Component
                                    id="seedPhrase"
                                    name="seedPhrase"
                                  >
                                    <FormikConnect(FieldInner)
                                      name="seedPhrase"
                                    >
                                      <FieldInner
                                        formik={
                                          Object {
                                            "dirty": false,
                                            "errors": Object {},
                                            "handleBlur": [Function],
                                            "handleChange": [Function],
                                            "handleReset": [Function],
                                            "handleSubmit": [Function],
                                            "initialValues": Object {
                                              "seedPhrase": "",
                                            },
                                            "isSubmitting": false,
                                            "isValid": false,
                                            "isValidating": false,
                                            "registerField": [Function],
                                            "resetForm": [Function],
                                            "setError": [Function],
                                            "setErrors": [Function],
                                            "setFieldError": [Function],
                                            "setFieldTouched": [Function],
                                            "setFieldValue": [Function],
                                            "setFormikState": [Function],
                                            "setStatus": [Function],
                                            "setSubmitting": [Function],
                                            "setTouched": [Function],
                                            "setValues": [Function],
                                            "status": undefined,
                                            "submitCount": 0,
                                            "submitForm": [Function],
                                            "touched": Object {},
                                            "unregisterField": [Function],
                                            "validate": [Function],
                                            "validateField": [Function],
                                            "validateForm": [Function],
                                            "validateOnBlur": true,
                                            "validateOnChange": true,
                                            "validationSchema": undefined,
                                            "values": Object {
                                              "seedPhrase": "",
                                            },
                                          }
                                        }
                                        name="seedPhrase"
                                      >
                                        <Input
                                          id="seedPhrase"
                                          name="seedPhrase"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          type="text"
                                          value=""
                                        >
                                          <ClearableLabeledInput
                                            element={
                                              <input
                                                className="ant-input"
                                                id="seedPhrase"
                                                name="seedPhrase"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                type="text"
                                                value=""
                                              />
                                            }
                                            handleReset={[Function]}
                                            id="seedPhrase"
                                            inputType="input"
                                            name="seedPhrase"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            prefixCls="ant-input"
                                            type="text"
                                            value=""
                                          >
                                            <input
                                              className="ant-input"
                                              id="seedPhrase"
                                              name="seedPhrase"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              type="text"
                                              value=""
                                            />
                                          </ClearableLabeledInput>
                                        </Input>
                                      </FieldInner>
                                    </FormikConnect(FieldInner)>
                                  </Component>
                                </span>
                                <Animate
                                  animation={Object {}}
                                  component=""
                                  componentProps={Object {}}
                                  key="help"
                                  onAppear={[Function]}
                                  onEnd={[Function]}
                                  onEnter={[Function]}
                                  onLeave={[Function]}
                                  transitionAppear={true}
                                  transitionEnter={true}
                                  transitionLeave={true}
                                  transitionName="show-help"
                                />
                              </div>
                            </div>
                          </Col>
                        </div>
                      </Row>
                    </FormItem>
                  </FieldInner>
                </FormikConnect(FieldInner)>
              </Component>
              <Button
                block={false}
                disabled={false}
                ghost={false}
                htmlType="submit"
                loading={false}
                type="default"
              >
                <Wave>
                  <button
                    className="ant-btn ant-btn-default"
                    disabled={false}
                    onClick={[Function]}
                    type="submit"
                  >
                    <span
                      key=".0"
                    >
                      Verificar
                    </span>
                  </button>
                </Wave>
              </Button>
            </form>
          </Form>
        </FieldInner>
      </FormikConnect(FieldInner)>
    </Form>
  </Formik>
</Login>
`;

exports[`Storyshots Login Clean Form 1`] = `
<Login
  handleSubmit={[Function]}
>
  <Formik
    enableReinitialize={false}
    initialValues={
      Object {
        "seedPhrase": "",
      }
    }
    isInitialValid={false}
    onSubmit={[Function]}
    validate={[Function]}
    validateOnBlur={true}
    validateOnChange={true}
  >
    <Form
      className="login-form"
    >
      <FormikConnect(FieldInner)>
        <FieldInner
          formik={
            Object {
              "dirty": false,
              "errors": Object {},
              "handleBlur": [Function],
              "handleChange": [Function],
              "handleReset": [Function],
              "handleSubmit": [Function],
              "initialValues": Object {
                "seedPhrase": "",
              },
              "isSubmitting": false,
              "isValid": false,
              "isValidating": false,
              "registerField": [Function],
              "resetForm": [Function],
              "setError": [Function],
              "setErrors": [Function],
              "setFieldError": [Function],
              "setFieldTouched": [Function],
              "setFieldValue": [Function],
              "setFormikState": [Function],
              "setStatus": [Function],
              "setSubmitting": [Function],
              "setTouched": [Function],
              "setValues": [Function],
              "status": undefined,
              "submitCount": 0,
              "submitForm": [Function],
              "touched": Object {},
              "unregisterField": [Function],
              "validate": [Function],
              "validateField": [Function],
              "validateForm": [Function],
              "validateOnBlur": true,
              "validateOnChange": true,
              "validationSchema": undefined,
              "values": Object {
                "seedPhrase": "",
              },
            }
          }
        >
          <Form
            className="login-form"
            colon={true}
            hideRequiredMark={false}
            layout="horizontal"
            onReset={[Function]}
            onSubmit={[Function]}
          >
            <form
              className="ant-form ant-form-horizontal login-form"
              onReset={[Function]}
              onSubmit={[Function]}
            >
              <Component
                htmlFor="seedPhrase"
                label="Frase Secreta"
                name="seedPhrase"
              >
                <FormikConnect(FieldInner)
                  name="seedPhrase"
                >
                  <FieldInner
                    formik={
                      Object {
                        "dirty": false,
                        "errors": Object {},
                        "handleBlur": [Function],
                        "handleChange": [Function],
                        "handleReset": [Function],
                        "handleSubmit": [Function],
                        "initialValues": Object {
                          "seedPhrase": "",
                        },
                        "isSubmitting": false,
                        "isValid": false,
                        "isValidating": false,
                        "registerField": [Function],
                        "resetForm": [Function],
                        "setError": [Function],
                        "setErrors": [Function],
                        "setFieldError": [Function],
                        "setFieldTouched": [Function],
                        "setFieldValue": [Function],
                        "setFormikState": [Function],
                        "setStatus": [Function],
                        "setSubmitting": [Function],
                        "setTouched": [Function],
                        "setValues": [Function],
                        "status": undefined,
                        "submitCount": 0,
                        "submitForm": [Function],
                        "touched": Object {},
                        "unregisterField": [Function],
                        "validate": [Function],
                        "validateField": [Function],
                        "validateForm": [Function],
                        "validateOnBlur": true,
                        "validateOnChange": true,
                        "validationSchema": undefined,
                        "values": Object {
                          "seedPhrase": "",
                        },
                      }
                    }
                    name="seedPhrase"
                  >
                    <FormItem
                      hasFeedback={false}
                      help={false}
                      htmlFor="seedPhrase"
                      label="Frase Secreta"
                    >
                      <Row
                        className="ant-form-item"
                        gutter={0}
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <Col
                            className="ant-form-item-label"
                          >
                            <div
                              className="ant-col ant-form-item-label"
                              style={Object {}}
                            >
                              <label
                                className=""
                                htmlFor="seedPhrase"
                                onClick={[Function]}
                                title="Frase Secreta"
                              >
                                Frase Secreta
                              </label>
                            </div>
                          </Col>
                          <Col
                            className="ant-form-item-control-wrapper"
                          >
                            <div
                              className="ant-col ant-form-item-control-wrapper"
                              style={Object {}}
                            >
                              <div
                                className="ant-form-item-control"
                              >
                                <span
                                  className="ant-form-item-children"
                                >
                                  <Component
                                    id="seedPhrase"
                                    name="seedPhrase"
                                  >
                                    <FormikConnect(FieldInner)
                                      name="seedPhrase"
                                    >
                                      <FieldInner
                                        formik={
                                          Object {
                                            "dirty": false,
                                            "errors": Object {},
                                            "handleBlur": [Function],
                                            "handleChange": [Function],
                                            "handleReset": [Function],
                                            "handleSubmit": [Function],
                                            "initialValues": Object {
                                              "seedPhrase": "",
                                            },
                                            "isSubmitting": false,
                                            "isValid": false,
                                            "isValidating": false,
                                            "registerField": [Function],
                                            "resetForm": [Function],
                                            "setError": [Function],
                                            "setErrors": [Function],
                                            "setFieldError": [Function],
                                            "setFieldTouched": [Function],
                                            "setFieldValue": [Function],
                                            "setFormikState": [Function],
                                            "setStatus": [Function],
                                            "setSubmitting": [Function],
                                            "setTouched": [Function],
                                            "setValues": [Function],
                                            "status": undefined,
                                            "submitCount": 0,
                                            "submitForm": [Function],
                                            "touched": Object {},
                                            "unregisterField": [Function],
                                            "validate": [Function],
                                            "validateField": [Function],
                                            "validateForm": [Function],
                                            "validateOnBlur": true,
                                            "validateOnChange": true,
                                            "validationSchema": undefined,
                                            "values": Object {
                                              "seedPhrase": "",
                                            },
                                          }
                                        }
                                        name="seedPhrase"
                                      >
                                        <Input
                                          id="seedPhrase"
                                          name="seedPhrase"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          type="text"
                                          value=""
                                        >
                                          <ClearableLabeledInput
                                            element={
                                              <input
                                                className="ant-input"
                                                id="seedPhrase"
                                                name="seedPhrase"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                type="text"
                                                value=""
                                              />
                                            }
                                            handleReset={[Function]}
                                            id="seedPhrase"
                                            inputType="input"
                                            name="seedPhrase"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            prefixCls="ant-input"
                                            type="text"
                                            value=""
                                          >
                                            <input
                                              className="ant-input"
                                              id="seedPhrase"
                                              name="seedPhrase"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              type="text"
                                              value=""
                                            />
                                          </ClearableLabeledInput>
                                        </Input>
                                      </FieldInner>
                                    </FormikConnect(FieldInner)>
                                  </Component>
                                </span>
                                <Animate
                                  animation={Object {}}
                                  component=""
                                  componentProps={Object {}}
                                  key="help"
                                  onAppear={[Function]}
                                  onEnd={[Function]}
                                  onEnter={[Function]}
                                  onLeave={[Function]}
                                  transitionAppear={true}
                                  transitionEnter={true}
                                  transitionLeave={true}
                                  transitionName="show-help"
                                />
                              </div>
                            </div>
                          </Col>
                        </div>
                      </Row>
                    </FormItem>
                  </FieldInner>
                </FormikConnect(FieldInner)>
              </Component>
              <Button
                block={false}
                disabled={false}
                ghost={false}
                htmlType="submit"
                loading={false}
                type="default"
              >
                <Wave>
                  <button
                    className="ant-btn ant-btn-default"
                    disabled={false}
                    onClick={[Function]}
                    type="submit"
                  >
                    <span
                      key=".0"
                    >
                      Verificar
                    </span>
                  </button>
                </Wave>
              </Button>
            </form>
          </Form>
        </FieldInner>
      </FormikConnect(FieldInner)>
    </Form>
  </Formik>
</Login>
`;

exports[`Storyshots NewReportWizard Interactive Wizard 1`] = `
<div
  style={
    Object {
      "display": "flex",
      "flexDirection": "column",
      "minHeight": "80vh",
      "width": "100%",
    }
  }
>
  <NewReportWizard
    defaultNode="ql-roxa"
    nodes={
      Array [
        "ql-roxa",
        "ql-nicoyjesi",
        "ql-natiysofi",
        "si-silvia",
      ]
    }
    onFinish={[Function]}
  >
    <NodeSelectionStepPage
      isFirst={true}
      isLast={false}
      key="node_selection"
      onLeaveBackward={[Function]}
      onLeaveForward={[Function]}
      report={Object {}}
      shouldRender={true}
    >
      <WizardStep
        shouldRender={true}
      >
        <div
          className="wizard-step"
        >
          <div
            className="step-header"
          >
            Nuevo Reporte
            <Button
              block={false}
              className="close-button"
              ghost={false}
              htmlType="button"
              icon="close"
              loading={false}
              onClick={[Function]}
            >
              <Wave>
                <button
                  className="ant-btn close-button ant-btn-icon-only"
                  onClick={[Function]}
                  type="button"
                >
                  <Icon
                    type="close"
                  >
                    <LocaleReceiver
                      componentName="Icon"
                    >
                      <i
                        aria-label="icon: close"
                        className="anticon anticon-close"
                      >
                        <IconReact
                          className=""
                          type="close-o"
                        >
                          <svg
                            aria-hidden="true"
                            className=""
                            data-icon="close"
                            fill="currentColor"
                            focusable="false"
                            height="1em"
                            key="svg-close"
                            viewBox="64 64 896 896"
                            width="1em"
                          >
                            <path
                              d="M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 0 0 203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"
                              key="svg-close-svg-0"
                            />
                          </svg>
                        </IconReact>
                      </i>
                    </LocaleReceiver>
                  </Icon>
                </button>
              </Wave>
            </Button>
          </div>
          <div
            className="step-content"
          >
            <NodeSelectionStep
              node={null}
              nodes={Array []}
              onSubmit={[Function]}
            >
              <div
                className="step-title"
              >
                <p>
                  En quÃ© nodo notaste el problema
                </p>
              </div>
              <Formik
                enableReinitialize={true}
                initialValues={
                  Object {
                    "node": "",
                  }
                }
                isInitialValid={false}
                onSubmit={[Function]}
                validateOnBlur={true}
                validateOnChange={true}
              >
                <Form
                  className="form"
                >
                  <FormikConnect(FieldInner)>
                    <FieldInner
                      formik={
                        Object {
                          "dirty": false,
                          "errors": Object {},
                          "handleBlur": [Function],
                          "handleChange": [Function],
                          "handleReset": [Function],
                          "handleSubmit": [Function],
                          "initialValues": Object {
                            "node": "",
                          },
                          "isSubmitting": false,
                          "isValid": false,
                          "isValidating": false,
                          "registerField": [Function],
                          "resetForm": [Function],
                          "setError": [Function],
                          "setErrors": [Function],
                          "setFieldError": [Function],
                          "setFieldTouched": [Function],
                          "setFieldValue": [Function],
                          "setFormikState": [Function],
                          "setStatus": [Function],
                          "setSubmitting": [Function],
                          "setTouched": [Function],
                          "setValues": [Function],
                          "status": undefined,
                          "submitCount": 0,
                          "submitForm": [Function],
                          "touched": Object {},
                          "unregisterField": [Function],
                          "validate": undefined,
                          "validateField": [Function],
                          "validateForm": [Function],
                          "validateOnBlur": true,
                          "validateOnChange": true,
                          "validationSchema": undefined,
                          "values": Object {
                            "node": "",
                          },
                        }
                      }
                    >
                      <Form
                        className="form"
                        colon={true}
                        hideRequiredMark={false}
                        layout="horizontal"
                        onReset={[Function]}
                        onSubmit={[Function]}
                      >
                        <form
                          className="ant-form ant-form-horizontal form"
                          onReset={[Function]}
                          onSubmit={[Function]}
                        >
                          <Component
                            htmlFor="node"
                            label="Nodo afectado"
                            name="node"
                          >
                            <FormikConnect(FieldInner)
                              name="node"
                            >
                              <FieldInner
                                formik={
                                  Object {
                                    "dirty": false,
                                    "errors": Object {},
                                    "handleBlur": [Function],
                                    "handleChange": [Function],
                                    "handleReset": [Function],
                                    "handleSubmit": [Function],
                                    "initialValues": Object {
                                      "node": "",
                                    },
                                    "isSubmitting": false,
                                    "isValid": false,
                                    "isValidating": false,
                                    "registerField": [Function],
                                    "resetForm": [Function],
                                    "setError": [Function],
                                    "setErrors": [Function],
                                    "setFieldError": [Function],
                                    "setFieldTouched": [Function],
                                    "setFieldValue": [Function],
                                    "setFormikState": [Function],
                                    "setStatus": [Function],
                                    "setSubmitting": [Function],
                                    "setTouched": [Function],
                                    "setValues": [Function],
                                    "status": undefined,
                                    "submitCount": 0,
                                    "submitForm": [Function],
                                    "touched": Object {},
                                    "unregisterField": [Function],
                                    "validate": undefined,
                                    "validateField": [Function],
                                    "validateForm": [Function],
                                    "validateOnBlur": true,
                                    "validateOnChange": true,
                                    "validationSchema": undefined,
                                    "values": Object {
                                      "node": "",
                                    },
                                  }
                                }
                                name="node"
                              >
                                <FormItem
                                  hasFeedback={false}
                                  help={false}
                                  htmlFor="node"
                                  label="Nodo afectado"
                                >
                                  <Row
                                    className="ant-form-item"
                                    gutter={0}
                                    key="row"
                                  >
                                    <div
                                      className="ant-row ant-form-item"
                                      style={Object {}}
                                    >
                                      <Col
                                        className="ant-form-item-label"
                                      >
                                        <div
                                          className="ant-col ant-form-item-label"
                                          style={Object {}}
                                        >
                                          <label
                                            className=""
                                            htmlFor="node"
                                            onClick={[Function]}
                                            title="Nodo afectado"
                                          >
                                            Nodo afectado
                                          </label>
                                        </div>
                                      </Col>
                                      <Col
                                        className="ant-form-item-control-wrapper"
                                      >
                                        <div
                                          className="ant-col ant-form-item-control-wrapper"
                                          style={Object {}}
                                        >
                                          <div
                                            className="ant-form-item-control"
                                          >
                                            <span
                                              className="ant-form-item-children"
                                            >
                                              <Component
                                                filterOption={[Function]}
                                                id="node"
                                                name="node"
                                                optionFilterProp="children"
                                                showSearch={true}
                                              >
                                                <FormikConnect(FieldInner)
                                                  name="node"
                                                >
                                                  <FieldInner
                                                    formik={
                                                      Object {
                                                        "dirty": false,
                                                        "errors": Object {},
                                                        "handleBlur": [Function],
                                                        "handleChange": [Function],
                                                        "handleReset": [Function],
                                                        "handleSubmit": [Function],
                                                        "initialValues": Object {
                                                          "node": "",
                                                        },
                                                        "isSubmitting": false,
                                                        "isValid": false,
                                                        "isValidating": false,
                                                        "registerField": [Function],
                                                        "resetForm": [Function],
                                                        "setError": [Function],
                                                        "setErrors": [Function],
                                                        "setFieldError": [Function],
                                                        "setFieldTouched": [Function],
                                                        "setFieldValue": [Function],
                                                        "setFormikState": [Function],
                                                        "setStatus": [Function],
                                                        "setSubmitting": [Function],
                                                        "setTouched": [Function],
                                                        "setValues": [Function],
                                                        "status": undefined,
                                                        "submitCount": 0,
                                                        "submitForm": [Function],
                                                        "touched": Object {},
                                                        "unregisterField": [Function],
                                                        "validate": undefined,
                                                        "validateField": [Function],
                                                        "validateForm": [Function],
                                                        "validateOnBlur": true,
                                                        "validateOnChange": true,
                                                        "validationSchema": undefined,
                                                        "values": Object {
                                                          "node": "",
                                                        },
                                                      }
                                                    }
                                                    name="node"
                                                  >
                                                    <Select
                                                      choiceTransitionName="zoom"
                                                      filterOption={[Function]}
                                                      id="node"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      optionFilterProp="children"
                                                      showSearch={true}
                                                      transitionName="slide-up"
                                                      value=""
                                                    >
                                                      <Select
                                                        allowClear={false}
                                                        autoClearSearchValue={true}
                                                        backfill={false}
                                                        choiceTransitionName="zoom"
                                                        className=""
                                                        clearIcon={
                                                          <Icon
                                                            className="ant-select-clear-icon"
                                                            theme="filled"
                                                            type="close-circle"
                                                          />
                                                        }
                                                        combobox={false}
                                                        defaultActiveFirstOption={true}
                                                        defaultOpen={false}
                                                        dropdownMatchSelectWidth={true}
                                                        dropdownMenuStyle={Object {}}
                                                        dropdownRender={[Function]}
                                                        dropdownStyle={Object {}}
                                                        filterOption={[Function]}
                                                        id="node"
                                                        inputIcon={
                                                          <Icon
                                                            className="ant-select-arrow-icon"
                                                            type="down"
                                                          />
                                                        }
                                                        labelInValue={false}
                                                        menuItemSelectedIcon={
                                                          <Icon
                                                            className="ant-select-selected-icon"
                                                            type="check"
                                                          />
                                                        }
                                                        multiple={false}
                                                        notFoundContent={
                                                          <Context.Consumer>
                                                            [Function]
                                                          </Context.Consumer>
                                                        }
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onDeselect={[Function]}
                                                        onFocus={[Function]}
                                                        onInputKeyDown={[Function]}
                                                        onSearch={[Function]}
                                                        onSelect={[Function]}
                                                        optionFilterProp="children"
                                                        optionLabelProp="children"
                                                        placeholder=""
                                                        prefixCls="ant-select"
                                                        removeIcon={
                                                          <Icon
                                                            className="ant-select-remove-icon"
                                                            type="close"
                                                          />
                                                        }
                                                        showAction={
                                                          Array [
                                                            "click",
                                                          ]
                                                        }
                                                        showSearch={true}
                                                        tabIndex={0}
                                                        tags={false}
                                                        tokenSeparators={Array []}
                                                        transitionName="slide-up"
                                                        value=""
                                                      >
                                                        <SelectTrigger
                                                          ariaId="test-uuid"
                                                          backfillValue=""
                                                          combobox={false}
                                                          defaultActiveFirstOption={true}
                                                          dropdownMatchSelectWidth={true}
                                                          dropdownMenuStyle={Object {}}
                                                          dropdownRender={[Function]}
                                                          dropdownStyle={Object {}}
                                                          empty={false}
                                                          inputValue=""
                                                          menuItemSelectedIcon={
                                                            <Icon
                                                              className="ant-select-selected-icon"
                                                              type="check"
                                                            />
                                                          }
                                                          multiple={false}
                                                          onDropdownVisibleChange={[Function]}
                                                          onMenuDeselect={[Function]}
                                                          onMenuSelect={[Function]}
                                                          onPopupFocus={[Function]}
                                                          options={Array []}
                                                          prefixCls="ant-select"
                                                          showAction={
                                                            Array [
                                                              "click",
                                                            ]
                                                          }
                                                          showSearch={true}
                                                          transitionName="slide-up"
                                                          value={
                                                            Array [
                                                              "",
                                                            ]
                                                          }
                                                          visible={false}
                                                        >
                                                          <Trigger
                                                            action={Array []}
                                                            afterPopupVisibleChange={[Function]}
                                                            ariaId="test-uuid"
                                                            backfillValue=""
                                                            blurDelay={0.15}
                                                            builtinPlacements={
                                                              Object {
                                                                "bottomLeft": Object {
                                                                  "offset": Array [
                                                                    0,
                                                                    4,
                                                                  ],
                                                                  "overflow": Object {
                                                                    "adjustX": 0,
                                                                    "adjustY": 1,
                                                                  },
                                                                  "points": Array [
                                                                    "tl",
                                                                    "bl",
                                                                  ],
                                                                },
                                                                "topLeft": Object {
                                                                  "offset": Array [
                                                                    0,
                                                                    -4,
                                                                  ],
                                                                  "overflow": Object {
                                                                    "adjustX": 0,
                                                                    "adjustY": 1,
                                                                  },
                                                                  "points": Array [
                                                                    "bl",
                                                                    "tl",
                                                                  ],
                                                                },
                                                              }
                                                            }
                                                            combobox={false}
                                                            defaultActiveFirstOption={true}
                                                            defaultPopupVisible={false}
                                                            destroyPopupOnHide={false}
                                                            dropdownMatchSelectWidth={true}
                                                            dropdownMenuStyle={Object {}}
                                                            dropdownRender={[Function]}
                                                            dropdownStyle={Object {}}
                                                            focusDelay={0}
                                                            getDocument={[Function]}
                                                            getPopupClassNameFromAlign={[Function]}
                                                            hideAction={
                                                              Array [
                                                                "blur",
                                                              ]
                                                            }
                                                            inputValue=""
                                                            mask={false}
                                                            maskClosable={true}
                                                            menuItemSelectedIcon={
                                                              <Icon
                                                                className="ant-select-selected-icon"
                                                                type="check"
                                                              />
                                                            }
                                                            mouseEnterDelay={0}
                                                            mouseLeaveDelay={0.1}
                                                            multiple={false}
                                                            onDropdownVisibleChange={[Function]}
                                                            onMenuDeselect={[Function]}
                                                            onMenuSelect={[Function]}
                                                            onPopupAlign={[Function]}
                                                            onPopupVisibleChange={[Function]}
                                                            options={Array []}
                                                            popup={
                                                              <DropdownMenu
                                                                ariaId="test-uuid"
                                                                backfillValue=""
                                                                defaultActiveFirstOption={true}
                                                                dropdownMenuStyle={Object {}}
                                                                inputValue=""
                                                                menuItemSelectedIcon={
                                                                  <Icon
                                                                    className="ant-select-selected-icon"
                                                                    type="check"
                                                                  />
                                                                }
                                                                menuItems={Array []}
                                                                multiple={false}
                                                                onMenuDeselect={[Function]}
                                                                onMenuSelect={[Function]}
                                                                onPopupFocus={[Function]}
                                                                prefixCls="ant-select-dropdown"
                                                                value={
                                                                  Array [
                                                                    "",
                                                                  ]
                                                                }
                                                                visible={false}
                                                              />
                                                            }
                                                            popupAlign={Object {}}
                                                            popupClassName="ant-select-dropdown--single"
                                                            popupPlacement="bottomLeft"
                                                            popupStyle={Object {}}
                                                            popupTransitionName="slide-up"
                                                            popupVisible={false}
                                                            prefixCls="ant-select-dropdown"
                                                            showAction={
                                                              Array [
                                                                "click",
                                                              ]
                                                            }
                                                            showSearch={true}
                                                            transitionName="slide-up"
                                                            value={
                                                              Array [
                                                                "",
                                                              ]
                                                            }
                                                            visible={false}
                                                          >
                                                            <div
                                                              className="ant-select ant-select-enabled"
                                                              id="node"
                                                              key="trigger"
                                                              onBlur={[Function]}
                                                              onClick={[Function]}
                                                              onFocus={[Function]}
                                                              onMouseDown={[Function]}
                                                              onMouseOut={[Function]}
                                                              onMouseUp={[Function]}
                                                              onTouchStart={[Function]}
                                                            >
                                                              <div
                                                                aria-autocomplete="list"
                                                                aria-controls="test-uuid"
                                                                aria-expanded={false}
                                                                aria-haspopup="true"
                                                                className="ant-select-selection
            ant-select-selection--single"
                                                                key="selection"
                                                                onKeyDown={[Function]}
                                                                role="combobox"
                                                                tabIndex={0}
                                                              >
                                                                <div
                                                                  className="ant-select-selection__rendered"
                                                                >
                                                                  <div
                                                                    className="ant-select-selection-selected-value"
                                                                    key="value"
                                                                    style={
                                                                      Object {
                                                                        "display": "block",
                                                                        "opacity": 1,
                                                                      }
                                                                    }
                                                                    title=""
                                                                  />
                                                                  <div
                                                                    className="ant-select-search ant-select-search--inline"
                                                                    key="input"
                                                                    style={
                                                                      Object {
                                                                        "display": "none",
                                                                      }
                                                                    }
                                                                  >
                                                                    <div
                                                                      className="ant-select-search__field__wrap"
                                                                    >
                                                                      <input
                                                                        autoComplete="off"
                                                                        className="ant-select-search__field"
                                                                        id="node"
                                                                        onChange={[Function]}
                                                                        onKeyDown={[Function]}
                                                                        value=""
                                                                      />
                                                                      <span
                                                                        className="ant-select-search__field__mirror"
                                                                      >
                                                                        Â 
                                                                      </span>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <span
                                                                  className="ant-select-arrow"
                                                                  key="arrow"
                                                                  onClick={[Function]}
                                                                  style={
                                                                    Object {
                                                                      "WebkitUserSelect": "none",
                                                                      "userSelect": "none",
                                                                    }
                                                                  }
                                                                  unselectable="on"
                                                                >
                                                                  <Icon
                                                                    className="ant-select-arrow-icon"
                                                                    type="down"
                                                                  >
                                                                    <LocaleReceiver
                                                                      componentName="Icon"
                                                                    >
                                                                      <i
                                                                        aria-label="icon: down"
                                                                        className="anticon anticon-down ant-select-arrow-icon"
                                                                      >
                                                                        <IconReact
                                                                          className=""
                                                                          type="down-o"
                                                                        >
                                                                          <svg
                                                                            aria-hidden="true"
                                                                            className=""
                                                                            data-icon="down"
                                                                            fill="currentColor"
                                                                            focusable="false"
                                                                            height="1em"
                                                                            key="svg-down"
                                                                            viewBox="64 64 896 896"
                                                                            width="1em"
                                                                          >
                                                                            <path
                                                                              d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                                                                              key="svg-down-svg-0"
                                                                            />
                                                                          </svg>
                                                                        </IconReact>
                                                                      </i>
                                                                    </LocaleReceiver>
                                                                  </Icon>
                                                                </span>
                                                              </div>
                                                            </div>
                                                          </Trigger>
                                                        </SelectTrigger>
                                                      </Select>
                                                    </Select>
                                                  </FieldInner>
                                                </FormikConnect(FieldInner)>
                                              </Component>
                                            </span>
                                            <Animate
                                              animation={Object {}}
                                              component=""
                                              componentProps={Object {}}
                                              key="help"
                                              onAppear={[Function]}
                                              onEnd={[Function]}
                                              onEnter={[Function]}
                                              onLeave={[Function]}
                                              transitionAppear={true}
                                              transitionEnter={true}
                                              transitionLeave={true}
                                              transitionName="show-help"
                                            />
                                          </div>
                                        </div>
                                      </Col>
                                    </div>
                                  </Row>
                                </FormItem>
                              </FieldInner>
                            </FormikConnect(FieldInner)>
                          </Component>
                        </form>
                      </Form>
                    </FieldInner>
                  </FormikConnect(FieldInner)>
                </Form>
              </Formik>
            </NodeSelectionStep>
            <Navigation
              isFirst={true}
              isLast={false}
              onNext={[Function]}
              onPrev={[Function]}
            >
              <div
                className="wizard-navigation"
              >
                <Button
                  block={false}
                  ghost={false}
                  htmlType="button"
                  loading={false}
                  onClick={[Function]}
                  style={
                    Object {
                      "display": "none",
                    }
                  }
                >
                  <Wave>
                    <button
                      className="ant-btn"
                      onClick={[Function]}
                      style={
                        Object {
                          "display": "none",
                        }
                      }
                      type="button"
                    >
                      <Icon
                        key=".0"
                        type="left"
                      >
                        <LocaleReceiver
                          componentName="Icon"
                        >
                          <i
                            aria-label="icon: left"
                            className="anticon anticon-left"
                          >
                            <IconReact
                              className=""
                              type="left-o"
                            >
                              <svg
                                aria-hidden="true"
                                className=""
                                data-icon="left"
                                fill="currentColor"
                                focusable="false"
                                height="1em"
                                key="svg-left"
                                viewBox="64 64 896 896"
                                width="1em"
                              >
                                <path
                                  d="M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 0 0 0 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z"
                                  key="svg-left-svg-0"
                                />
                              </svg>
                            </IconReact>
                          </i>
                        </LocaleReceiver>
                      </Icon>
                      <span
                        key=".1"
                      >
                        Volver
                      </span>
                    </button>
                  </Wave>
                </Button>
                <Button
                  block={false}
                  className="right-button"
                  ghost={false}
                  htmlType="button"
                  loading={false}
                  onClick={[Function]}
                  style={
                    Object {
                      "display": "block",
                    }
                  }
                >
                  <Wave>
                    <button
                      className="ant-btn right-button"
                      onClick={[Function]}
                      style={
                        Object {
                          "display": "block",
                        }
                      }
                      type="button"
                    >
                      <span
                        key=".0"
                      >
                        Continuar 
                      </span>
                      <Icon
                        key=".1"
                        type="right"
                      >
                        <LocaleReceiver
                          componentName="Icon"
                        >
                          <i
                            aria-label="icon: right"
                            className="anticon anticon-right"
                          >
                            <IconReact
                              className=""
                              type="right-o"
                            >
                              <svg
                                aria-hidden="true"
                                className=""
                                data-icon="right"
                                fill="currentColor"
                                focusable="false"
                                height="1em"
                                key="svg-right"
                                viewBox="64 64 896 896"
                                width="1em"
                              >
                                <path
                                  d="M765.7 486.8L314.9 134.7A7.97 7.97 0 0 0 302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 0 0 0-50.4z"
                                  key="svg-right-svg-0"
                                />
                              </svg>
                            </IconReact>
                          </i>
                        </LocaleReceiver>
                      </Icon>
                    </button>
                  </Wave>
                </Button>
                <Button
                  block={false}
                  className="right-button"
                  ghost={false}
                  htmlType="button"
                  loading={false}
                  onClick={[Function]}
                  style={
                    Object {
                      "display": "none",
                    }
                  }
                >
                  <Wave>
                    <button
                      className="ant-btn right-button"
                      onClick={[Function]}
                      style={
                        Object {
                          "display": "none",
                        }
                      }
                      type="button"
                    >
                      <span
                        key=".0"
                      >
                        Finalizar
                      </span>
                    </button>
                  </Wave>
                </Button>
              </div>
            </Navigation>
          </div>
        </div>
      </WizardStep>
    </NodeSelectionStepPage>
    <ProblemSelectionStep
      isFirst={false}
      isLast={false}
      key="problem_selection"
      onLeaveBackward={[Function]}
      onLeaveForward={[Function]}
      report={Object {}}
      shouldRender={false}
    >
      <WizardStep
        shouldRender={false}
      />
    </ProblemSelectionStep>
    <ProblemDescriptionStep
      isFirst={false}
      isLast={true}
      key="problem_description"
      onLeaveBackward={[Function]}
      onLeaveForward={[Function]}
      report={Object {}}
      shouldRender={false}
    >
      <WizardStep
        shouldRender={false}
      />
    </ProblemDescriptionStep>
  </NewReportWizard>
</div>
`;

exports[`Storyshots NewReportWizard Node Selection 1`] = `
<div
  style={
    Object {
      "display": "flex",
      "flexDirection": "column",
      "minHeight": "80vh",
      "width": "100%",
    }
  }
>
  <NodeSelectionStep
    defaultNode="ql-roxa"
    isFirst={true}
    nodes={
      Array [
        "ql-roxa",
        "ql-nicoyjesi",
        "ql-natiysofi",
        "si-silvia",
      ]
    }
    onLeaveBackward={[Function]}
    onLeaveForward={[Function]}
  >
    <div
      className="step-title"
    >
      <p>
        En quÃ© nodo notaste el problema
      </p>
    </div>
    <Formik
      enableReinitialize={true}
      initialValues={
        Object {
          "node": "",
        }
      }
      isInitialValid={false}
      onSubmit={[Function]}
      validateOnBlur={true}
      validateOnChange={true}
    >
      <Form
        className="form"
      >
        <FormikConnect(FieldInner)>
          <FieldInner
            formik={
              Object {
                "dirty": false,
                "errors": Object {},
                "handleBlur": [Function],
                "handleChange": [Function],
                "handleReset": [Function],
                "handleSubmit": [Function],
                "initialValues": Object {
                  "node": "",
                },
                "isSubmitting": false,
                "isValid": false,
                "isValidating": false,
                "registerField": [Function],
                "resetForm": [Function],
                "setError": [Function],
                "setErrors": [Function],
                "setFieldError": [Function],
                "setFieldTouched": [Function],
                "setFieldValue": [Function],
                "setFormikState": [Function],
                "setStatus": [Function],
                "setSubmitting": [Function],
                "setTouched": [Function],
                "setValues": [Function],
                "status": undefined,
                "submitCount": 0,
                "submitForm": [Function],
                "touched": Object {},
                "unregisterField": [Function],
                "validate": undefined,
                "validateField": [Function],
                "validateForm": [Function],
                "validateOnBlur": true,
                "validateOnChange": true,
                "validationSchema": undefined,
                "values": Object {
                  "node": "",
                },
              }
            }
          >
            <Form
              className="form"
              colon={true}
              hideRequiredMark={false}
              layout="horizontal"
              onReset={[Function]}
              onSubmit={[Function]}
            >
              <form
                className="ant-form ant-form-horizontal form"
                onReset={[Function]}
                onSubmit={[Function]}
              >
                <Component
                  htmlFor="node"
                  label="Nodo afectado"
                  name="node"
                >
                  <FormikConnect(FieldInner)
                    name="node"
                  >
                    <FieldInner
                      formik={
                        Object {
                          "dirty": false,
                          "errors": Object {},
                          "handleBlur": [Function],
                          "handleChange": [Function],
                          "handleReset": [Function],
                          "handleSubmit": [Function],
                          "initialValues": Object {
                            "node": "",
                          },
                          "isSubmitting": false,
                          "isValid": false,
                          "isValidating": false,
                          "registerField": [Function],
                          "resetForm": [Function],
                          "setError": [Function],
                          "setErrors": [Function],
                          "setFieldError": [Function],
                          "setFieldTouched": [Function],
                          "setFieldValue": [Function],
                          "setFormikState": [Function],
                          "setStatus": [Function],
                          "setSubmitting": [Function],
                          "setTouched": [Function],
                          "setValues": [Function],
                          "status": undefined,
                          "submitCount": 0,
                          "submitForm": [Function],
                          "touched": Object {},
                          "unregisterField": [Function],
                          "validate": undefined,
                          "validateField": [Function],
                          "validateForm": [Function],
                          "validateOnBlur": true,
                          "validateOnChange": true,
                          "validationSchema": undefined,
                          "values": Object {
                            "node": "",
                          },
                        }
                      }
                      name="node"
                    >
                      <FormItem
                        hasFeedback={false}
                        help={false}
                        htmlFor="node"
                        label="Nodo afectado"
                      >
                        <Row
                          className="ant-form-item"
                          gutter={0}
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <Col
                              className="ant-form-item-label"
                            >
                              <div
                                className="ant-col ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="node"
                                  onClick={[Function]}
                                  title="Nodo afectado"
                                >
                                  Nodo afectado
                                </label>
                              </div>
                            </Col>
                            <Col
                              className="ant-form-item-control-wrapper"
                            >
                              <div
                                className="ant-col ant-form-item-control-wrapper"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control"
                                >
                                  <span
                                    className="ant-form-item-children"
                                  >
                                    <Component
                                      filterOption={[Function]}
                                      id="node"
                                      name="node"
                                      optionFilterProp="children"
                                      showSearch={true}
                                    >
                                      <FormikConnect(FieldInner)
                                        name="node"
                                      >
                                        <FieldInner
                                          formik={
                                            Object {
                                              "dirty": false,
                                              "errors": Object {},
                                              "handleBlur": [Function],
                                              "handleChange": [Function],
                                              "handleReset": [Function],
                                              "handleSubmit": [Function],
                                              "initialValues": Object {
                                                "node": "",
                                              },
                                              "isSubmitting": false,
                                              "isValid": false,
                                              "isValidating": false,
                                              "registerField": [Function],
                                              "resetForm": [Function],
                                              "setError": [Function],
                                              "setErrors": [Function],
                                              "setFieldError": [Function],
                                              "setFieldTouched": [Function],
                                              "setFieldValue": [Function],
                                              "setFormikState": [Function],
                                              "setStatus": [Function],
                                              "setSubmitting": [Function],
                                              "setTouched": [Function],
                                              "setValues": [Function],
                                              "status": undefined,
                                              "submitCount": 0,
                                              "submitForm": [Function],
                                              "touched": Object {},
                                              "unregisterField": [Function],
                                              "validate": undefined,
                                              "validateField": [Function],
                                              "validateForm": [Function],
                                              "validateOnBlur": true,
                                              "validateOnChange": true,
                                              "validationSchema": undefined,
                                              "values": Object {
                                                "node": "",
                                              },
                                            }
                                          }
                                          name="node"
                                        >
                                          <Select
                                            choiceTransitionName="zoom"
                                            filterOption={[Function]}
                                            id="node"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            optionFilterProp="children"
                                            showSearch={true}
                                            transitionName="slide-up"
                                            value=""
                                          >
                                            <Select
                                              allowClear={false}
                                              autoClearSearchValue={true}
                                              backfill={false}
                                              choiceTransitionName="zoom"
                                              className=""
                                              clearIcon={
                                                <Icon
                                                  className="ant-select-clear-icon"
                                                  theme="filled"
                                                  type="close-circle"
                                                />
                                              }
                                              combobox={false}
                                              defaultActiveFirstOption={true}
                                              defaultOpen={false}
                                              dropdownMatchSelectWidth={true}
                                              dropdownMenuStyle={Object {}}
                                              dropdownRender={[Function]}
                                              dropdownStyle={Object {}}
                                              filterOption={[Function]}
                                              id="node"
                                              inputIcon={
                                                <Icon
                                                  className="ant-select-arrow-icon"
                                                  type="down"
                                                />
                                              }
                                              labelInValue={false}
                                              menuItemSelectedIcon={
                                                <Icon
                                                  className="ant-select-selected-icon"
                                                  type="check"
                                                />
                                              }
                                              multiple={false}
                                              notFoundContent={
                                                <Context.Consumer>
                                                  [Function]
                                                </Context.Consumer>
                                              }
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onDeselect={[Function]}
                                              onFocus={[Function]}
                                              onInputKeyDown={[Function]}
                                              onSearch={[Function]}
                                              onSelect={[Function]}
                                              optionFilterProp="children"
                                              optionLabelProp="children"
                                              placeholder=""
                                              prefixCls="ant-select"
                                              removeIcon={
                                                <Icon
                                                  className="ant-select-remove-icon"
                                                  type="close"
                                                />
                                              }
                                              showAction={
                                                Array [
                                                  "click",
                                                ]
                                              }
                                              showSearch={true}
                                              tabIndex={0}
                                              tags={false}
                                              tokenSeparators={Array []}
                                              transitionName="slide-up"
                                              value=""
                                            >
                                              <SelectTrigger
                                                ariaId="test-uuid"
                                                backfillValue=""
                                                combobox={false}
                                                defaultActiveFirstOption={true}
                                                dropdownMatchSelectWidth={true}
                                                dropdownMenuStyle={Object {}}
                                                dropdownRender={[Function]}
                                                dropdownStyle={Object {}}
                                                empty={false}
                                                inputValue=""
                                                menuItemSelectedIcon={
                                                  <Icon
                                                    className="ant-select-selected-icon"
                                                    type="check"
                                                  />
                                                }
                                                multiple={false}
                                                onDropdownVisibleChange={[Function]}
                                                onMenuDeselect={[Function]}
                                                onMenuSelect={[Function]}
                                                onPopupFocus={[Function]}
                                                options={Array []}
                                                prefixCls="ant-select"
                                                showAction={
                                                  Array [
                                                    "click",
                                                  ]
                                                }
                                                showSearch={true}
                                                transitionName="slide-up"
                                                value={
                                                  Array [
                                                    "",
                                                  ]
                                                }
                                                visible={false}
                                              >
                                                <Trigger
                                                  action={Array []}
                                                  afterPopupVisibleChange={[Function]}
                                                  ariaId="test-uuid"
                                                  backfillValue=""
                                                  blurDelay={0.15}
                                                  builtinPlacements={
                                                    Object {
                                                      "bottomLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "tl",
                                                          "bl",
                                                        ],
                                                      },
                                                      "topLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          -4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "bl",
                                                          "tl",
                                                        ],
                                                      },
                                                    }
                                                  }
                                                  combobox={false}
                                                  defaultActiveFirstOption={true}
                                                  defaultPopupVisible={false}
                                                  destroyPopupOnHide={false}
                                                  dropdownMatchSelectWidth={true}
                                                  dropdownMenuStyle={Object {}}
                                                  dropdownRender={[Function]}
                                                  dropdownStyle={Object {}}
                                                  focusDelay={0}
                                                  getDocument={[Function]}
                                                  getPopupClassNameFromAlign={[Function]}
                                                  hideAction={
                                                    Array [
                                                      "blur",
                                                    ]
                                                  }
                                                  inputValue=""
                                                  mask={false}
                                                  maskClosable={true}
                                                  menuItemSelectedIcon={
                                                    <Icon
                                                      className="ant-select-selected-icon"
                                                      type="check"
                                                    />
                                                  }
                                                  mouseEnterDelay={0}
                                                  mouseLeaveDelay={0.1}
                                                  multiple={false}
                                                  onDropdownVisibleChange={[Function]}
                                                  onMenuDeselect={[Function]}
                                                  onMenuSelect={[Function]}
                                                  onPopupAlign={[Function]}
                                                  onPopupVisibleChange={[Function]}
                                                  options={Array []}
                                                  popup={
                                                    <DropdownMenu
                                                      ariaId="test-uuid"
                                                      backfillValue=""
                                                      defaultActiveFirstOption={true}
                                                      dropdownMenuStyle={Object {}}
                                                      inputValue=""
                                                      menuItemSelectedIcon={
                                                        <Icon
                                                          className="ant-select-selected-icon"
                                                          type="check"
                                                        />
                                                      }
                                                      menuItems={Array []}
                                                      multiple={false}
                                                      onMenuDeselect={[Function]}
                                                      onMenuSelect={[Function]}
                                                      onPopupFocus={[Function]}
                                                      prefixCls="ant-select-dropdown"
                                                      value={
                                                        Array [
                                                          "",
                                                        ]
                                                      }
                                                      visible={false}
                                                    />
                                                  }
                                                  popupAlign={Object {}}
                                                  popupClassName="ant-select-dropdown--single"
                                                  popupPlacement="bottomLeft"
                                                  popupStyle={Object {}}
                                                  popupTransitionName="slide-up"
                                                  popupVisible={false}
                                                  prefixCls="ant-select-dropdown"
                                                  showAction={
                                                    Array [
                                                      "click",
                                                    ]
                                                  }
                                                  showSearch={true}
                                                  transitionName="slide-up"
                                                  value={
                                                    Array [
                                                      "",
                                                    ]
                                                  }
                                                  visible={false}
                                                >
                                                  <div
                                                    className="ant-select ant-select-enabled"
                                                    id="node"
                                                    key="trigger"
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    onMouseDown={[Function]}
                                                    onMouseOut={[Function]}
                                                    onMouseUp={[Function]}
                                                    onTouchStart={[Function]}
                                                  >
                                                    <div
                                                      aria-autocomplete="list"
                                                      aria-controls="test-uuid"
                                                      aria-expanded={false}
                                                      aria-haspopup="true"
                                                      className="ant-select-selection
            ant-select-selection--single"
                                                      key="selection"
                                                      onKeyDown={[Function]}
                                                      role="combobox"
                                                      tabIndex={0}
                                                    >
                                                      <div
                                                        className="ant-select-selection__rendered"
                                                      >
                                                        <div
                                                          className="ant-select-selection-selected-value"
                                                          key="value"
                                                          style={
                                                            Object {
                                                              "display": "block",
                                                              "opacity": 1,
                                                            }
                                                          }
                                                          title=""
                                                        />
                                                        <div
                                                          className="ant-select-search ant-select-search--inline"
                                                          key="input"
                                                          style={
                                                            Object {
                                                              "display": "none",
                                                            }
                                                          }
                                                        >
                                                          <div
                                                            className="ant-select-search__field__wrap"
                                                          >
                                                            <input
                                                              autoComplete="off"
                                                              className="ant-select-search__field"
                                                              id="node"
                                                              onChange={[Function]}
                                                              onKeyDown={[Function]}
                                                              value=""
                                                            />
                                                            <span
                                                              className="ant-select-search__field__mirror"
                                                            >
                                                              Â 
                                                            </span>
                                                          </div>
                                                        </div>
                                                      </div>
                                                      <span
                                                        className="ant-select-arrow"
                                                        key="arrow"
                                                        onClick={[Function]}
                                                        style={
                                                          Object {
                                                            "WebkitUserSelect": "none",
                                                            "userSelect": "none",
                                                          }
                                                        }
                                                        unselectable="on"
                                                      >
                                                        <Icon
                                                          className="ant-select-arrow-icon"
                                                          type="down"
                                                        >
                                                          <LocaleReceiver
                                                            componentName="Icon"
                                                          >
                                                            <i
                                                              aria-label="icon: down"
                                                              className="anticon anticon-down ant-select-arrow-icon"
                                                            >
                                                              <IconReact
                                                                className=""
                                                                type="down-o"
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="down"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-down"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                                                                    key="svg-down-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </i>
                                                          </LocaleReceiver>
                                                        </Icon>
                                                      </span>
                                                    </div>
                                                  </div>
                                                </Trigger>
                                              </SelectTrigger>
                                            </Select>
                                          </Select>
                                        </FieldInner>
                                      </FormikConnect(FieldInner)>
                                    </Component>
                                  </span>
                                  <Animate
                                    animation={Object {}}
                                    component=""
                                    componentProps={Object {}}
                                    key="help"
                                    onAppear={[Function]}
                                    onEnd={[Function]}
                                    onEnter={[Function]}
                                    onLeave={[Function]}
                                    transitionAppear={true}
                                    transitionEnter={true}
                                    transitionLeave={true}
                                    transitionName="show-help"
                                  />
                                </div>
                              </div>
                            </Col>
                          </div>
                        </Row>
                      </FormItem>
                    </FieldInner>
                  </FormikConnect(FieldInner)>
                </Component>
              </form>
            </Form>
          </FieldInner>
        </FormikConnect(FieldInner)>
      </Form>
    </Formik>
  </NodeSelectionStep>
</div>
`;

exports[`Storyshots NewReportWizard Problem Description 1`] = `
<div
  style={
    Object {
      "display": "flex",
      "flexDirection": "column",
      "minHeight": "80vh",
      "width": "100%",
    }
  }
>
  <ProblemDescriptionStep
    isLast={true}
    onLeaveBackward={[Function]}
    onLeaveForward={[Function]}
  >
    <WizardStep>
      <div
        className="wizard-step"
      >
        <div
          className="step-header"
        >
          Nuevo Reporte
          <Button
            block={false}
            className="close-button"
            ghost={false}
            htmlType="button"
            icon="close"
            loading={false}
            onClick={[Function]}
          >
            <Wave>
              <button
                className="ant-btn close-button ant-btn-icon-only"
                onClick={[Function]}
                type="button"
              >
                <Icon
                  type="close"
                >
                  <LocaleReceiver
                    componentName="Icon"
                  >
                    <i
                      aria-label="icon: close"
                      className="anticon anticon-close"
                    >
                      <IconReact
                        className=""
                        type="close-o"
                      >
                        <svg
                          aria-hidden="true"
                          className=""
                          data-icon="close"
                          fill="currentColor"
                          focusable="false"
                          height="1em"
                          key="svg-close"
                          viewBox="64 64 896 896"
                          width="1em"
                        >
                          <path
                            d="M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 0 0 203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"
                            key="svg-close-svg-0"
                          />
                        </svg>
                      </IconReact>
                    </i>
                  </LocaleReceiver>
                </Icon>
              </button>
            </Wave>
          </Button>
        </div>
        <div
          className="step-content"
        >
          <ProblemDescriptionForm
            handleSubmit={[Function]}
          >
            <Formik
              enableReinitialize={true}
              initialValues={
                Object {
                  "body": null,
                  "title": null,
                }
              }
              isInitialValid={false}
              onSubmit={[Function]}
              validateOnBlur={true}
              validateOnChange={true}
            >
              <Form
                name="asd"
              >
                <FormikConnect(FieldInner)>
                  <FieldInner
                    formik={
                      Object {
                        "dirty": false,
                        "errors": Object {},
                        "handleBlur": [Function],
                        "handleChange": [Function],
                        "handleReset": [Function],
                        "handleSubmit": [Function],
                        "initialValues": Object {
                          "body": null,
                          "title": null,
                        },
                        "isSubmitting": false,
                        "isValid": false,
                        "isValidating": false,
                        "registerField": [Function],
                        "resetForm": [Function],
                        "setError": [Function],
                        "setErrors": [Function],
                        "setFieldError": [Function],
                        "setFieldTouched": [Function],
                        "setFieldValue": [Function],
                        "setFormikState": [Function],
                        "setStatus": [Function],
                        "setSubmitting": [Function],
                        "setTouched": [Function],
                        "setValues": [Function],
                        "status": undefined,
                        "submitCount": 0,
                        "submitForm": [Function],
                        "touched": Object {},
                        "unregisterField": [Function],
                        "validate": undefined,
                        "validateField": [Function],
                        "validateForm": [Function],
                        "validateOnBlur": true,
                        "validateOnChange": true,
                        "validationSchema": undefined,
                        "values": Object {
                          "body": null,
                          "title": null,
                        },
                      }
                    }
                  >
                    <Form
                      colon={true}
                      hideRequiredMark={false}
                      layout="horizontal"
                      name="asd"
                      onReset={[Function]}
                      onSubmit={[Function]}
                    >
                      <form
                        className="ant-form ant-form-horizontal"
                        name="asd"
                        onReset={[Function]}
                        onSubmit={[Function]}
                      >
                        <p>
                           Si quieres, puedes contar mÃ¡s detalles del problema 
                        </p>
                        <Component
                          htmlFor="body"
                          label="DescripciÃ³n detallada"
                          name="body"
                        >
                          <FormikConnect(FieldInner)
                            name="body"
                          >
                            <FieldInner
                              formik={
                                Object {
                                  "dirty": false,
                                  "errors": Object {},
                                  "handleBlur": [Function],
                                  "handleChange": [Function],
                                  "handleReset": [Function],
                                  "handleSubmit": [Function],
                                  "initialValues": Object {
                                    "body": null,
                                    "title": null,
                                  },
                                  "isSubmitting": false,
                                  "isValid": false,
                                  "isValidating": false,
                                  "registerField": [Function],
                                  "resetForm": [Function],
                                  "setError": [Function],
                                  "setErrors": [Function],
                                  "setFieldError": [Function],
                                  "setFieldTouched": [Function],
                                  "setFieldValue": [Function],
                                  "setFormikState": [Function],
                                  "setStatus": [Function],
                                  "setSubmitting": [Function],
                                  "setTouched": [Function],
                                  "setValues": [Function],
                                  "status": undefined,
                                  "submitCount": 0,
                                  "submitForm": [Function],
                                  "touched": Object {},
                                  "unregisterField": [Function],
                                  "validate": undefined,
                                  "validateField": [Function],
                                  "validateForm": [Function],
                                  "validateOnBlur": true,
                                  "validateOnChange": true,
                                  "validationSchema": undefined,
                                  "values": Object {
                                    "body": null,
                                    "title": null,
                                  },
                                }
                              }
                              name="body"
                            >
                              <FormItem
                                hasFeedback={false}
                                help={false}
                                htmlFor="body"
                                label="DescripciÃ³n detallada"
                              >
                                <Row
                                  className="ant-form-item"
                                  gutter={0}
                                  key="row"
                                >
                                  <div
                                    className="ant-row ant-form-item"
                                    style={Object {}}
                                  >
                                    <Col
                                      className="ant-form-item-label"
                                    >
                                      <div
                                        className="ant-col ant-form-item-label"
                                        style={Object {}}
                                      >
                                        <label
                                          className=""
                                          htmlFor="body"
                                          onClick={[Function]}
                                          title="DescripciÃ³n detallada"
                                        >
                                          DescripciÃ³n detallada
                                        </label>
                                      </div>
                                    </Col>
                                    <Col
                                      className="ant-form-item-control-wrapper"
                                    >
                                      <div
                                        className="ant-col ant-form-item-control-wrapper"
                                        style={Object {}}
                                      >
                                        <div
                                          className="ant-form-item-control"
                                        >
                                          <span
                                            className="ant-form-item-children"
                                          >
                                            <Component
                                              id="body"
                                              name="body"
                                              rows={4}
                                            >
                                              <FormikConnect(FieldInner)
                                                name="body"
                                              >
                                                <FieldInner
                                                  formik={
                                                    Object {
                                                      "dirty": false,
                                                      "errors": Object {},
                                                      "handleBlur": [Function],
                                                      "handleChange": [Function],
                                                      "handleReset": [Function],
                                                      "handleSubmit": [Function],
                                                      "initialValues": Object {
                                                        "body": null,
                                                        "title": null,
                                                      },
                                                      "isSubmitting": false,
                                                      "isValid": false,
                                                      "isValidating": false,
                                                      "registerField": [Function],
                                                      "resetForm": [Function],
                                                      "setError": [Function],
                                                      "setErrors": [Function],
                                                      "setFieldError": [Function],
                                                      "setFieldTouched": [Function],
                                                      "setFieldValue": [Function],
                                                      "setFormikState": [Function],
                                                      "setStatus": [Function],
                                                      "setSubmitting": [Function],
                                                      "setTouched": [Function],
                                                      "setValues": [Function],
                                                      "status": undefined,
                                                      "submitCount": 0,
                                                      "submitForm": [Function],
                                                      "touched": Object {},
                                                      "unregisterField": [Function],
                                                      "validate": undefined,
                                                      "validateField": [Function],
                                                      "validateForm": [Function],
                                                      "validateOnBlur": true,
                                                      "validateOnChange": true,
                                                      "validationSchema": undefined,
                                                      "values": Object {
                                                        "body": null,
                                                        "title": null,
                                                      },
                                                    }
                                                  }
                                                  name="body"
                                                >
                                                  <TextArea
                                                    id="body"
                                                    name="body"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    rows={4}
                                                    value={null}
                                                  >
                                                    <ClearableLabeledInput
                                                      element={
                                                        <ResizableTextArea
                                                          id="body"
                                                          name="body"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onKeyDown={[Function]}
                                                          prefixCls="ant-input"
                                                          rows={4}
                                                          value={null}
                                                        />
                                                      }
                                                      handleReset={[Function]}
                                                      id="body"
                                                      inputType="text"
                                                      name="body"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      prefixCls="ant-input"
                                                      rows={4}
                                                      value=""
                                                    >
                                                      <ResizableTextArea
                                                        id="body"
                                                        name="body"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onKeyDown={[Function]}
                                                        prefixCls="ant-input"
                                                        rows={4}
                                                        value=""
                                                      >
                                                        <ResizeObserver
                                                          disabled={true}
                                                          onResize={[Function]}
                                                        >
                                                          <textarea
                                                            className="ant-input"
                                                            id="body"
                                                            name="body"
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onKeyDown={[Function]}
                                                            rows={4}
                                                            style={Object {}}
                                                            value=""
                                                          />
                                                        </ResizeObserver>
                                                      </ResizableTextArea>
                                                    </ClearableLabeledInput>
                                                  </TextArea>
                                                </FieldInner>
                                              </FormikConnect(FieldInner)>
                                            </Component>
                                          </span>
                                          <Animate
                                            animation={Object {}}
                                            component=""
                                            componentProps={Object {}}
                                            key="help"
                                            onAppear={[Function]}
                                            onEnd={[Function]}
                                            onEnter={[Function]}
                                            onLeave={[Function]}
                                            transitionAppear={true}
                                            transitionEnter={true}
                                            transitionLeave={true}
                                            transitionName="show-help"
                                          />
                                        </div>
                                      </div>
                                    </Col>
                                  </div>
                                </Row>
                              </FormItem>
                            </FieldInner>
                          </FormikConnect(FieldInner)>
                        </Component>
                      </form>
                    </Form>
                  </FieldInner>
                </FormikConnect(FieldInner)>
              </Form>
            </Formik>
          </ProblemDescriptionForm>
          <Navigation
            isLast={true}
            onNext={[Function]}
            onPrev={[Function]}
          >
            <div
              className="wizard-navigation"
            >
              <Button
                block={false}
                ghost={false}
                htmlType="button"
                loading={false}
                onClick={[Function]}
                style={
                  Object {
                    "display": "block",
                  }
                }
              >
                <Wave>
                  <button
                    className="ant-btn"
                    onClick={[Function]}
                    style={
                      Object {
                        "display": "block",
                      }
                    }
                    type="button"
                  >
                    <Icon
                      key=".0"
                      type="left"
                    >
                      <LocaleReceiver
                        componentName="Icon"
                      >
                        <i
                          aria-label="icon: left"
                          className="anticon anticon-left"
                        >
                          <IconReact
                            className=""
                            type="left-o"
                          >
                            <svg
                              aria-hidden="true"
                              className=""
                              data-icon="left"
                              fill="currentColor"
                              focusable="false"
                              height="1em"
                              key="svg-left"
                              viewBox="64 64 896 896"
                              width="1em"
                            >
                              <path
                                d="M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 0 0 0 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z"
                                key="svg-left-svg-0"
                              />
                            </svg>
                          </IconReact>
                        </i>
                      </LocaleReceiver>
                    </Icon>
                    <span
                      key=".1"
                    >
                      Volver
                    </span>
                  </button>
                </Wave>
              </Button>
              <Button
                block={false}
                className="right-button"
                ghost={false}
                htmlType="button"
                loading={false}
                onClick={[Function]}
                style={
                  Object {
                    "display": "none",
                  }
                }
              >
                <Wave>
                  <button
                    className="ant-btn right-button"
                    onClick={[Function]}
                    style={
                      Object {
                        "display": "none",
                      }
                    }
                    type="button"
                  >
                    <span
                      key=".0"
                    >
                      Continuar 
                    </span>
                    <Icon
                      key=".1"
                      type="right"
                    >
                      <LocaleReceiver
                        componentName="Icon"
                      >
                        <i
                          aria-label="icon: right"
                          className="anticon anticon-right"
                        >
                          <IconReact
                            className=""
                            type="right-o"
                          >
                            <svg
                              aria-hidden="true"
                              className=""
                              data-icon="right"
                              fill="currentColor"
                              focusable="false"
                              height="1em"
                              key="svg-right"
                              viewBox="64 64 896 896"
                              width="1em"
                            >
                              <path
                                d="M765.7 486.8L314.9 134.7A7.97 7.97 0 0 0 302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 0 0 0-50.4z"
                                key="svg-right-svg-0"
                              />
                            </svg>
                          </IconReact>
                        </i>
                      </LocaleReceiver>
                    </Icon>
                  </button>
                </Wave>
              </Button>
              <Button
                block={false}
                className="right-button"
                ghost={false}
                htmlType="button"
                loading={false}
                onClick={[Function]}
                style={
                  Object {
                    "display": "block",
                  }
                }
              >
                <Wave>
                  <button
                    className="ant-btn right-button"
                    onClick={[Function]}
                    style={
                      Object {
                        "display": "block",
                      }
                    }
                    type="button"
                  >
                    <span
                      key=".0"
                    >
                      Finalizar
                    </span>
                  </button>
                </Wave>
              </Button>
            </div>
          </Navigation>
        </div>
      </div>
    </WizardStep>
  </ProblemDescriptionStep>
</div>
`;

exports[`Storyshots NewReportWizard Problem Description Custom Issue 1`] = `
<div
  style={
    Object {
      "display": "flex",
      "flexDirection": "column",
      "minHeight": "80vh",
      "width": "100%",
    }
  }
>
  <ProblemDescriptionStep
    isCustomIssue={true}
    isLast={true}
    onLeaveBackward={[Function]}
    onLeaveForward={[Function]}
  >
    <WizardStep>
      <div
        className="wizard-step"
      >
        <div
          className="step-header"
        >
          Nuevo Reporte
          <Button
            block={false}
            className="close-button"
            ghost={false}
            htmlType="button"
            icon="close"
            loading={false}
            onClick={[Function]}
          >
            <Wave>
              <button
                className="ant-btn close-button ant-btn-icon-only"
                onClick={[Function]}
                type="button"
              >
                <Icon
                  type="close"
                >
                  <LocaleReceiver
                    componentName="Icon"
                  >
                    <i
                      aria-label="icon: close"
                      className="anticon anticon-close"
                    >
                      <IconReact
                        className=""
                        type="close-o"
                      >
                        <svg
                          aria-hidden="true"
                          className=""
                          data-icon="close"
                          fill="currentColor"
                          focusable="false"
                          height="1em"
                          key="svg-close"
                          viewBox="64 64 896 896"
                          width="1em"
                        >
                          <path
                            d="M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 0 0 203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"
                            key="svg-close-svg-0"
                          />
                        </svg>
                      </IconReact>
                    </i>
                  </LocaleReceiver>
                </Icon>
              </button>
            </Wave>
          </Button>
        </div>
        <div
          className="step-content"
        >
          <ProblemDescriptionForm
            handleSubmit={[Function]}
            isCustomIssue={true}
          >
            <Formik
              enableReinitialize={true}
              initialValues={
                Object {
                  "body": null,
                  "title": null,
                }
              }
              isInitialValid={false}
              onSubmit={[Function]}
              validateOnBlur={true}
              validateOnChange={true}
            >
              <Form
                name="asd"
              >
                <FormikConnect(FieldInner)>
                  <FieldInner
                    formik={
                      Object {
                        "dirty": false,
                        "errors": Object {},
                        "handleBlur": [Function],
                        "handleChange": [Function],
                        "handleReset": [Function],
                        "handleSubmit": [Function],
                        "initialValues": Object {
                          "body": null,
                          "title": null,
                        },
                        "isSubmitting": false,
                        "isValid": false,
                        "isValidating": false,
                        "registerField": [Function],
                        "resetForm": [Function],
                        "setError": [Function],
                        "setErrors": [Function],
                        "setFieldError": [Function],
                        "setFieldTouched": [Function],
                        "setFieldValue": [Function],
                        "setFormikState": [Function],
                        "setStatus": [Function],
                        "setSubmitting": [Function],
                        "setTouched": [Function],
                        "setValues": [Function],
                        "status": undefined,
                        "submitCount": 0,
                        "submitForm": [Function],
                        "touched": Object {},
                        "unregisterField": [Function],
                        "validate": undefined,
                        "validateField": [Function],
                        "validateForm": [Function],
                        "validateOnBlur": true,
                        "validateOnChange": true,
                        "validationSchema": undefined,
                        "values": Object {
                          "body": null,
                          "title": null,
                        },
                      }
                    }
                  >
                    <Form
                      colon={true}
                      hideRequiredMark={false}
                      layout="horizontal"
                      name="asd"
                      onReset={[Function]}
                      onSubmit={[Function]}
                    >
                      <form
                        className="ant-form ant-form-horizontal"
                        name="asd"
                        onReset={[Function]}
                        onSubmit={[Function]}
                      >
                        <p>
                           Tu problema no estaba entre las opciones, elige un tÃ­tulo descriptivo para identificarlo
                        </p>
                        <Component
                          htmlFor="title"
                          label="TÃ­tulo"
                          name="title"
                        >
                          <FormikConnect(FieldInner)
                            name="title"
                          >
                            <FieldInner
                              formik={
                                Object {
                                  "dirty": false,
                                  "errors": Object {},
                                  "handleBlur": [Function],
                                  "handleChange": [Function],
                                  "handleReset": [Function],
                                  "handleSubmit": [Function],
                                  "initialValues": Object {
                                    "body": null,
                                    "title": null,
                                  },
                                  "isSubmitting": false,
                                  "isValid": false,
                                  "isValidating": false,
                                  "registerField": [Function],
                                  "resetForm": [Function],
                                  "setError": [Function],
                                  "setErrors": [Function],
                                  "setFieldError": [Function],
                                  "setFieldTouched": [Function],
                                  "setFieldValue": [Function],
                                  "setFormikState": [Function],
                                  "setStatus": [Function],
                                  "setSubmitting": [Function],
                                  "setTouched": [Function],
                                  "setValues": [Function],
                                  "status": undefined,
                                  "submitCount": 0,
                                  "submitForm": [Function],
                                  "touched": Object {},
                                  "unregisterField": [Function],
                                  "validate": undefined,
                                  "validateField": [Function],
                                  "validateForm": [Function],
                                  "validateOnBlur": true,
                                  "validateOnChange": true,
                                  "validationSchema": undefined,
                                  "values": Object {
                                    "body": null,
                                    "title": null,
                                  },
                                }
                              }
                              name="title"
                            >
                              <FormItem
                                hasFeedback={false}
                                help={false}
                                htmlFor="title"
                                label="TÃ­tulo"
                              >
                                <Row
                                  className="ant-form-item"
                                  gutter={0}
                                  key="row"
                                >
                                  <div
                                    className="ant-row ant-form-item"
                                    style={Object {}}
                                  >
                                    <Col
                                      className="ant-form-item-label"
                                    >
                                      <div
                                        className="ant-col ant-form-item-label"
                                        style={Object {}}
                                      >
                                        <label
                                          className=""
                                          htmlFor="title"
                                          onClick={[Function]}
                                          title="TÃ­tulo"
                                        >
                                          TÃ­tulo
                                        </label>
                                      </div>
                                    </Col>
                                    <Col
                                      className="ant-form-item-control-wrapper"
                                    >
                                      <div
                                        className="ant-col ant-form-item-control-wrapper"
                                        style={Object {}}
                                      >
                                        <div
                                          className="ant-form-item-control"
                                        >
                                          <span
                                            className="ant-form-item-children"
                                          >
                                            <Component
                                              id="title"
                                              maxLength={40}
                                              name="title"
                                              validate={[Function]}
                                            >
                                              <FormikConnect(FieldInner)
                                                name="title"
                                                validate={[Function]}
                                              >
                                                <FieldInner
                                                  formik={
                                                    Object {
                                                      "dirty": false,
                                                      "errors": Object {},
                                                      "handleBlur": [Function],
                                                      "handleChange": [Function],
                                                      "handleReset": [Function],
                                                      "handleSubmit": [Function],
                                                      "initialValues": Object {
                                                        "body": null,
                                                        "title": null,
                                                      },
                                                      "isSubmitting": false,
                                                      "isValid": false,
                                                      "isValidating": false,
                                                      "registerField": [Function],
                                                      "resetForm": [Function],
                                                      "setError": [Function],
                                                      "setErrors": [Function],
                                                      "setFieldError": [Function],
                                                      "setFieldTouched": [Function],
                                                      "setFieldValue": [Function],
                                                      "setFormikState": [Function],
                                                      "setStatus": [Function],
                                                      "setSubmitting": [Function],
                                                      "setTouched": [Function],
                                                      "setValues": [Function],
                                                      "status": undefined,
                                                      "submitCount": 0,
                                                      "submitForm": [Function],
                                                      "touched": Object {},
                                                      "unregisterField": [Function],
                                                      "validate": undefined,
                                                      "validateField": [Function],
                                                      "validateForm": [Function],
                                                      "validateOnBlur": true,
                                                      "validateOnChange": true,
                                                      "validationSchema": undefined,
                                                      "values": Object {
                                                        "body": null,
                                                        "title": null,
                                                      },
                                                    }
                                                  }
                                                  name="title"
                                                  validate={[Function]}
                                                >
                                                  <Input
                                                    id="title"
                                                    maxLength={40}
                                                    name="title"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    type="text"
                                                    value={null}
                                                  >
                                                    <ClearableLabeledInput
                                                      element={
                                                        <input
                                                          className="ant-input"
                                                          id="title"
                                                          maxLength={40}
                                                          name="title"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onKeyDown={[Function]}
                                                          type="text"
                                                          value={null}
                                                        />
                                                      }
                                                      handleReset={[Function]}
                                                      id="title"
                                                      inputType="input"
                                                      maxLength={40}
                                                      name="title"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      prefixCls="ant-input"
                                                      type="text"
                                                      value=""
                                                    >
                                                      <input
                                                        className="ant-input"
                                                        id="title"
                                                        maxLength={40}
                                                        name="title"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onKeyDown={[Function]}
                                                        type="text"
                                                        value=""
                                                      />
                                                    </ClearableLabeledInput>
                                                  </Input>
                                                </FieldInner>
                                              </FormikConnect(FieldInner)>
                                            </Component>
                                          </span>
                                          <Animate
                                            animation={Object {}}
                                            component=""
                                            componentProps={Object {}}
                                            key="help"
                                            onAppear={[Function]}
                                            onEnd={[Function]}
                                            onEnter={[Function]}
                                            onLeave={[Function]}
                                            transitionAppear={true}
                                            transitionEnter={true}
                                            transitionLeave={true}
                                            transitionName="show-help"
                                          />
                                        </div>
                                      </div>
                                    </Col>
                                  </div>
                                </Row>
                              </FormItem>
                            </FieldInner>
                          </FormikConnect(FieldInner)>
                        </Component>
                        <p>
                           Si quieres, puedes contar mÃ¡s detalles del problema 
                        </p>
                        <Component
                          htmlFor="body"
                          label="DescripciÃ³n detallada"
                          name="body"
                        >
                          <FormikConnect(FieldInner)
                            name="body"
                          >
                            <FieldInner
                              formik={
                                Object {
                                  "dirty": false,
                                  "errors": Object {},
                                  "handleBlur": [Function],
                                  "handleChange": [Function],
                                  "handleReset": [Function],
                                  "handleSubmit": [Function],
                                  "initialValues": Object {
                                    "body": null,
                                    "title": null,
                                  },
                                  "isSubmitting": false,
                                  "isValid": false,
                                  "isValidating": false,
                                  "registerField": [Function],
                                  "resetForm": [Function],
                                  "setError": [Function],
                                  "setErrors": [Function],
                                  "setFieldError": [Function],
                                  "setFieldTouched": [Function],
                                  "setFieldValue": [Function],
                                  "setFormikState": [Function],
                                  "setStatus": [Function],
                                  "setSubmitting": [Function],
                                  "setTouched": [Function],
                                  "setValues": [Function],
                                  "status": undefined,
                                  "submitCount": 0,
                                  "submitForm": [Function],
                                  "touched": Object {},
                                  "unregisterField": [Function],
                                  "validate": undefined,
                                  "validateField": [Function],
                                  "validateForm": [Function],
                                  "validateOnBlur": true,
                                  "validateOnChange": true,
                                  "validationSchema": undefined,
                                  "values": Object {
                                    "body": null,
                                    "title": null,
                                  },
                                }
                              }
                              name="body"
                            >
                              <FormItem
                                hasFeedback={false}
                                help={false}
                                htmlFor="body"
                                label="DescripciÃ³n detallada"
                              >
                                <Row
                                  className="ant-form-item"
                                  gutter={0}
                                  key="row"
                                >
                                  <div
                                    className="ant-row ant-form-item"
                                    style={Object {}}
                                  >
                                    <Col
                                      className="ant-form-item-label"
                                    >
                                      <div
                                        className="ant-col ant-form-item-label"
                                        style={Object {}}
                                      >
                                        <label
                                          className=""
                                          htmlFor="body"
                                          onClick={[Function]}
                                          title="DescripciÃ³n detallada"
                                        >
                                          DescripciÃ³n detallada
                                        </label>
                                      </div>
                                    </Col>
                                    <Col
                                      className="ant-form-item-control-wrapper"
                                    >
                                      <div
                                        className="ant-col ant-form-item-control-wrapper"
                                        style={Object {}}
                                      >
                                        <div
                                          className="ant-form-item-control"
                                        >
                                          <span
                                            className="ant-form-item-children"
                                          >
                                            <Component
                                              id="body"
                                              name="body"
                                              rows={4}
                                            >
                                              <FormikConnect(FieldInner)
                                                name="body"
                                              >
                                                <FieldInner
                                                  formik={
                                                    Object {
                                                      "dirty": false,
                                                      "errors": Object {},
                                                      "handleBlur": [Function],
                                                      "handleChange": [Function],
                                                      "handleReset": [Function],
                                                      "handleSubmit": [Function],
                                                      "initialValues": Object {
                                                        "body": null,
                                                        "title": null,
                                                      },
                                                      "isSubmitting": false,
                                                      "isValid": false,
                                                      "isValidating": false,
                                                      "registerField": [Function],
                                                      "resetForm": [Function],
                                                      "setError": [Function],
                                                      "setErrors": [Function],
                                                      "setFieldError": [Function],
                                                      "setFieldTouched": [Function],
                                                      "setFieldValue": [Function],
                                                      "setFormikState": [Function],
                                                      "setStatus": [Function],
                                                      "setSubmitting": [Function],
                                                      "setTouched": [Function],
                                                      "setValues": [Function],
                                                      "status": undefined,
                                                      "submitCount": 0,
                                                      "submitForm": [Function],
                                                      "touched": Object {},
                                                      "unregisterField": [Function],
                                                      "validate": undefined,
                                                      "validateField": [Function],
                                                      "validateForm": [Function],
                                                      "validateOnBlur": true,
                                                      "validateOnChange": true,
                                                      "validationSchema": undefined,
                                                      "values": Object {
                                                        "body": null,
                                                        "title": null,
                                                      },
                                                    }
                                                  }
                                                  name="body"
                                                >
                                                  <TextArea
                                                    id="body"
                                                    name="body"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    rows={4}
                                                    value={null}
                                                  >
                                                    <ClearableLabeledInput
                                                      element={
                                                        <ResizableTextArea
                                                          id="body"
                                                          name="body"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onKeyDown={[Function]}
                                                          prefixCls="ant-input"
                                                          rows={4}
                                                          value={null}
                                                        />
                                                      }
                                                      handleReset={[Function]}
                                                      id="body"
                                                      inputType="text"
                                                      name="body"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      prefixCls="ant-input"
                                                      rows={4}
                                                      value=""
                                                    >
                                                      <ResizableTextArea
                                                        id="body"
                                                        name="body"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onKeyDown={[Function]}
                                                        prefixCls="ant-input"
                                                        rows={4}
                                                        value=""
                                                      >
                                                        <ResizeObserver
                                                          disabled={true}
                                                          onResize={[Function]}
                                                        >
                                                          <textarea
                                                            className="ant-input"
                                                            id="body"
                                                            name="body"
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onKeyDown={[Function]}
                                                            rows={4}
                                                            style={Object {}}
                                                            value=""
                                                          />
                                                        </ResizeObserver>
                                                      </ResizableTextArea>
                                                    </ClearableLabeledInput>
                                                  </TextArea>
                                                </FieldInner>
                                              </FormikConnect(FieldInner)>
                                            </Component>
                                          </span>
                                          <Animate
                                            animation={Object {}}
                                            component=""
                                            componentProps={Object {}}
                                            key="help"
                                            onAppear={[Function]}
                                            onEnd={[Function]}
                                            onEnter={[Function]}
                                            onLeave={[Function]}
                                            transitionAppear={true}
                                            transitionEnter={true}
                                            transitionLeave={true}
                                            transitionName="show-help"
                                          />
                                        </div>
                                      </div>
                                    </Col>
                                  </div>
                                </Row>
                              </FormItem>
                            </FieldInner>
                          </FormikConnect(FieldInner)>
                        </Component>
                      </form>
                    </Form>
                  </FieldInner>
                </FormikConnect(FieldInner)>
              </Form>
            </Formik>
          </ProblemDescriptionForm>
          <Navigation
            isLast={true}
            onNext={[Function]}
            onPrev={[Function]}
          >
            <div
              className="wizard-navigation"
            >
              <Button
                block={false}
                ghost={false}
                htmlType="button"
                loading={false}
                onClick={[Function]}
                style={
                  Object {
                    "display": "block",
                  }
                }
              >
                <Wave>
                  <button
                    className="ant-btn"
                    onClick={[Function]}
                    style={
                      Object {
                        "display": "block",
                      }
                    }
                    type="button"
                  >
                    <Icon
                      key=".0"
                      type="left"
                    >
                      <LocaleReceiver
                        componentName="Icon"
                      >
                        <i
                          aria-label="icon: left"
                          className="anticon anticon-left"
                        >
                          <IconReact
                            className=""
                            type="left-o"
                          >
                            <svg
                              aria-hidden="true"
                              className=""
                              data-icon="left"
                              fill="currentColor"
                              focusable="false"
                              height="1em"
                              key="svg-left"
                              viewBox="64 64 896 896"
                              width="1em"
                            >
                              <path
                                d="M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 0 0 0 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z"
                                key="svg-left-svg-0"
                              />
                            </svg>
                          </IconReact>
                        </i>
                      </LocaleReceiver>
                    </Icon>
                    <span
                      key=".1"
                    >
                      Volver
                    </span>
                  </button>
                </Wave>
              </Button>
              <Button
                block={false}
                className="right-button"
                ghost={false}
                htmlType="button"
                loading={false}
                onClick={[Function]}
                style={
                  Object {
                    "display": "none",
                  }
                }
              >
                <Wave>
                  <button
                    className="ant-btn right-button"
                    onClick={[Function]}
                    style={
                      Object {
                        "display": "none",
                      }
                    }
                    type="button"
                  >
                    <span
                      key=".0"
                    >
                      Continuar 
                    </span>
                    <Icon
                      key=".1"
                      type="right"
                    >
                      <LocaleReceiver
                        componentName="Icon"
                      >
                        <i
                          aria-label="icon: right"
                          className="anticon anticon-right"
                        >
                          <IconReact
                            className=""
                            type="right-o"
                          >
                            <svg
                              aria-hidden="true"
                              className=""
                              data-icon="right"
                              fill="currentColor"
                              focusable="false"
                              height="1em"
                              key="svg-right"
                              viewBox="64 64 896 896"
                              width="1em"
                            >
                              <path
                                d="M765.7 486.8L314.9 134.7A7.97 7.97 0 0 0 302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 0 0 0-50.4z"
                                key="svg-right-svg-0"
                              />
                            </svg>
                          </IconReact>
                        </i>
                      </LocaleReceiver>
                    </Icon>
                  </button>
                </Wave>
              </Button>
              <Button
                block={false}
                className="right-button"
                ghost={false}
                htmlType="button"
                loading={false}
                onClick={[Function]}
                style={
                  Object {
                    "display": "block",
                  }
                }
              >
                <Wave>
                  <button
                    className="ant-btn right-button"
                    onClick={[Function]}
                    style={
                      Object {
                        "display": "block",
                      }
                    }
                    type="button"
                  >
                    <span
                      key=".0"
                    >
                      Finalizar
                    </span>
                  </button>
                </Wave>
              </Button>
            </div>
          </Navigation>
        </div>
      </div>
    </WizardStep>
  </ProblemDescriptionStep>
</div>
`;

exports[`Storyshots NewReportWizard Problem Selection 1`] = `
<div
  style={
    Object {
      "display": "flex",
      "flexDirection": "column",
      "minHeight": "80vh",
      "width": "100%",
    }
  }
>
  <ProblemSelectionStep
    onLeaveBackward={[Function]}
    onLeaveForward={[Function]}
  >
    <WizardStep>
      <div
        className="wizard-step"
      >
        <div
          className="step-header"
        >
          Nuevo Reporte
          <Button
            block={false}
            className="close-button"
            ghost={false}
            htmlType="button"
            icon="close"
            loading={false}
            onClick={[Function]}
          >
            <Wave>
              <button
                className="ant-btn close-button ant-btn-icon-only"
                onClick={[Function]}
                type="button"
              >
                <Icon
                  type="close"
                >
                  <LocaleReceiver
                    componentName="Icon"
                  >
                    <i
                      aria-label="icon: close"
                      className="anticon anticon-close"
                    >
                      <IconReact
                        className=""
                        type="close-o"
                      >
                        <svg
                          aria-hidden="true"
                          className=""
                          data-icon="close"
                          fill="currentColor"
                          focusable="false"
                          height="1em"
                          key="svg-close"
                          viewBox="64 64 896 896"
                          width="1em"
                        >
                          <path
                            d="M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 0 0 203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"
                            key="svg-close-svg-0"
                          />
                        </svg>
                      </IconReact>
                    </i>
                  </LocaleReceiver>
                </Icon>
              </button>
            </Wave>
          </Button>
        </div>
        <div
          className="step-content"
        >
          <div
            className="step-title"
          >
            <p>
              CuÃ¡l es el problema?
            </p>
          </div>
          <Choices
            choices={
              Array [
                Object {
                  "id": "unavailable_network",
                  "parent": null,
                  "subChoices": Array [],
                  "text": "Red wifi no disponible",
                },
                Object {
                  "id": "unreachable_network",
                  "parent": null,
                  "subChoices": Array [],
                  "text": "Veo mi red wifi disponible pero no puedo conectarme",
                },
                Object {
                  "id": "unreachable_resources",
                  "parent": null,
                  "subChoices": Array [
                    Object {
                      "id": "all_resources",
                      "parent": "unreachable_resources",
                      "text": "No puedo visitar ninguna pÃ¡gina ni usar ninguna aplicaciÃ³n",
                    },
                    Object {
                      "id": "some_of_them",
                      "parent": "unreachable_resources",
                      "text": "Puedo visitar algunas pÃ¡ginas pero otras no",
                    },
                    Object {
                      "id": "only_by_ip",
                      "parent": "unreachable_resources",
                      "text": "Puedo utilizar algunas aplicaciones como whatsapp pero no puedo navegar",
                    },
                  ],
                  "text": "Puedo conectarme a mi red, pero tengo problemas para navegar",
                },
                Object {
                  "id": "slow_connection",
                  "parent": null,
                  "subChoices": Array [
                    Object {
                      "id": "from_precise_moment",
                      "parent": "slow_connection",
                      "text": "EmpezÃ³ a andar lento en un momento puntual",
                    },
                    Object {
                      "id": "periodically",
                      "parent": "slow_connection",
                      "text": "Siempre me anda lento en los mismos dÃ­as/horarios",
                    },
                    Object {
                      "id": "only_with_some_sites",
                      "parent": "slow_connection",
                      "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
                    },
                  ],
                  "text": "Puedo navegar pero anda lento",
                },
                Object {
                  "id": "cuts_out_connection",
                  "parent": null,
                  "subChoices": Array [],
                  "text": "Puedo navegar pero de a ratos se corta",
                },
                Object {
                  "id": "custom",
                  "text": "Ninguno de los anteriores",
                },
              ]
            }
            onChange={[Function]}
            selected={null}
          >
            <div
              className="choices"
            >
              <RadioGroup
                buttonStyle="outline"
                name="common_issue"
                onChange={[Function]}
                value={null}
              >
                <div
                  className="ant-radio-group ant-radio-group-outline"
                >
                  <Radio
                    key="unavailable_network"
                    style={
                      Object {
                        "display": "flex",
                        "paddingBottom": "0.5em",
                        "whiteSpace": "normal",
                      }
                    }
                    type="radio"
                    value={
                      Object {
                        "id": "unavailable_network",
                        "parent": null,
                        "subChoices": Array [],
                        "text": "Red wifi no disponible",
                      }
                    }
                  >
                    <label
                      className="ant-radio-wrapper"
                      style={
                        Object {
                          "display": "flex",
                          "paddingBottom": "0.5em",
                          "whiteSpace": "normal",
                        }
                      }
                    >
                      <Checkbox
                        checked={false}
                        className=""
                        defaultChecked={false}
                        name="common_issue"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        prefixCls="ant-radio"
                        style={Object {}}
                        type="radio"
                        value={
                          Object {
                            "id": "unavailable_network",
                            "parent": null,
                            "subChoices": Array [],
                            "text": "Red wifi no disponible",
                          }
                        }
                      >
                        <span
                          className="ant-radio"
                          style={Object {}}
                        >
                          <input
                            checked={false}
                            className="ant-radio-input"
                            name="common_issue"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            type="radio"
                            value={
                              Object {
                                "id": "unavailable_network",
                                "parent": null,
                                "subChoices": Array [],
                                "text": "Red wifi no disponible",
                              }
                            }
                          />
                          <span
                            className="ant-radio-inner"
                          />
                        </span>
                      </Checkbox>
                      <span>
                        Red wifi no disponible
                      </span>
                    </label>
                  </Radio>
                  <Radio
                    key="unreachable_network"
                    style={
                      Object {
                        "display": "flex",
                        "paddingBottom": "0.5em",
                        "whiteSpace": "normal",
                      }
                    }
                    type="radio"
                    value={
                      Object {
                        "id": "unreachable_network",
                        "parent": null,
                        "subChoices": Array [],
                        "text": "Veo mi red wifi disponible pero no puedo conectarme",
                      }
                    }
                  >
                    <label
                      className="ant-radio-wrapper"
                      style={
                        Object {
                          "display": "flex",
                          "paddingBottom": "0.5em",
                          "whiteSpace": "normal",
                        }
                      }
                    >
                      <Checkbox
                        checked={false}
                        className=""
                        defaultChecked={false}
                        name="common_issue"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        prefixCls="ant-radio"
                        style={Object {}}
                        type="radio"
                        value={
                          Object {
                            "id": "unreachable_network",
                            "parent": null,
                            "subChoices": Array [],
                            "text": "Veo mi red wifi disponible pero no puedo conectarme",
                          }
                        }
                      >
                        <span
                          className="ant-radio"
                          style={Object {}}
                        >
                          <input
                            checked={false}
                            className="ant-radio-input"
                            name="common_issue"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            type="radio"
                            value={
                              Object {
                                "id": "unreachable_network",
                                "parent": null,
                                "subChoices": Array [],
                                "text": "Veo mi red wifi disponible pero no puedo conectarme",
                              }
                            }
                          />
                          <span
                            className="ant-radio-inner"
                          />
                        </span>
                      </Checkbox>
                      <span>
                        Veo mi red wifi disponible pero no puedo conectarme
                      </span>
                    </label>
                  </Radio>
                  <Radio
                    key="unreachable_resources"
                    style={
                      Object {
                        "display": "flex",
                        "paddingBottom": "0.5em",
                        "whiteSpace": "normal",
                      }
                    }
                    type="radio"
                    value={
                      Object {
                        "id": "unreachable_resources",
                        "parent": null,
                        "subChoices": Array [
                          Object {
                            "id": "all_resources",
                            "parent": "unreachable_resources",
                            "text": "No puedo visitar ninguna pÃ¡gina ni usar ninguna aplicaciÃ³n",
                          },
                          Object {
                            "id": "some_of_them",
                            "parent": "unreachable_resources",
                            "text": "Puedo visitar algunas pÃ¡ginas pero otras no",
                          },
                          Object {
                            "id": "only_by_ip",
                            "parent": "unreachable_resources",
                            "text": "Puedo utilizar algunas aplicaciones como whatsapp pero no puedo navegar",
                          },
                        ],
                        "text": "Puedo conectarme a mi red, pero tengo problemas para navegar",
                      }
                    }
                  >
                    <label
                      className="ant-radio-wrapper"
                      style={
                        Object {
                          "display": "flex",
                          "paddingBottom": "0.5em",
                          "whiteSpace": "normal",
                        }
                      }
                    >
                      <Checkbox
                        checked={false}
                        className=""
                        defaultChecked={false}
                        name="common_issue"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        prefixCls="ant-radio"
                        style={Object {}}
                        type="radio"
                        value={
                          Object {
                            "id": "unreachable_resources",
                            "parent": null,
                            "subChoices": Array [
                              Object {
                                "id": "all_resources",
                                "parent": "unreachable_resources",
                                "text": "No puedo visitar ninguna pÃ¡gina ni usar ninguna aplicaciÃ³n",
                              },
                              Object {
                                "id": "some_of_them",
                                "parent": "unreachable_resources",
                                "text": "Puedo visitar algunas pÃ¡ginas pero otras no",
                              },
                              Object {
                                "id": "only_by_ip",
                                "parent": "unreachable_resources",
                                "text": "Puedo utilizar algunas aplicaciones como whatsapp pero no puedo navegar",
                              },
                            ],
                            "text": "Puedo conectarme a mi red, pero tengo problemas para navegar",
                          }
                        }
                      >
                        <span
                          className="ant-radio"
                          style={Object {}}
                        >
                          <input
                            checked={false}
                            className="ant-radio-input"
                            name="common_issue"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            type="radio"
                            value={
                              Object {
                                "id": "unreachable_resources",
                                "parent": null,
                                "subChoices": Array [
                                  Object {
                                    "id": "all_resources",
                                    "parent": "unreachable_resources",
                                    "text": "No puedo visitar ninguna pÃ¡gina ni usar ninguna aplicaciÃ³n",
                                  },
                                  Object {
                                    "id": "some_of_them",
                                    "parent": "unreachable_resources",
                                    "text": "Puedo visitar algunas pÃ¡ginas pero otras no",
                                  },
                                  Object {
                                    "id": "only_by_ip",
                                    "parent": "unreachable_resources",
                                    "text": "Puedo utilizar algunas aplicaciones como whatsapp pero no puedo navegar",
                                  },
                                ],
                                "text": "Puedo conectarme a mi red, pero tengo problemas para navegar",
                              }
                            }
                          />
                          <span
                            className="ant-radio-inner"
                          />
                        </span>
                      </Checkbox>
                      <span>
                        Puedo conectarme a mi red, pero tengo problemas para navegar
                      </span>
                    </label>
                  </Radio>
                  <Radio
                    key="slow_connection"
                    style={
                      Object {
                        "display": "flex",
                        "paddingBottom": "0.5em",
                        "whiteSpace": "normal",
                      }
                    }
                    type="radio"
                    value={
                      Object {
                        "id": "slow_connection",
                        "parent": null,
                        "subChoices": Array [
                          Object {
                            "id": "from_precise_moment",
                            "parent": "slow_connection",
                            "text": "EmpezÃ³ a andar lento en un momento puntual",
                          },
                          Object {
                            "id": "periodically",
                            "parent": "slow_connection",
                            "text": "Siempre me anda lento en los mismos dÃ­as/horarios",
                          },
                          Object {
                            "id": "only_with_some_sites",
                            "parent": "slow_connection",
                            "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
                          },
                        ],
                        "text": "Puedo navegar pero anda lento",
                      }
                    }
                  >
                    <label
                      className="ant-radio-wrapper"
                      style={
                        Object {
                          "display": "flex",
                          "paddingBottom": "0.5em",
                          "whiteSpace": "normal",
                        }
                      }
                    >
                      <Checkbox
                        checked={false}
                        className=""
                        defaultChecked={false}
                        name="common_issue"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        prefixCls="ant-radio"
                        style={Object {}}
                        type="radio"
                        value={
                          Object {
                            "id": "slow_connection",
                            "parent": null,
                            "subChoices": Array [
                              Object {
                                "id": "from_precise_moment",
                                "parent": "slow_connection",
                                "text": "EmpezÃ³ a andar lento en un momento puntual",
                              },
                              Object {
                                "id": "periodically",
                                "parent": "slow_connection",
                                "text": "Siempre me anda lento en los mismos dÃ­as/horarios",
                              },
                              Object {
                                "id": "only_with_some_sites",
                                "parent": "slow_connection",
                                "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
                              },
                            ],
                            "text": "Puedo navegar pero anda lento",
                          }
                        }
                      >
                        <span
                          className="ant-radio"
                          style={Object {}}
                        >
                          <input
                            checked={false}
                            className="ant-radio-input"
                            name="common_issue"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            type="radio"
                            value={
                              Object {
                                "id": "slow_connection",
                                "parent": null,
                                "subChoices": Array [
                                  Object {
                                    "id": "from_precise_moment",
                                    "parent": "slow_connection",
                                    "text": "EmpezÃ³ a andar lento en un momento puntual",
                                  },
                                  Object {
                                    "id": "periodically",
                                    "parent": "slow_connection",
                                    "text": "Siempre me anda lento en los mismos dÃ­as/horarios",
                                  },
                                  Object {
                                    "id": "only_with_some_sites",
                                    "parent": "slow_connection",
                                    "text": "Funciona lento una pÃ¡gina/aplicaciÃ³n en particular. Ej (Netflix)",
                                  },
                                ],
                                "text": "Puedo navegar pero anda lento",
                              }
                            }
                          />
                          <span
                            className="ant-radio-inner"
                          />
                        </span>
                      </Checkbox>
                      <span>
                        Puedo navegar pero anda lento
                      </span>
                    </label>
                  </Radio>
                  <Radio
                    key="cuts_out_connection"
                    style={
                      Object {
                        "display": "flex",
                        "paddingBottom": "0.5em",
                        "whiteSpace": "normal",
                      }
                    }
                    type="radio"
                    value={
                      Object {
                        "id": "cuts_out_connection",
                        "parent": null,
                        "subChoices": Array [],
                        "text": "Puedo navegar pero de a ratos se corta",
                      }
                    }
                  >
                    <label
                      className="ant-radio-wrapper"
                      style={
                        Object {
                          "display": "flex",
                          "paddingBottom": "0.5em",
                          "whiteSpace": "normal",
                        }
                      }
                    >
                      <Checkbox
                        checked={false}
                        className=""
                        defaultChecked={false}
                        name="common_issue"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        prefixCls="ant-radio"
                        style={Object {}}
                        type="radio"
                        value={
                          Object {
                            "id": "cuts_out_connection",
                            "parent": null,
                            "subChoices": Array [],
                            "text": "Puedo navegar pero de a ratos se corta",
                          }
                        }
                      >
                        <span
                          className="ant-radio"
                          style={Object {}}
                        >
                          <input
                            checked={false}
                            className="ant-radio-input"
                            name="common_issue"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            type="radio"
                            value={
                              Object {
                                "id": "cuts_out_connection",
                                "parent": null,
                                "subChoices": Array [],
                                "text": "Puedo navegar pero de a ratos se corta",
                              }
                            }
                          />
                          <span
                            className="ant-radio-inner"
                          />
                        </span>
                      </Checkbox>
                      <span>
                        Puedo navegar pero de a ratos se corta
                      </span>
                    </label>
                  </Radio>
                  <Radio
                    key="custom"
                    style={
                      Object {
                        "display": "flex",
                        "paddingBottom": "0.5em",
                        "whiteSpace": "normal",
                      }
                    }
                    type="radio"
                    value={
                      Object {
                        "id": "custom",
                        "text": "Ninguno de los anteriores",
                      }
                    }
                  >
                    <label
                      className="ant-radio-wrapper"
                      style={
                        Object {
                          "display": "flex",
                          "paddingBottom": "0.5em",
                          "whiteSpace": "normal",
                        }
                      }
                    >
                      <Checkbox
                        checked={false}
                        className=""
                        defaultChecked={false}
                        name="common_issue"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        prefixCls="ant-radio"
                        style={Object {}}
                        type="radio"
                        value={
                          Object {
                            "id": "custom",
                            "text": "Ninguno de los anteriores",
                          }
                        }
                      >
                        <span
                          className="ant-radio"
                          style={Object {}}
                        >
                          <input
                            checked={false}
                            className="ant-radio-input"
                            name="common_issue"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            type="radio"
                            value={
                              Object {
                                "id": "custom",
                                "text": "Ninguno de los anteriores",
                              }
                            }
                          />
                          <span
                            className="ant-radio-inner"
                          />
                        </span>
                      </Checkbox>
                      <span>
                        Ninguno de los anteriores
                      </span>
                    </label>
                  </Radio>
                </div>
              </RadioGroup>
            </div>
          </Choices>
          <Navigation
            nextDisabled={true}
            onNext={[Function]}
            onPrev={[Function]}
          >
            <div
              className="wizard-navigation"
            >
              <Button
                block={false}
                ghost={false}
                htmlType="button"
                loading={false}
                onClick={[Function]}
                style={
                  Object {
                    "display": "block",
                  }
                }
              >
                <Wave>
                  <button
                    className="ant-btn"
                    onClick={[Function]}
                    style={
                      Object {
                        "display": "block",
                      }
                    }
                    type="button"
                  >
                    <Icon
                      key=".0"
                      type="left"
                    >
                      <LocaleReceiver
                        componentName="Icon"
                      >
                        <i
                          aria-label="icon: left"
                          className="anticon anticon-left"
                        >
                          <IconReact
                            className=""
                            type="left-o"
                          >
                            <svg
                              aria-hidden="true"
                              className=""
                              data-icon="left"
                              fill="currentColor"
                              focusable="false"
                              height="1em"
                              key="svg-left"
                              viewBox="64 64 896 896"
                              width="1em"
                            >
                              <path
                                d="M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 0 0 0 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z"
                                key="svg-left-svg-0"
                              />
                            </svg>
                          </IconReact>
                        </i>
                      </LocaleReceiver>
                    </Icon>
                    <span
                      key=".1"
                    >
                      Volver
                    </span>
                  </button>
                </Wave>
              </Button>
              <Button
                block={false}
                className="right-button"
                disabled={true}
                ghost={false}
                htmlType="button"
                loading={false}
                onClick={[Function]}
                style={
                  Object {
                    "display": "block",
                  }
                }
              >
                <Wave>
                  <button
                    className="ant-btn right-button"
                    disabled={true}
                    onClick={[Function]}
                    style={
                      Object {
                        "display": "block",
                      }
                    }
                    type="button"
                  >
                    <span
                      key=".0"
                    >
                      Continuar 
                    </span>
                    <Icon
                      key=".1"
                      type="right"
                    >
                      <LocaleReceiver
                        componentName="Icon"
                      >
                        <i
                          aria-label="icon: right"
                          className="anticon anticon-right"
                        >
                          <IconReact
                            className=""
                            type="right-o"
                          >
                            <svg
                              aria-hidden="true"
                              className=""
                              data-icon="right"
                              fill="currentColor"
                              focusable="false"
                              height="1em"
                              key="svg-right"
                              viewBox="64 64 896 896"
                              width="1em"
                            >
                              <path
                                d="M765.7 486.8L314.9 134.7A7.97 7.97 0 0 0 302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 0 0 0-50.4z"
                                key="svg-right-svg-0"
                              />
                            </svg>
                          </IconReact>
                        </i>
                      </LocaleReceiver>
                    </Icon>
                  </button>
                </Wave>
              </Button>
              <Button
                block={false}
                className="right-button"
                ghost={false}
                htmlType="button"
                loading={false}
                onClick={[Function]}
                style={
                  Object {
                    "display": "none",
                  }
                }
              >
                <Wave>
                  <button
                    className="ant-btn right-button"
                    onClick={[Function]}
                    style={
                      Object {
                        "display": "none",
                      }
                    }
                    type="button"
                  >
                    <span
                      key=".0"
                    >
                      Finalizar
                    </span>
                  </button>
                </Wave>
              </Button>
            </div>
          </Navigation>
        </div>
      </div>
    </WizardStep>
  </ProblemSelectionStep>
</div>
`;

exports[`Storyshots Registration Congrats after registering 1`] = `
<Congrats
  seedPhrase="witch collapse practice feed shame open despair creek road again ice least"
  username="bob"
>
  <div
    className="congrats"
  >
    <h3>
      Felicitaciones 
      bob
      !
    </h3>
    <p>
      Te has registrado correctamente. Esta es tu frase secreta:
    </p>
    <p>
      <Text
        code={true}
      >
        <withConfigConsumer(Base)
          code={true}
          component="span"
          ellipsis={false}
        >
          <Base
            code={true}
            component="span"
            ellipsis={false}
            getPrefixCls={[Function]}
            prefixCls="ant-typography"
            renderEmpty={[Function]}
          >
            <LocaleReceiver
              componentName="Text"
            >
              <ResizeObserver
                disabled={true}
                onResize={[Function]}
              >
                <Typography
                  aria-label={null}
                  className=""
                  component="span"
                  style={
                    Object {
                      "WebkitLineClamp": null,
                    }
                  }
                >
                  <span
                    aria-label={null}
                    className="ant-typography"
                    style={
                      Object {
                        "WebkitLineClamp": null,
                      }
                    }
                  >
                    <code>
                      witch collapse practice feed shame open despair creek road again ice least
                    </code>
                  </span>
                </Typography>
              </ResizeObserver>
            </LocaleReceiver>
          </Base>
        </withConfigConsumer(Base)>
      </Text>
    </p>
    <p>
      <b>
        Conservala
      </b>
      , la necesitarÃ¡s para acceder en el futuro.
    </p>
    <div
      className="button-wrapper"
    >
      <Button
        block={false}
        ghost={false}
        htmlType="button"
        loading={false}
        type="primary"
      >
        <Wave>
          <button
            className="ant-btn ant-btn-primary"
            onClick={[Function]}
            type="button"
          >
            <span
              key=".0"
            >
              Continuar
            </span>
          </button>
        </Wave>
      </Button>
    </div>
  </div>
</Congrats>
`;

exports[`Storyshots Registration Default Node Roxa 1`] = `
<Registration
  defaultNode="ql-roxa"
  handleGoToLogin={[Function]}
  handleSubmit={[Function]}
  isOnline={true}
  nodes={
    Array [
      "ql-roxa",
      "ql-nicoyjesi",
      "ql-natiysofi",
      "si-silvia",
    ]
  }
>
  <OnlineRegistration
    defaultNode="ql-roxa"
    handleGoToLogin={[Function]}
    handleSubmit={[Function]}
    nodes={
      Array [
        "ql-roxa",
        "ql-nicoyjesi",
        "ql-natiysofi",
        "si-silvia",
      ]
    }
  >
    <div
      className="registration-page"
    >
      <div
        className="registration-page"
      >
        <AccountForm
          buttonMessage="Registrarme"
          defaultNode="ql-roxa"
          handleSubmit={[Function]}
          nodes={
            Array [
              "ql-roxa",
              "ql-nicoyjesi",
              "ql-natiysofi",
              "si-silvia",
            ]
          }
        >
          <Formik
            enableReinitialize={true}
            initialValues={
              Object {
                "avatar": "",
                "name": "",
                "node": "ql-roxa",
              }
            }
            isInitialValid={false}
            onSubmit={[Function]}
            validate={[Function]}
            validateOnBlur={true}
            validateOnChange={true}
          >
            <Form
              className="account-form"
            >
              <FormikConnect(FieldInner)>
                <FieldInner
                  formik={
                    Object {
                      "dirty": false,
                      "errors": Object {},
                      "handleBlur": [Function],
                      "handleChange": [Function],
                      "handleReset": [Function],
                      "handleSubmit": [Function],
                      "initialValues": Object {
                        "avatar": "",
                        "name": "",
                        "node": "ql-roxa",
                      },
                      "isSubmitting": false,
                      "isValid": false,
                      "isValidating": false,
                      "registerField": [Function],
                      "resetForm": [Function],
                      "setError": [Function],
                      "setErrors": [Function],
                      "setFieldError": [Function],
                      "setFieldTouched": [Function],
                      "setFieldValue": [Function],
                      "setFormikState": [Function],
                      "setStatus": [Function],
                      "setSubmitting": [Function],
                      "setTouched": [Function],
                      "setValues": [Function],
                      "status": undefined,
                      "submitCount": 0,
                      "submitForm": [Function],
                      "touched": Object {},
                      "unregisterField": [Function],
                      "validate": [Function],
                      "validateField": [Function],
                      "validateForm": [Function],
                      "validateOnBlur": true,
                      "validateOnChange": true,
                      "validationSchema": undefined,
                      "values": Object {
                        "avatar": "",
                        "name": "",
                        "node": "ql-roxa",
                      },
                    }
                  }
                >
                  <Form
                    className="account-form"
                    colon={true}
                    hideRequiredMark={false}
                    layout="horizontal"
                    onReset={[Function]}
                    onSubmit={[Function]}
                  >
                    <form
                      className="ant-form ant-form-horizontal account-form"
                      onReset={[Function]}
                      onSubmit={[Function]}
                    >
                      <Component
                        hasFeedback={true}
                        htmlFor="name"
                        label="Nombre de Usuario"
                        name="name"
                      >
                        <FormikConnect(FieldInner)
                          name="name"
                        >
                          <FieldInner
                            formik={
                              Object {
                                "dirty": false,
                                "errors": Object {},
                                "handleBlur": [Function],
                                "handleChange": [Function],
                                "handleReset": [Function],
                                "handleSubmit": [Function],
                                "initialValues": Object {
                                  "avatar": "",
                                  "name": "",
                                  "node": "ql-roxa",
                                },
                                "isSubmitting": false,
                                "isValid": false,
                                "isValidating": false,
                                "registerField": [Function],
                                "resetForm": [Function],
                                "setError": [Function],
                                "setErrors": [Function],
                                "setFieldError": [Function],
                                "setFieldTouched": [Function],
                                "setFieldValue": [Function],
                                "setFormikState": [Function],
                                "setStatus": [Function],
                                "setSubmitting": [Function],
                                "setTouched": [Function],
                                "setValues": [Function],
                                "status": undefined,
                                "submitCount": 0,
                                "submitForm": [Function],
                                "touched": Object {},
                                "unregisterField": [Function],
                                "validate": [Function],
                                "validateField": [Function],
                                "validateForm": [Function],
                                "validateOnBlur": true,
                                "validateOnChange": true,
                                "validationSchema": undefined,
                                "values": Object {
                                  "avatar": "",
                                  "name": "",
                                  "node": "ql-roxa",
                                },
                              }
                            }
                            name="name"
                          >
                            <FormItem
                              hasFeedback={true}
                              help={false}
                              htmlFor="name"
                              label="Nombre de Usuario"
                            >
                              <Row
                                className="ant-form-item"
                                gutter={0}
                                key="row"
                              >
                                <div
                                  className="ant-row ant-form-item"
                                  style={Object {}}
                                >
                                  <Col
                                    className="ant-form-item-label"
                                  >
                                    <div
                                      className="ant-col ant-form-item-label"
                                      style={Object {}}
                                    >
                                      <label
                                        className=""
                                        htmlFor="name"
                                        onClick={[Function]}
                                        title="Nombre de Usuario"
                                      >
                                        Nombre de Usuario
                                      </label>
                                    </div>
                                  </Col>
                                  <Col
                                    className="ant-form-item-control-wrapper"
                                  >
                                    <div
                                      className="ant-col ant-form-item-control-wrapper"
                                      style={Object {}}
                                    >
                                      <div
                                        className="ant-form-item-control"
                                      >
                                        <span
                                          className="ant-form-item-children"
                                        >
                                          <Component
                                            id="name"
                                            name="name"
                                            prefix={
                                              <Icon
                                                style={
                                                  Object {
                                                    "color": "rgba(0,0,0,.25)",
                                                  }
                                                }
                                                type="user"
                                              />
                                            }
                                          >
                                            <FormikConnect(FieldInner)
                                              name="name"
                                            >
                                              <FieldInner
                                                formik={
                                                  Object {
                                                    "dirty": false,
                                                    "errors": Object {},
                                                    "handleBlur": [Function],
                                                    "handleChange": [Function],
                                                    "handleReset": [Function],
                                                    "handleSubmit": [Function],
                                                    "initialValues": Object {
                                                      "avatar": "",
                                                      "name": "",
                                                      "node": "ql-roxa",
                                                    },
                                                    "isSubmitting": false,
                                                    "isValid": false,
                                                    "isValidating": false,
                                                    "registerField": [Function],
                                                    "resetForm": [Function],
                                                    "setError": [Function],
                                                    "setErrors": [Function],
                                                    "setFieldError": [Function],
                                                    "setFieldTouched": [Function],
                                                    "setFieldValue": [Function],
                                                    "setFormikState": [Function],
                                                    "setStatus": [Function],
                                                    "setSubmitting": [Function],
                                                    "setTouched": [Function],
                                                    "setValues": [Function],
                                                    "status": undefined,
                                                    "submitCount": 0,
                                                    "submitForm": [Function],
                                                    "touched": Object {},
                                                    "unregisterField": [Function],
                                                    "validate": [Function],
                                                    "validateField": [Function],
                                                    "validateForm": [Function],
                                                    "validateOnBlur": true,
                                                    "validateOnChange": true,
                                                    "validationSchema": undefined,
                                                    "values": Object {
                                                      "avatar": "",
                                                      "name": "",
                                                      "node": "ql-roxa",
                                                    },
                                                  }
                                                }
                                                name="name"
                                              >
                                                <Input
                                                  id="name"
                                                  name="name"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  prefix={
                                                    <Icon
                                                      style={
                                                        Object {
                                                          "color": "rgba(0,0,0,.25)",
                                                        }
                                                      }
                                                      type="user"
                                                    />
                                                  }
                                                  type="text"
                                                  value=""
                                                >
                                                  <ClearableLabeledInput
                                                    element={
                                                      <input
                                                        className="ant-input"
                                                        id="name"
                                                        name="name"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onKeyDown={[Function]}
                                                        type="text"
                                                        value=""
                                                      />
                                                    }
                                                    handleReset={[Function]}
                                                    id="name"
                                                    inputType="input"
                                                    name="name"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    prefix={
                                                      <Icon
                                                        style={
                                                          Object {
                                                            "color": "rgba(0,0,0,.25)",
                                                          }
                                                        }
                                                        type="user"
                                                      />
                                                    }
                                                    prefixCls="ant-input"
                                                    type="text"
                                                    value=""
                                                  >
                                                    <span
                                                      className="ant-input-affix-wrapper"
                                                    >
                                                      <span
                                                        className="ant-input-prefix"
                                                      >
                                                        <Icon
                                                          style={
                                                            Object {
                                                              "color": "rgba(0,0,0,.25)",
                                                            }
                                                          }
                                                          type="user"
                                                        >
                                                          <LocaleReceiver
                                                            componentName="Icon"
                                                          >
                                                            <i
                                                              aria-label="icon: user"
                                                              className="anticon anticon-user"
                                                              style={
                                                                Object {
                                                                  "color": "rgba(0,0,0,.25)",
                                                                }
                                                              }
                                                            >
                                                              <IconReact
                                                                className=""
                                                                type="user-o"
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="user"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-user"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M858.5 763.6a374 374 0 0 0-80.6-119.5 375.63 375.63 0 0 0-119.5-80.6c-.4-.2-.8-.3-1.2-.5C719.5 518 760 444.7 760 362c0-137-111-248-248-248S264 225 264 362c0 82.7 40.5 156 102.8 201.1-.4.2-.8.3-1.2.5-44.8 18.9-85 46-119.5 80.6a375.63 375.63 0 0 0-80.6 119.5A371.7 371.7 0 0 0 136 901.8a8 8 0 0 0 8 8.2h60c4.4 0 7.9-3.5 8-7.8 2-77.2 33-149.5 87.8-204.3 56.7-56.7 132-87.9 212.2-87.9s155.5 31.2 212.2 87.9C779 752.7 810 825 812 902.2c.1 4.4 3.6 7.8 8 7.8h60a8 8 0 0 0 8-8.2c-1-47.8-10.9-94.3-29.5-138.2zM512 534c-45.9 0-89.1-17.9-121.6-50.4S340 407.9 340 362c0-45.9 17.9-89.1 50.4-121.6S466.1 190 512 190s89.1 17.9 121.6 50.4S684 316.1 684 362c0 45.9-17.9 89.1-50.4 121.6S557.9 534 512 534z"
                                                                    key="svg-user-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </i>
                                                          </LocaleReceiver>
                                                        </Icon>
                                                      </span>
                                                      <input
                                                        className="ant-input"
                                                        id="name"
                                                        name="name"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onKeyDown={[Function]}
                                                        style={null}
                                                        type="text"
                                                        value=""
                                                      />
                                                    </span>
                                                  </ClearableLabeledInput>
                                                </Input>
                                              </FieldInner>
                                            </FormikConnect(FieldInner)>
                                          </Component>
                                        </span>
                                        <Animate
                                          animation={Object {}}
                                          component=""
                                          componentProps={Object {}}
                                          key="help"
                                          onAppear={[Function]}
                                          onEnd={[Function]}
                                          onEnter={[Function]}
                                          onLeave={[Function]}
                                          transitionAppear={true}
                                          transitionEnter={true}
                                          transitionLeave={true}
                                          transitionName="show-help"
                                        />
                                      </div>
                                    </div>
                                  </Col>
                                </div>
                              </Row>
                            </FormItem>
                          </FieldInner>
                        </FormikConnect(FieldInner)>
                      </Component>
                      <Component
                        hasFeedback={true}
                        htmlFor="name"
                        label="Tu Nodo"
                        name="node"
                      >
                        <FormikConnect(FieldInner)
                          name="node"
                        >
                          <FieldInner
                            formik={
                              Object {
                                "dirty": false,
                                "errors": Object {},
                                "handleBlur": [Function],
                                "handleChange": [Function],
                                "handleReset": [Function],
                                "handleSubmit": [Function],
                                "initialValues": Object {
                                  "avatar": "",
                                  "name": "",
                                  "node": "ql-roxa",
                                },
                                "isSubmitting": false,
                                "isValid": false,
                                "isValidating": false,
                                "registerField": [Function],
                                "resetForm": [Function],
                                "setError": [Function],
                                "setErrors": [Function],
                                "setFieldError": [Function],
                                "setFieldTouched": [Function],
                                "setFieldValue": [Function],
                                "setFormikState": [Function],
                                "setStatus": [Function],
                                "setSubmitting": [Function],
                                "setTouched": [Function],
                                "setValues": [Function],
                                "status": undefined,
                                "submitCount": 0,
                                "submitForm": [Function],
                                "touched": Object {},
                                "unregisterField": [Function],
                                "validate": [Function],
                                "validateField": [Function],
                                "validateForm": [Function],
                                "validateOnBlur": true,
                                "validateOnChange": true,
                                "validationSchema": undefined,
                                "values": Object {
                                  "avatar": "",
                                  "name": "",
                                  "node": "ql-roxa",
                                },
                              }
                            }
                            name="node"
                          >
                            <FormItem
                              hasFeedback={true}
                              help={false}
                              htmlFor="name"
                              label="Tu Nodo"
                            >
                              <Row
                                className="ant-form-item"
                                gutter={0}
                                key="row"
                              >
                                <div
                                  className="ant-row ant-form-item"
                                  style={Object {}}
                                >
                                  <Col
                                    className="ant-form-item-label"
                                  >
                                    <div
                                      className="ant-col ant-form-item-label"
                                      style={Object {}}
                                    >
                                      <label
                                        className=""
                                        htmlFor="name"
                                        onClick={[Function]}
                                        title="Tu Nodo"
                                      >
                                        Tu Nodo
                                      </label>
                                    </div>
                                  </Col>
                                  <Col
                                    className="ant-form-item-control-wrapper"
                                  >
                                    <div
                                      className="ant-col ant-form-item-control-wrapper"
                                      style={Object {}}
                                    >
                                      <div
                                        className="ant-form-item-control"
                                      >
                                        <span
                                          className="ant-form-item-children"
                                        >
                                          <Component
                                            filterOption={[Function]}
                                            name="node"
                                            optionFilterProp="children"
                                            showSearch={true}
                                          >
                                            <FormikConnect(FieldInner)
                                              name="node"
                                            >
                                              <FieldInner
                                                formik={
                                                  Object {
                                                    "dirty": false,
                                                    "errors": Object {},
                                                    "handleBlur": [Function],
                                                    "handleChange": [Function],
                                                    "handleReset": [Function],
                                                    "handleSubmit": [Function],
                                                    "initialValues": Object {
                                                      "avatar": "",
                                                      "name": "",
                                                      "node": "ql-roxa",
                                                    },
                                                    "isSubmitting": false,
                                                    "isValid": false,
                                                    "isValidating": false,
                                                    "registerField": [Function],
                                                    "resetForm": [Function],
                                                    "setError": [Function],
                                                    "setErrors": [Function],
                                                    "setFieldError": [Function],
                                                    "setFieldTouched": [Function],
                                                    "setFieldValue": [Function],
                                                    "setFormikState": [Function],
                                                    "setStatus": [Function],
                                                    "setSubmitting": [Function],
                                                    "setTouched": [Function],
                                                    "setValues": [Function],
                                                    "status": undefined,
                                                    "submitCount": 0,
                                                    "submitForm": [Function],
                                                    "touched": Object {},
                                                    "unregisterField": [Function],
                                                    "validate": [Function],
                                                    "validateField": [Function],
                                                    "validateForm": [Function],
                                                    "validateOnBlur": true,
                                                    "validateOnChange": true,
                                                    "validationSchema": undefined,
                                                    "values": Object {
                                                      "avatar": "",
                                                      "name": "",
                                                      "node": "ql-roxa",
                                                    },
                                                  }
                                                }
                                                name="node"
                                              >
                                                <Select
                                                  choiceTransitionName="zoom"
                                                  filterOption={[Function]}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  optionFilterProp="children"
                                                  showSearch={true}
                                                  transitionName="slide-up"
                                                  value="ql-roxa"
                                                >
                                                  <Select
                                                    allowClear={false}
                                                    autoClearSearchValue={true}
                                                    backfill={false}
                                                    choiceTransitionName="zoom"
                                                    className=""
                                                    clearIcon={
                                                      <Icon
                                                        className="ant-select-clear-icon"
                                                        theme="filled"
                                                        type="close-circle"
                                                      />
                                                    }
                                                    combobox={false}
                                                    defaultActiveFirstOption={true}
                                                    defaultOpen={false}
                                                    dropdownMatchSelectWidth={true}
                                                    dropdownMenuStyle={Object {}}
                                                    dropdownRender={[Function]}
                                                    dropdownStyle={Object {}}
                                                    filterOption={[Function]}
                                                    inputIcon={
                                                      <Icon
                                                        className="ant-select-arrow-icon"
                                                        type="down"
                                                      />
                                                    }
                                                    labelInValue={false}
                                                    menuItemSelectedIcon={
                                                      <Icon
                                                        className="ant-select-selected-icon"
                                                        type="check"
                                                      />
                                                    }
                                                    multiple={false}
                                                    notFoundContent={
                                                      <Context.Consumer>
                                                        [Function]
                                                      </Context.Consumer>
                                                    }
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onDeselect={[Function]}
                                                    onFocus={[Function]}
                                                    onInputKeyDown={[Function]}
                                                    onSearch={[Function]}
                                                    onSelect={[Function]}
                                                    optionFilterProp="children"
                                                    optionLabelProp="children"
                                                    placeholder=""
                                                    prefixCls="ant-select"
                                                    removeIcon={
                                                      <Icon
                                                        className="ant-select-remove-icon"
                                                        type="close"
                                                      />
                                                    }
                                                    showAction={
                                                      Array [
                                                        "click",
                                                      ]
                                                    }
                                                    showSearch={true}
                                                    tabIndex={0}
                                                    tags={false}
                                                    tokenSeparators={Array []}
                                                    transitionName="slide-up"
                                                    value="ql-roxa"
                                                  >
                                                    <SelectTrigger
                                                      ariaId="test-uuid"
                                                      backfillValue=""
                                                      combobox={false}
                                                      defaultActiveFirstOption={true}
                                                      dropdownMatchSelectWidth={true}
                                                      dropdownMenuStyle={Object {}}
                                                      dropdownRender={[Function]}
                                                      dropdownStyle={Object {}}
                                                      empty={false}
                                                      inputValue=""
                                                      menuItemSelectedIcon={
                                                        <Icon
                                                          className="ant-select-selected-icon"
                                                          type="check"
                                                        />
                                                      }
                                                      multiple={false}
                                                      onDropdownVisibleChange={[Function]}
                                                      onMenuDeselect={[Function]}
                                                      onMenuSelect={[Function]}
                                                      onPopupFocus={[Function]}
                                                      options={Array []}
                                                      prefixCls="ant-select"
                                                      showAction={
                                                        Array [
                                                          "click",
                                                        ]
                                                      }
                                                      showSearch={true}
                                                      transitionName="slide-up"
                                                      value={
                                                        Array [
                                                          "ql-roxa",
                                                        ]
                                                      }
                                                      visible={false}
                                                    >
                                                      <Trigger
                                                        action={Array []}
                                                        afterPopupVisibleChange={[Function]}
                                                        ariaId="test-uuid"
                                                        backfillValue=""
                                                        blurDelay={0.15}
                                                        builtinPlacements={
                                                          Object {
                                                            "bottomLeft": Object {
                                                              "offset": Array [
                                                                0,
                                                                4,
                                                              ],
                                                              "overflow": Object {
                                                                "adjustX": 0,
                                                                "adjustY": 1,
                                                              },
                                                              "points": Array [
                                                                "tl",
                                                                "bl",
                                                              ],
                                                            },
                                                            "topLeft": Object {
                                                              "offset": Array [
                                                                0,
                                                                -4,
                                                              ],
                                                              "overflow": Object {
                                                                "adjustX": 0,
                                                                "adjustY": 1,
                                                              },
                                                              "points": Array [
                                                                "bl",
                                                                "tl",
                                                              ],
                                                            },
                                                          }
                                                        }
                                                        combobox={false}
                                                        defaultActiveFirstOption={true}
                                                        defaultPopupVisible={false}
                                                        destroyPopupOnHide={false}
                                                        dropdownMatchSelectWidth={true}
                                                        dropdownMenuStyle={Object {}}
                                                        dropdownRender={[Function]}
                                                        dropdownStyle={Object {}}
                                                        focusDelay={0}
                                                        getDocument={[Function]}
                                                        getPopupClassNameFromAlign={[Function]}
                                                        hideAction={
                                                          Array [
                                                            "blur",
                                                          ]
                                                        }
                                                        inputValue=""
                                                        mask={false}
                                                        maskClosable={true}
                                                        menuItemSelectedIcon={
                                                          <Icon
                                                            className="ant-select-selected-icon"
                                                            type="check"
                                                          />
                                                        }
                                                        mouseEnterDelay={0}
                                                        mouseLeaveDelay={0.1}
                                                        multiple={false}
                                                        onDropdownVisibleChange={[Function]}
                                                        onMenuDeselect={[Function]}
                                                        onMenuSelect={[Function]}
                                                        onPopupAlign={[Function]}
                                                        onPopupVisibleChange={[Function]}
                                                        options={Array []}
                                                        popup={
                                                          <DropdownMenu
                                                            ariaId="test-uuid"
                                                            backfillValue=""
                                                            defaultActiveFirstOption={true}
                                                            dropdownMenuStyle={Object {}}
                                                            inputValue=""
                                                            menuItemSelectedIcon={
                                                              <Icon
                                                                className="ant-select-selected-icon"
                                                                type="check"
                                                              />
                                                            }
                                                            menuItems={Array []}
                                                            multiple={false}
                                                            onMenuDeselect={[Function]}
                                                            onMenuSelect={[Function]}
                                                            onPopupFocus={[Function]}
                                                            prefixCls="ant-select-dropdown"
                                                            value={
                                                              Array [
                                                                "ql-roxa",
                                                              ]
                                                            }
                                                            visible={false}
                                                          />
                                                        }
                                                        popupAlign={Object {}}
                                                        popupClassName="ant-select-dropdown--single"
                                                        popupPlacement="bottomLeft"
                                                        popupStyle={Object {}}
                                                        popupTransitionName="slide-up"
                                                        popupVisible={false}
                                                        prefixCls="ant-select-dropdown"
                                                        showAction={
                                                          Array [
                                                            "click",
                                                          ]
                                                        }
                                                        showSearch={true}
                                                        transitionName="slide-up"
                                                        value={
                                                          Array [
                                                            "ql-roxa",
                                                          ]
                                                        }
                                                        visible={false}
                                                      >
                                                        <div
                                                          className="ant-select ant-select-enabled"
                                                          key="trigger"
                                                          onBlur={[Function]}
                                                          onClick={[Function]}
                                                          onFocus={[Function]}
                                                          onMouseDown={[Function]}
                                                          onMouseOut={[Function]}
                                                          onMouseUp={[Function]}
                                                          onTouchStart={[Function]}
                                                        >
                                                          <div
                                                            aria-autocomplete="list"
                                                            aria-controls="test-uuid"
                                                            aria-expanded={false}
                                                            aria-haspopup="true"
                                                            className="ant-select-selection
            ant-select-selection--single"
                                                            key="selection"
                                                            onKeyDown={[Function]}
                                                            role="combobox"
                                                            tabIndex={0}
                                                          >
                                                            <div
                                                              className="ant-select-selection__rendered"
                                                            >
                                                              <div
                                                                className="ant-select-selection-selected-value"
                                                                key="value"
                                                                style={
                                                                  Object {
                                                                    "display": "block",
                                                                    "opacity": 1,
                                                                  }
                                                                }
                                                                title="ql-roxa"
                                                              >
                                                                ql-roxa
                                                              </div>
                                                              <div
                                                                className="ant-select-search ant-select-search--inline"
                                                                key="input"
                                                                style={
                                                                  Object {
                                                                    "display": "none",
                                                                  }
                                                                }
                                                              >
                                                                <div
                                                                  className="ant-select-search__field__wrap"
                                                                >
                                                                  <input
                                                                    autoComplete="off"
                                                                    className="ant-select-search__field"
                                                                    onChange={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    value=""
                                                                  />
                                                                  <span
                                                                    className="ant-select-search__field__mirror"
                                                                  >
                                                                    Â 
                                                                  </span>
                                                                </div>
                                                              </div>
                                                            </div>
                                                            <span
                                                              className="ant-select-arrow"
                                                              key="arrow"
                                                              onClick={[Function]}
                                                              style={
                                                                Object {
                                                                  "WebkitUserSelect": "none",
                                                                  "userSelect": "none",
                                                                }
                                                              }
                                                              unselectable="on"
                                                            >
                                                              <Icon
                                                                className="ant-select-arrow-icon"
                                                                type="down"
                                                              >
                                                                <LocaleReceiver
                                                                  componentName="Icon"
                                                                >
                                                                  <i
                                                                    aria-label="icon: down"
                                                                    className="anticon anticon-down ant-select-arrow-icon"
                                                                  >
                                                                    <IconReact
                                                                      className=""
                                                                      type="down-o"
                                                                    >
                                                                      <svg
                                                                        aria-hidden="true"
                                                                        className=""
                                                                        data-icon="down"
                                                                        fill="currentColor"
                                                                        focusable="false"
                                                                        height="1em"
                                                                        key="svg-down"
                                                                        viewBox="64 64 896 896"
                                                                        width="1em"
                                                                      >
                                                                        <path
                                                                          d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                                                                          key="svg-down-svg-0"
                                                                        />
                                                                      </svg>
                                                                    </IconReact>
                                                                  </i>
                                                                </LocaleReceiver>
                                                              </Icon>
                                                            </span>
                                                          </div>
                                                        </div>
                                                      </Trigger>
                                                    </SelectTrigger>
                                                  </Select>
                                                </Select>
                                              </FieldInner>
                                            </FormikConnect(FieldInner)>
                                          </Component>
                                        </span>
                                        <Animate
                                          animation={Object {}}
                                          component=""
                                          componentProps={Object {}}
                                          key="help"
                                          onAppear={[Function]}
                                          onEnd={[Function]}
                                          onEnter={[Function]}
                                          onLeave={[Function]}
                                          transitionAppear={true}
                                          transitionEnter={true}
                                          transitionLeave={true}
                                          transitionName="show-help"
                                        />
                                      </div>
                                    </div>
                                  </Col>
                                </div>
                              </Row>
                            </FormItem>
                          </FieldInner>
                        </FormikConnect(FieldInner)>
                      </Component>
                      <Component
                        htmlFor="avatar"
                        label="Foto de Perfil"
                        name="avatar"
                      >
                        <FormikConnect(FieldInner)
                          name="avatar"
                        >
                          <FieldInner
                            formik={
                              Object {
                                "dirty": false,
                                "errors": Object {},
                                "handleBlur": [Function],
                                "handleChange": [Function],
                                "handleReset": [Function],
                                "handleSubmit": [Function],
                                "initialValues": Object {
                                  "avatar": "",
                                  "name": "",
                                  "node": "ql-roxa",
                                },
                                "isSubmitting": false,
                                "isValid": false,
                                "isValidating": false,
                                "registerField": [Function],
                                "resetForm": [Function],
                                "setError": [Function],
                                "setErrors": [Function],
                                "setFieldError": [Function],
                                "setFieldTouched": [Function],
                                "setFieldValue": [Function],
                                "setFormikState": [Function],
                                "setStatus": [Function],
                                "setSubmitting": [Function],
                                "setTouched": [Function],
                                "setValues": [Function],
                                "status": undefined,
                                "submitCount": 0,
                                "submitForm": [Function],
                                "touched": Object {},
                                "unregisterField": [Function],
                                "validate": [Function],
                                "validateField": [Function],
                                "validateForm": [Function],
                                "validateOnBlur": true,
                                "validateOnChange": true,
                                "validationSchema": undefined,
                                "values": Object {
                                  "avatar": "",
                                  "name": "",
                                  "node": "ql-roxa",
                                },
                              }
                            }
                            name="avatar"
                          >
                            <FormItem
                              hasFeedback={false}
                              help={false}
                              htmlFor="avatar"
                              label="Foto de Perfil"
                            >
                              <Row
                                className="ant-form-item"
                                gutter={0}
                                key="row"
                              >
                                <div
                                  className="ant-row ant-form-item"
                                  style={Object {}}
                                >
                                  <Col
                                    className="ant-form-item-label"
                                  >
                                    <div
                                      className="ant-col ant-form-item-label"
                                      style={Object {}}
                                    >
                                      <label
                                        className=""
                                        htmlFor="avatar"
                                        onClick={[Function]}
                                        title="Foto de Perfil"
                                      >
                                        Foto de Perfil
                                      </label>
                                    </div>
                                  </Col>
                                  <Col
                                    className="ant-form-item-control-wrapper"
                                  >
                                    <div
                                      className="ant-col ant-form-item-control-wrapper"
                                      style={Object {}}
                                    >
                                      <div
                                        className="ant-form-item-control"
                                      >
                                        <span
                                          className="ant-form-item-children"
                                        >
                                          <AvatarUploader
                                            id="avatar"
                                            imageUrl=""
                                            onChange={[Function]}
                                          >
                                            <Upload
                                              accept="image/*"
                                              action=""
                                              beforeUpload={[Function]}
                                              className="avatar-uploader"
                                              data={Object {}}
                                              disabled={false}
                                              listType="picture-card"
                                              multiple={false}
                                              name="avatar"
                                              showUploadList={false}
                                              supportServerRender={true}
                                              type="select"
                                            >
                                              <span
                                                className="avatar-uploader ant-upload-picture-card-wrapper"
                                              >
                                                <div
                                                  className="ant-upload ant-upload-select ant-upload-select-picture-card"
                                                >
                                                  <Upload
                                                    accept="image/*"
                                                    action=""
                                                    beforeUpload={[Function]}
                                                    component="span"
                                                    customRequest={null}
                                                    data={Object {}}
                                                    disabled={false}
                                                    headers={Object {}}
                                                    listType="picture-card"
                                                    multipart={false}
                                                    multiple={false}
                                                    name="avatar"
                                                    onError={[Function]}
                                                    onProgress={[Function]}
                                                    onReady={[Function]}
                                                    onStart={[Function]}
                                                    onSuccess={[Function]}
                                                    openFileDialogOnClick={true}
                                                    prefixCls="ant-upload"
                                                    showUploadList={false}
                                                    supportServerRender={true}
                                                    type="select"
                                                    withCredentials={false}
                                                  >
                                                    <AjaxUploader
                                                      accept="image/*"
                                                      action=""
                                                      beforeUpload={[Function]}
                                                      component="span"
                                                      customRequest={null}
                                                      data={Object {}}
                                                      disabled={false}
                                                      headers={Object {}}
                                                      listType="picture-card"
                                                      multipart={false}
                                                      multiple={false}
                                                      name="avatar"
                                                      onError={[Function]}
                                                      onProgress={[Function]}
                                                      onReady={[Function]}
                                                      onStart={[Function]}
                                                      onSuccess={[Function]}
                                                      openFileDialogOnClick={true}
                                                      prefixCls="ant-upload"
                                                      showUploadList={false}
                                                      supportServerRender={true}
                                                      type="select"
                                                      withCredentials={false}
                                                    >
                                                      <span
                                                        className="ant-upload"
                                                        onClick={[Function]}
                                                        onDragOver={[Function]}
                                                        onDrop={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="button"
                                                        tabIndex="0"
                                                      >
                                                        <input
                                                          accept="image/*"
                                                          directory={null}
                                                          key="rc-upload-1565395200000-1"
                                                          multiple={false}
                                                          onChange={[Function]}
                                                          onClick={[Function]}
                                                          style={
                                                            Object {
                                                              "display": "none",
                                                            }
                                                          }
                                                          type="file"
                                                          webkitdirectory={null}
                                                        />
                                                        <div>
                                                          <Icon
                                                            type="plus"
                                                          >
                                                            <LocaleReceiver
                                                              componentName="Icon"
                                                            >
                                                              <i
                                                                aria-label="icon: plus"
                                                                className="anticon anticon-plus"
                                                              >
                                                                <IconReact
                                                                  className=""
                                                                  type="plus-o"
                                                                >
                                                                  <svg
                                                                    aria-hidden="true"
                                                                    className=""
                                                                    data-icon="plus"
                                                                    fill="currentColor"
                                                                    focusable="false"
                                                                    height="1em"
                                                                    key="svg-plus"
                                                                    viewBox="64 64 896 896"
                                                                    width="1em"
                                                                  >
                                                                    <path
                                                                      d="M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z"
                                                                      key="svg-plus-svg-0"
                                                                    />
                                                                    <path
                                                                      d="M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z"
                                                                      key="svg-plus-svg-1"
                                                                    />
                                                                  </svg>
                                                                </IconReact>
                                                              </i>
                                                            </LocaleReceiver>
                                                          </Icon>
                                                          <div
                                                            className="ant-upload-text"
                                                          >
                                                            Upload
                                                          </div>
                                                        </div>
                                                      </span>
                                                    </AjaxUploader>
                                                  </Upload>
                                                </div>
                                              </span>
                                            </Upload>
                                          </AvatarUploader>
                                        </span>
                                        <Animate
                                          animation={Object {}}
                                          component=""
                                          componentProps={Object {}}
                                          key="help"
                                          onAppear={[Function]}
                                          onEnd={[Function]}
                                          onEnter={[Function]}
                                          onLeave={[Function]}
                                          transitionAppear={true}
                                          transitionEnter={true}
                                          transitionLeave={true}
                                          transitionName="show-help"
                                        />
                                      </div>
                                    </div>
                                  </Col>
                                </div>
                              </Row>
                            </FormItem>
                          </FieldInner>
                        </FormikConnect(FieldInner)>
                      </Component>
                      <Component>
                        <FormikConnect(FieldInner)>
                          <FieldInner
                            formik={
                              Object {
                                "dirty": false,
                                "errors": Object {},
                                "handleBlur": [Function],
                                "handleChange": [Function],
                                "handleReset": [Function],
                                "handleSubmit": [Function],
                                "initialValues": Object {
                                  "avatar": "",
                                  "name": "",
                                  "node": "ql-roxa",
                                },
                                "isSubmitting": false,
                                "isValid": false,
                                "isValidating": false,
                                "registerField": [Function],
                                "resetForm": [Function],
                                "setError": [Function],
                                "setErrors": [Function],
                                "setFieldError": [Function],
                                "setFieldTouched": [Function],
                                "setFieldValue": [Function],
                                "setFormikState": [Function],
                                "setStatus": [Function],
                                "setSubmitting": [Function],
                                "setTouched": [Function],
                                "setValues": [Function],
                                "status": undefined,
                                "submitCount": 0,
                                "submitForm": [Function],
                                "touched": Object {},
                                "unregisterField": [Function],
                                "validate": [Function],
                                "validateField": [Function],
                                "validateForm": [Function],
                                "validateOnBlur": true,
                                "validateOnChange": true,
                                "validationSchema": undefined,
                                "values": Object {
                                  "avatar": "",
                                  "name": "",
                                  "node": "ql-roxa",
                                },
                              }
                            }
                          >
                            <FormItem
                              hasFeedback={false}
                              help={false}
                            >
                              <Row
                                className="ant-form-item"
                                gutter={0}
                                key="row"
                              >
                                <div
                                  className="ant-row ant-form-item"
                                  style={Object {}}
                                >
                                  <Col
                                    className="ant-form-item-control-wrapper"
                                  >
                                    <div
                                      className="ant-col ant-form-item-control-wrapper"
                                      style={Object {}}
                                    >
                                      <div
                                        className="ant-form-item-control"
                                      >
                                        <span
                                          className="ant-form-item-children"
                                        >
                                          <Button
                                            block={false}
                                            className="account-form-button"
                                            ghost={false}
                                            htmlType="submit"
                                            loading={false}
                                            type="primary"
                                          >
                                            <Wave>
                                              <button
                                                className="ant-btn account-form-button ant-btn-primary"
                                                onClick={[Function]}
                                                type="submit"
                                              >
                                                <span
                                                  key=".0"
                                                >
                                                  Registrarme
                                                </span>
                                              </button>
                                            </Wave>
                                          </Button>
                                        </span>
                                        <Animate
                                          animation={Object {}}
                                          component=""
                                          componentProps={Object {}}
                                          key="help"
                                          onAppear={[Function]}
                                          onEnd={[Function]}
                                          onEnter={[Function]}
                                          onLeave={[Function]}
                                          transitionAppear={true}
                                          transitionEnter={true}
                                          transitionLeave={true}
                                          transitionName="show-help"
                                        />
                                      </div>
                                    </div>
                                  </Col>
                                </div>
                              </Row>
                            </FormItem>
                          </FieldInner>
                        </FormikConnect(FieldInner)>
                      </Component>
                    </form>
                  </Form>
                </FieldInner>
              </FormikConnect(FieldInner)>
            </Form>
          </Formik>
        </AccountForm>
        <GoToLogin
          handleGoToLogin={[Function]}
        >
          <div
            className="or-login"
          >
            <p>
              O 
              <Button
                block={false}
                ghost={false}
                htmlType="button"
                loading={false}
                onClick={[Function]}
                type="link"
              >
                <button
                  className="ant-btn ant-btn-link"
                  onClick={[Function]}
                  type="button"
                >
                  <span
                    key=".0"
                  >
                    Ingresa con tu frase secreta
                  </span>
                </button>
              </Button>
            </p>
          </div>
        </GoToLogin>
      </div>
    </div>
  </OnlineRegistration>
</Registration>
`;

exports[`Storyshots Registration No default node 1`] = `
<Registration
  handleGoToLogin={[Function]}
  handleSubmit={[Function]}
  isOnline={true}
  nodes={
    Array [
      "ql-roxa",
      "ql-nicoyjesi",
      "ql-natiysofi",
      "si-silvia",
    ]
  }
>
  <OnlineRegistration
    handleGoToLogin={[Function]}
    handleSubmit={[Function]}
    nodes={
      Array [
        "ql-roxa",
        "ql-nicoyjesi",
        "ql-natiysofi",
        "si-silvia",
      ]
    }
  >
    <div
      className="registration-page"
    >
      <div
        className="registration-page"
      >
        <AccountForm
          buttonMessage="Registrarme"
          handleSubmit={[Function]}
          nodes={
            Array [
              "ql-roxa",
              "ql-nicoyjesi",
              "ql-natiysofi",
              "si-silvia",
            ]
          }
        >
          <Formik
            enableReinitialize={true}
            initialValues={
              Object {
                "avatar": "",
                "name": "",
                "node": undefined,
              }
            }
            isInitialValid={false}
            onSubmit={[Function]}
            validate={[Function]}
            validateOnBlur={true}
            validateOnChange={true}
          >
            <Form
              className="account-form"
            >
              <FormikConnect(FieldInner)>
                <FieldInner
                  formik={
                    Object {
                      "dirty": false,
                      "errors": Object {},
                      "handleBlur": [Function],
                      "handleChange": [Function],
                      "handleReset": [Function],
                      "handleSubmit": [Function],
                      "initialValues": Object {
                        "avatar": "",
                        "name": "",
                        "node": undefined,
                      },
                      "isSubmitting": false,
                      "isValid": false,
                      "isValidating": false,
                      "registerField": [Function],
                      "resetForm": [Function],
                      "setError": [Function],
                      "setErrors": [Function],
                      "setFieldError": [Function],
                      "setFieldTouched": [Function],
                      "setFieldValue": [Function],
                      "setFormikState": [Function],
                      "setStatus": [Function],
                      "setSubmitting": [Function],
                      "setTouched": [Function],
                      "setValues": [Function],
                      "status": undefined,
                      "submitCount": 0,
                      "submitForm": [Function],
                      "touched": Object {},
                      "unregisterField": [Function],
                      "validate": [Function],
                      "validateField": [Function],
                      "validateForm": [Function],
                      "validateOnBlur": true,
                      "validateOnChange": true,
                      "validationSchema": undefined,
                      "values": Object {
                        "avatar": "",
                        "name": "",
                        "node": undefined,
                      },
                    }
                  }
                >
                  <Form
                    className="account-form"
                    colon={true}
                    hideRequiredMark={false}
                    layout="horizontal"
                    onReset={[Function]}
                    onSubmit={[Function]}
                  >
                    <form
                      className="ant-form ant-form-horizontal account-form"
                      onReset={[Function]}
                      onSubmit={[Function]}
                    >
                      <Component
                        hasFeedback={true}
                        htmlFor="name"
                        label="Nombre de Usuario"
                        name="name"
                      >
                        <FormikConnect(FieldInner)
                          name="name"
                        >
                          <FieldInner
                            formik={
                              Object {
                                "dirty": false,
                                "errors": Object {},
                                "handleBlur": [Function],
                                "handleChange": [Function],
                                "handleReset": [Function],
                                "handleSubmit": [Function],
                                "initialValues": Object {
                                  "avatar": "",
                                  "name": "",
                                  "node": undefined,
                                },
                                "isSubmitting": false,
                                "isValid": false,
                                "isValidating": false,
                                "registerField": [Function],
                                "resetForm": [Function],
                                "setError": [Function],
                                "setErrors": [Function],
                                "setFieldError": [Function],
                                "setFieldTouched": [Function],
                                "setFieldValue": [Function],
                                "setFormikState": [Function],
                                "setStatus": [Function],
                                "setSubmitting": [Function],
                                "setTouched": [Function],
                                "setValues": [Function],
                                "status": undefined,
                                "submitCount": 0,
                                "submitForm": [Function],
                                "touched": Object {},
                                "unregisterField": [Function],
                                "validate": [Function],
                                "validateField": [Function],
                                "validateForm": [Function],
                                "validateOnBlur": true,
                                "validateOnChange": true,
                                "validationSchema": undefined,
                                "values": Object {
                                  "avatar": "",
                                  "name": "",
                                  "node": undefined,
                                },
                              }
                            }
                            name="name"
                          >
                            <FormItem
                              hasFeedback={true}
                              help={false}
                              htmlFor="name"
                              label="Nombre de Usuario"
                            >
                              <Row
                                className="ant-form-item"
                                gutter={0}
                                key="row"
                              >
                                <div
                                  className="ant-row ant-form-item"
                                  style={Object {}}
                                >
                                  <Col
                                    className="ant-form-item-label"
                                  >
                                    <div
                                      className="ant-col ant-form-item-label"
                                      style={Object {}}
                                    >
                                      <label
                                        className=""
                                        htmlFor="name"
                                        onClick={[Function]}
                                        title="Nombre de Usuario"
                                      >
                                        Nombre de Usuario
                                      </label>
                                    </div>
                                  </Col>
                                  <Col
                                    className="ant-form-item-control-wrapper"
                                  >
                                    <div
                                      className="ant-col ant-form-item-control-wrapper"
                                      style={Object {}}
                                    >
                                      <div
                                        className="ant-form-item-control"
                                      >
                                        <span
                                          className="ant-form-item-children"
                                        >
                                          <Component
                                            id="name"
                                            name="name"
                                            prefix={
                                              <Icon
                                                style={
                                                  Object {
                                                    "color": "rgba(0,0,0,.25)",
                                                  }
                                                }
                                                type="user"
                                              />
                                            }
                                          >
                                            <FormikConnect(FieldInner)
                                              name="name"
                                            >
                                              <FieldInner
                                                formik={
                                                  Object {
                                                    "dirty": false,
                                                    "errors": Object {},
                                                    "handleBlur": [Function],
                                                    "handleChange": [Function],
                                                    "handleReset": [Function],
                                                    "handleSubmit": [Function],
                                                    "initialValues": Object {
                                                      "avatar": "",
                                                      "name": "",
                                                      "node": undefined,
                                                    },
                                                    "isSubmitting": false,
                                                    "isValid": false,
                                                    "isValidating": false,
                                                    "registerField": [Function],
                                                    "resetForm": [Function],
                                                    "setError": [Function],
                                                    "setErrors": [Function],
                                                    "setFieldError": [Function],
                                                    "setFieldTouched": [Function],
                                                    "setFieldValue": [Function],
                                                    "setFormikState": [Function],
                                                    "setStatus": [Function],
                                                    "setSubmitting": [Function],
                                                    "setTouched": [Function],
                                                    "setValues": [Function],
                                                    "status": undefined,
                                                    "submitCount": 0,
                                                    "submitForm": [Function],
                                                    "touched": Object {},
                                                    "unregisterField": [Function],
                                                    "validate": [Function],
                                                    "validateField": [Function],
                                                    "validateForm": [Function],
                                                    "validateOnBlur": true,
                                                    "validateOnChange": true,
                                                    "validationSchema": undefined,
                                                    "values": Object {
                                                      "avatar": "",
                                                      "name": "",
                                                      "node": undefined,
                                                    },
                                                  }
                                                }
                                                name="name"
                                              >
                                                <Input
                                                  id="name"
                                                  name="name"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  prefix={
                                                    <Icon
                                                      style={
                                                        Object {
                                                          "color": "rgba(0,0,0,.25)",
                                                        }
                                                      }
                                                      type="user"
                                                    />
                                                  }
                                                  type="text"
                                                  value=""
                                                >
                                                  <ClearableLabeledInput
                                                    element={
                                                      <input
                                                        className="ant-input"
                                                        id="name"
                                                        name="name"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onKeyDown={[Function]}
                                                        type="text"
                                                        value=""
                                                      />
                                                    }
                                                    handleReset={[Function]}
                                                    id="name"
                                                    inputType="input"
                                                    name="name"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    prefix={
                                                      <Icon
                                                        style={
                                                          Object {
                                                            "color": "rgba(0,0,0,.25)",
                                                          }
                                                        }
                                                        type="user"
                                                      />
                                                    }
                                                    prefixCls="ant-input"
                                                    type="text"
                                                    value=""
                                                  >
                                                    <span
                                                      className="ant-input-affix-wrapper"
                                                    >
                                                      <span
                                                        className="ant-input-prefix"
                                                      >
                                                        <Icon
                                                          style={
                                                            Object {
                                                              "color": "rgba(0,0,0,.25)",
                                                            }
                                                          }
                                                          type="user"
                                                        >
                                                          <LocaleReceiver
                                                            componentName="Icon"
                                                          >
                                                            <i
                                                              aria-label="icon: user"
                                                              className="anticon anticon-user"
                                                              style={
                                                                Object {
                                                                  "color": "rgba(0,0,0,.25)",
                                                                }
                                                              }
                                                            >
                                                              <IconReact
                                                                className=""
                                                                type="user-o"
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="user"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-user"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M858.5 763.6a374 374 0 0 0-80.6-119.5 375.63 375.63 0 0 0-119.5-80.6c-.4-.2-.8-.3-1.2-.5C719.5 518 760 444.7 760 362c0-137-111-248-248-248S264 225 264 362c0 82.7 40.5 156 102.8 201.1-.4.2-.8.3-1.2.5-44.8 18.9-85 46-119.5 80.6a375.63 375.63 0 0 0-80.6 119.5A371.7 371.7 0 0 0 136 901.8a8 8 0 0 0 8 8.2h60c4.4 0 7.9-3.5 8-7.8 2-77.2 33-149.5 87.8-204.3 56.7-56.7 132-87.9 212.2-87.9s155.5 31.2 212.2 87.9C779 752.7 810 825 812 902.2c.1 4.4 3.6 7.8 8 7.8h60a8 8 0 0 0 8-8.2c-1-47.8-10.9-94.3-29.5-138.2zM512 534c-45.9 0-89.1-17.9-121.6-50.4S340 407.9 340 362c0-45.9 17.9-89.1 50.4-121.6S466.1 190 512 190s89.1 17.9 121.6 50.4S684 316.1 684 362c0 45.9-17.9 89.1-50.4 121.6S557.9 534 512 534z"
                                                                    key="svg-user-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </i>
                                                          </LocaleReceiver>
                                                        </Icon>
                                                      </span>
                                                      <input
                                                        className="ant-input"
                                                        id="name"
                                                        name="name"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onKeyDown={[Function]}
                                                        style={null}
                                                        type="text"
                                                        value=""
                                                      />
                                                    </span>
                                                  </ClearableLabeledInput>
                                                </Input>
                                              </FieldInner>
                                            </FormikConnect(FieldInner)>
                                          </Component>
                                        </span>
                                        <Animate
                                          animation={Object {}}
                                          component=""
                                          componentProps={Object {}}
                                          key="help"
                                          onAppear={[Function]}
                                          onEnd={[Function]}
                                          onEnter={[Function]}
                                          onLeave={[Function]}
                                          transitionAppear={true}
                                          transitionEnter={true}
                                          transitionLeave={true}
                                          transitionName="show-help"
                                        />
                                      </div>
                                    </div>
                                  </Col>
                                </div>
                              </Row>
                            </FormItem>
                          </FieldInner>
                        </FormikConnect(FieldInner)>
                      </Component>
                      <Component
                        hasFeedback={true}
                        htmlFor="name"
                        label="Tu Nodo"
                        name="node"
                      >
                        <FormikConnect(FieldInner)
                          name="node"
                        >
                          <FieldInner
                            formik={
                              Object {
                                "dirty": false,
                                "errors": Object {},
                                "handleBlur": [Function],
                                "handleChange": [Function],
                                "handleReset": [Function],
                                "handleSubmit": [Function],
                                "initialValues": Object {
                                  "avatar": "",
                                  "name": "",
                                  "node": undefined,
                                },
                                "isSubmitting": false,
                                "isValid": false,
                                "isValidating": false,
                                "registerField": [Function],
                                "resetForm": [Function],
                                "setError": [Function],
                                "setErrors": [Function],
                                "setFieldError": [Function],
                                "setFieldTouched": [Function],
                                "setFieldValue": [Function],
                                "setFormikState": [Function],
                                "setStatus": [Function],
                                "setSubmitting": [Function],
                                "setTouched": [Function],
                                "setValues": [Function],
                                "status": undefined,
                                "submitCount": 0,
                                "submitForm": [Function],
                                "touched": Object {},
                                "unregisterField": [Function],
                                "validate": [Function],
                                "validateField": [Function],
                                "validateForm": [Function],
                                "validateOnBlur": true,
                                "validateOnChange": true,
                                "validationSchema": undefined,
                                "values": Object {
                                  "avatar": "",
                                  "name": "",
                                  "node": undefined,
                                },
                              }
                            }
                            name="node"
                          >
                            <FormItem
                              hasFeedback={true}
                              help={false}
                              htmlFor="name"
                              label="Tu Nodo"
                            >
                              <Row
                                className="ant-form-item"
                                gutter={0}
                                key="row"
                              >
                                <div
                                  className="ant-row ant-form-item"
                                  style={Object {}}
                                >
                                  <Col
                                    className="ant-form-item-label"
                                  >
                                    <div
                                      className="ant-col ant-form-item-label"
                                      style={Object {}}
                                    >
                                      <label
                                        className=""
                                        htmlFor="name"
                                        onClick={[Function]}
                                        title="Tu Nodo"
                                      >
                                        Tu Nodo
                                      </label>
                                    </div>
                                  </Col>
                                  <Col
                                    className="ant-form-item-control-wrapper"
                                  >
                                    <div
                                      className="ant-col ant-form-item-control-wrapper"
                                      style={Object {}}
                                    >
                                      <div
                                        className="ant-form-item-control"
                                      >
                                        <span
                                          className="ant-form-item-children"
                                        >
                                          <Component
                                            filterOption={[Function]}
                                            name="node"
                                            optionFilterProp="children"
                                            showSearch={true}
                                          >
                                            <FormikConnect(FieldInner)
                                              name="node"
                                            >
                                              <FieldInner
                                                formik={
                                                  Object {
                                                    "dirty": false,
                                                    "errors": Object {},
                                                    "handleBlur": [Function],
                                                    "handleChange": [Function],
                                                    "handleReset": [Function],
                                                    "handleSubmit": [Function],
                                                    "initialValues": Object {
                                                      "avatar": "",
                                                      "name": "",
                                                      "node": undefined,
                                                    },
                                                    "isSubmitting": false,
                                                    "isValid": false,
                                                    "isValidating": false,
                                                    "registerField": [Function],
                                                    "resetForm": [Function],
                                                    "setError": [Function],
                                                    "setErrors": [Function],
                                                    "setFieldError": [Function],
                                                    "setFieldTouched": [Function],
                                                    "setFieldValue": [Function],
                                                    "setFormikState": [Function],
                                                    "setStatus": [Function],
                                                    "setSubmitting": [Function],
                                                    "setTouched": [Function],
                                                    "setValues": [Function],
                                                    "status": undefined,
                                                    "submitCount": 0,
                                                    "submitForm": [Function],
                                                    "touched": Object {},
                                                    "unregisterField": [Function],
                                                    "validate": [Function],
                                                    "validateField": [Function],
                                                    "validateForm": [Function],
                                                    "validateOnBlur": true,
                                                    "validateOnChange": true,
                                                    "validationSchema": undefined,
                                                    "values": Object {
                                                      "avatar": "",
                                                      "name": "",
                                                      "node": undefined,
                                                    },
                                                  }
                                                }
                                                name="node"
                                              >
                                                <Select
                                                  choiceTransitionName="zoom"
                                                  filterOption={[Function]}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  optionFilterProp="children"
                                                  showSearch={true}
                                                  transitionName="slide-up"
                                                >
                                                  <Select
                                                    allowClear={false}
                                                    autoClearSearchValue={true}
                                                    backfill={false}
                                                    choiceTransitionName="zoom"
                                                    className=""
                                                    clearIcon={
                                                      <Icon
                                                        className="ant-select-clear-icon"
                                                        theme="filled"
                                                        type="close-circle"
                                                      />
                                                    }
                                                    combobox={false}
                                                    defaultActiveFirstOption={true}
                                                    defaultOpen={false}
                                                    dropdownMatchSelectWidth={true}
                                                    dropdownMenuStyle={Object {}}
                                                    dropdownRender={[Function]}
                                                    dropdownStyle={Object {}}
                                                    filterOption={[Function]}
                                                    inputIcon={
                                                      <Icon
                                                        className="ant-select-arrow-icon"
                                                        type="down"
                                                      />
                                                    }
                                                    labelInValue={false}
                                                    menuItemSelectedIcon={
                                                      <Icon
                                                        className="ant-select-selected-icon"
                                                        type="check"
                                                      />
                                                    }
                                                    multiple={false}
                                                    notFoundContent={
                                                      <Context.Consumer>
                                                        [Function]
                                                      </Context.Consumer>
                                                    }
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onDeselect={[Function]}
                                                    onFocus={[Function]}
                                                    onInputKeyDown={[Function]}
                                                    onSearch={[Function]}
                                                    onSelect={[Function]}
                                                    optionFilterProp="children"
                                                    optionLabelProp="children"
                                                    placeholder=""
                                                    prefixCls="ant-select"
                                                    removeIcon={
                                                      <Icon
                                                        className="ant-select-remove-icon"
                                                        type="close"
                                                      />
                                                    }
                                                    showAction={
                                                      Array [
                                                        "click",
                                                      ]
                                                    }
                                                    showSearch={true}
                                                    tabIndex={0}
                                                    tags={false}
                                                    tokenSeparators={Array []}
                                                    transitionName="slide-up"
                                                  >
                                                    <SelectTrigger
                                                      ariaId="test-uuid"
                                                      backfillValue=""
                                                      combobox={false}
                                                      defaultActiveFirstOption={true}
                                                      dropdownMatchSelectWidth={true}
                                                      dropdownMenuStyle={Object {}}
                                                      dropdownRender={[Function]}
                                                      dropdownStyle={Object {}}
                                                      empty={false}
                                                      inputValue=""
                                                      menuItemSelectedIcon={
                                                        <Icon
                                                          className="ant-select-selected-icon"
                                                          type="check"
                                                        />
                                                      }
                                                      multiple={false}
                                                      onDropdownVisibleChange={[Function]}
                                                      onMenuDeselect={[Function]}
                                                      onMenuSelect={[Function]}
                                                      onPopupFocus={[Function]}
                                                      options={Array []}
                                                      prefixCls="ant-select"
                                                      showAction={
                                                        Array [
                                                          "click",
                                                        ]
                                                      }
                                                      showSearch={true}
                                                      transitionName="slide-up"
                                                      value={Array []}
                                                      visible={false}
                                                    >
                                                      <Trigger
                                                        action={Array []}
                                                        afterPopupVisibleChange={[Function]}
                                                        ariaId="test-uuid"
                                                        backfillValue=""
                                                        blurDelay={0.15}
                                                        builtinPlacements={
                                                          Object {
                                                            "bottomLeft": Object {
                                                              "offset": Array [
                                                                0,
                                                                4,
                                                              ],
                                                              "overflow": Object {
                                                                "adjustX": 0,
                                                                "adjustY": 1,
                                                              },
                                                              "points": Array [
                                                                "tl",
                                                                "bl",
                                                              ],
                                                            },
                                                            "topLeft": Object {
                                                              "offset": Array [
                                                                0,
                                                                -4,
                                                              ],
                                                              "overflow": Object {
                                                                "adjustX": 0,
                                                                "adjustY": 1,
                                                              },
                                                              "points": Array [
                                                                "bl",
                                                                "tl",
                                                              ],
                                                            },
                                                          }
                                                        }
                                                        combobox={false}
                                                        defaultActiveFirstOption={true}
                                                        defaultPopupVisible={false}
                                                        destroyPopupOnHide={false}
                                                        dropdownMatchSelectWidth={true}
                                                        dropdownMenuStyle={Object {}}
                                                        dropdownRender={[Function]}
                                                        dropdownStyle={Object {}}
                                                        focusDelay={0}
                                                        getDocument={[Function]}
                                                        getPopupClassNameFromAlign={[Function]}
                                                        hideAction={
                                                          Array [
                                                            "blur",
                                                          ]
                                                        }
                                                        inputValue=""
                                                        mask={false}
                                                        maskClosable={true}
                                                        menuItemSelectedIcon={
                                                          <Icon
                                                            className="ant-select-selected-icon"
                                                            type="check"
                                                          />
                                                        }
                                                        mouseEnterDelay={0}
                                                        mouseLeaveDelay={0.1}
                                                        multiple={false}
                                                        onDropdownVisibleChange={[Function]}
                                                        onMenuDeselect={[Function]}
                                                        onMenuSelect={[Function]}
                                                        onPopupAlign={[Function]}
                                                        onPopupVisibleChange={[Function]}
                                                        options={Array []}
                                                        popup={
                                                          <DropdownMenu
                                                            ariaId="test-uuid"
                                                            backfillValue=""
                                                            defaultActiveFirstOption={true}
                                                            dropdownMenuStyle={Object {}}
                                                            inputValue=""
                                                            menuItemSelectedIcon={
                                                              <Icon
                                                                className="ant-select-selected-icon"
                                                                type="check"
                                                              />
                                                            }
                                                            menuItems={Array []}
                                                            multiple={false}
                                                            onMenuDeselect={[Function]}
                                                            onMenuSelect={[Function]}
                                                            onPopupFocus={[Function]}
                                                            prefixCls="ant-select-dropdown"
                                                            value={Array []}
                                                            visible={false}
                                                          />
                                                        }
                                                        popupAlign={Object {}}
                                                        popupClassName="ant-select-dropdown--single"
                                                        popupPlacement="bottomLeft"
                                                        popupStyle={Object {}}
                                                        popupTransitionName="slide-up"
                                                        popupVisible={false}
                                                        prefixCls="ant-select-dropdown"
                                                        showAction={
                                                          Array [
                                                            "click",
                                                          ]
                                                        }
                                                        showSearch={true}
                                                        transitionName="slide-up"
                                                        value={Array []}
                                                        visible={false}
                                                      >
                                                        <div
                                                          className="ant-select ant-select-enabled"
                                                          key="trigger"
                                                          onBlur={[Function]}
                                                          onClick={[Function]}
                                                          onFocus={[Function]}
                                                          onMouseDown={[Function]}
                                                          onMouseOut={[Function]}
                                                          onMouseUp={[Function]}
                                                          onTouchStart={[Function]}
                                                        >
                                                          <div
                                                            aria-autocomplete="list"
                                                            aria-controls="test-uuid"
                                                            aria-expanded={false}
                                                            aria-haspopup="true"
                                                            className="ant-select-selection
            ant-select-selection--single"
                                                            key="selection"
                                                            onKeyDown={[Function]}
                                                            role="combobox"
                                                            tabIndex={0}
                                                          >
                                                            <div
                                                              className="ant-select-selection__rendered"
                                                            >
                                                              <div
                                                                className="ant-select-search ant-select-search--inline"
                                                                key="input"
                                                                style={
                                                                  Object {
                                                                    "display": "none",
                                                                  }
                                                                }
                                                              >
                                                                <div
                                                                  className="ant-select-search__field__wrap"
                                                                >
                                                                  <input
                                                                    autoComplete="off"
                                                                    className="ant-select-search__field"
                                                                    onChange={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    value=""
                                                                  />
                                                                  <span
                                                                    className="ant-select-search__field__mirror"
                                                                  >
                                                                    Â 
                                                                  </span>
                                                                </div>
                                                              </div>
                                                            </div>
                                                            <span
                                                              className="ant-select-arrow"
                                                              key="arrow"
                                                              onClick={[Function]}
                                                              style={
                                                                Object {
                                                                  "WebkitUserSelect": "none",
                                                                  "userSelect": "none",
                                                                }
                                                              }
                                                              unselectable="on"
                                                            >
                                                              <Icon
                                                                className="ant-select-arrow-icon"
                                                                type="down"
                                                              >
                                                                <LocaleReceiver
                                                                  componentName="Icon"
                                                                >
                                                                  <i
                                                                    aria-label="icon: down"
                                                                    className="anticon anticon-down ant-select-arrow-icon"
                                                                  >
                                                                    <IconReact
                                                                      className=""
                                                                      type="down-o"
                                                                    >
                                                                      <svg
                                                                        aria-hidden="true"
                                                                        className=""
                                                                        data-icon="down"
                                                                        fill="currentColor"
                                                                        focusable="false"
                                                                        height="1em"
                                                                        key="svg-down"
                                                                        viewBox="64 64 896 896"
                                                                        width="1em"
                                                                      >
                                                                        <path
                                                                          d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                                                                          key="svg-down-svg-0"
                                                                        />
                                                                      </svg>
                                                                    </IconReact>
                                                                  </i>
                                                                </LocaleReceiver>
                                                              </Icon>
                                                            </span>
                                                          </div>
                                                        </div>
                                                      </Trigger>
                                                    </SelectTrigger>
                                                  </Select>
                                                </Select>
                                              </FieldInner>
                                            </FormikConnect(FieldInner)>
                                          </Component>
                                        </span>
                                        <Animate
                                          animation={Object {}}
                                          component=""
                                          componentProps={Object {}}
                                          key="help"
                                          onAppear={[Function]}
                                          onEnd={[Function]}
                                          onEnter={[Function]}
                                          onLeave={[Function]}
                                          transitionAppear={true}
                                          transitionEnter={true}
                                          transitionLeave={true}
                                          transitionName="show-help"
                                        />
                                      </div>
                                    </div>
                                  </Col>
                                </div>
                              </Row>
                            </FormItem>
                          </FieldInner>
                        </FormikConnect(FieldInner)>
                      </Component>
                      <Component
                        htmlFor="avatar"
                        label="Foto de Perfil"
                        name="avatar"
                      >
                        <FormikConnect(FieldInner)
                          name="avatar"
                        >
                          <FieldInner
                            formik={
                              Object {
                                "dirty": false,
                                "errors": Object {},
                                "handleBlur": [Function],
                                "handleChange": [Function],
                                "handleReset": [Function],
                                "handleSubmit": [Function],
                                "initialValues": Object {
                                  "avatar": "",
                                  "name": "",
                                  "node": undefined,
                                },
                                "isSubmitting": false,
                                "isValid": false,
                                "isValidating": false,
                                "registerField": [Function],
                                "resetForm": [Function],
                                "setError": [Function],
                                "setErrors": [Function],
                                "setFieldError": [Function],
                                "setFieldTouched": [Function],
                                "setFieldValue": [Function],
                                "setFormikState": [Function],
                                "setStatus": [Function],
                                "setSubmitting": [Function],
                                "setTouched": [Function],
                                "setValues": [Function],
                                "status": undefined,
                                "submitCount": 0,
                                "submitForm": [Function],
                                "touched": Object {},
                                "unregisterField": [Function],
                                "validate": [Function],
                                "validateField": [Function],
                                "validateForm": [Function],
                                "validateOnBlur": true,
                                "validateOnChange": true,
                                "validationSchema": undefined,
                                "values": Object {
                                  "avatar": "",
                                  "name": "",
                                  "node": undefined,
                                },
                              }
                            }
                            name="avatar"
                          >
                            <FormItem
                              hasFeedback={false}
                              help={false}
                              htmlFor="avatar"
                              label="Foto de Perfil"
                            >
                              <Row
                                className="ant-form-item"
                                gutter={0}
                                key="row"
                              >
                                <div
                                  className="ant-row ant-form-item"
                                  style={Object {}}
                                >
                                  <Col
                                    className="ant-form-item-label"
                                  >
                                    <div
                                      className="ant-col ant-form-item-label"
                                      style={Object {}}
                                    >
                                      <label
                                        className=""
                                        htmlFor="avatar"
                                        onClick={[Function]}
                                        title="Foto de Perfil"
                                      >
                                        Foto de Perfil
                                      </label>
                                    </div>
                                  </Col>
                                  <Col
                                    className="ant-form-item-control-wrapper"
                                  >
                                    <div
                                      className="ant-col ant-form-item-control-wrapper"
                                      style={Object {}}
                                    >
                                      <div
                                        className="ant-form-item-control"
                                      >
                                        <span
                                          className="ant-form-item-children"
                                        >
                                          <AvatarUploader
                                            id="avatar"
                                            imageUrl=""
                                            onChange={[Function]}
                                          >
                                            <Upload
                                              accept="image/*"
                                              action=""
                                              beforeUpload={[Function]}
                                              className="avatar-uploader"
                                              data={Object {}}
                                              disabled={false}
                                              listType="picture-card"
                                              multiple={false}
                                              name="avatar"
                                              showUploadList={false}
                                              supportServerRender={true}
                                              type="select"
                                            >
                                              <span
                                                className="avatar-uploader ant-upload-picture-card-wrapper"
                                              >
                                                <div
                                                  className="ant-upload ant-upload-select ant-upload-select-picture-card"
                                                >
                                                  <Upload
                                                    accept="image/*"
                                                    action=""
                                                    beforeUpload={[Function]}
                                                    component="span"
                                                    customRequest={null}
                                                    data={Object {}}
                                                    disabled={false}
                                                    headers={Object {}}
                                                    listType="picture-card"
                                                    multipart={false}
                                                    multiple={false}
                                                    name="avatar"
                                                    onError={[Function]}
                                                    onProgress={[Function]}
                                                    onReady={[Function]}
                                                    onStart={[Function]}
                                                    onSuccess={[Function]}
                                                    openFileDialogOnClick={true}
                                                    prefixCls="ant-upload"
                                                    showUploadList={false}
                                                    supportServerRender={true}
                                                    type="select"
                                                    withCredentials={false}
                                                  >
                                                    <AjaxUploader
                                                      accept="image/*"
                                                      action=""
                                                      beforeUpload={[Function]}
                                                      component="span"
                                                      customRequest={null}
                                                      data={Object {}}
                                                      disabled={false}
                                                      headers={Object {}}
                                                      listType="picture-card"
                                                      multipart={false}
                                                      multiple={false}
                                                      name="avatar"
                                                      onError={[Function]}
                                                      onProgress={[Function]}
                                                      onReady={[Function]}
                                                      onStart={[Function]}
                                                      onSuccess={[Function]}
                                                      openFileDialogOnClick={true}
                                                      prefixCls="ant-upload"
                                                      showUploadList={false}
                                                      supportServerRender={true}
                                                      type="select"
                                                      withCredentials={false}
                                                    >
                                                      <span
                                                        className="ant-upload"
                                                        onClick={[Function]}
                                                        onDragOver={[Function]}
                                                        onDrop={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="button"
                                                        tabIndex="0"
                                                      >
                                                        <input
                                                          accept="image/*"
                                                          directory={null}
                                                          key="rc-upload-1565395200000-2"
                                                          multiple={false}
                                                          onChange={[Function]}
                                                          onClick={[Function]}
                                                          style={
                                                            Object {
                                                              "display": "none",
                                                            }
                                                          }
                                                          type="file"
                                                          webkitdirectory={null}
                                                        />
                                                        <div>
                                                          <Icon
                                                            type="plus"
                                                          >
                                                            <LocaleReceiver
                                                              componentName="Icon"
                                                            >
                                                              <i
                                                                aria-label="icon: plus"
                                                                className="anticon anticon-plus"
                                                              >
                                                                <IconReact
                                                                  className=""
                                                                  type="plus-o"
                                                                >
                                                                  <svg
                                                                    aria-hidden="true"
                                                                    className=""
                                                                    data-icon="plus"
                                                                    fill="currentColor"
                                                                    focusable="false"
                                                                    height="1em"
                                                                    key="svg-plus"
                                                                    viewBox="64 64 896 896"
                                                                    width="1em"
                                                                  >
                                                                    <path
                                                                      d="M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z"
                                                                      key="svg-plus-svg-0"
                                                                    />
                                                                    <path
                                                                      d="M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z"
                                                                      key="svg-plus-svg-1"
                                                                    />
                                                                  </svg>
                                                                </IconReact>
                                                              </i>
                                                            </LocaleReceiver>
                                                          </Icon>
                                                          <div
                                                            className="ant-upload-text"
                                                          >
                                                            Upload
                                                          </div>
                                                        </div>
                                                      </span>
                                                    </AjaxUploader>
                                                  </Upload>
                                                </div>
                                              </span>
                                            </Upload>
                                          </AvatarUploader>
                                        </span>
                                        <Animate
                                          animation={Object {}}
                                          component=""
                                          componentProps={Object {}}
                                          key="help"
                                          onAppear={[Function]}
                                          onEnd={[Function]}
                                          onEnter={[Function]}
                                          onLeave={[Function]}
                                          transitionAppear={true}
                                          transitionEnter={true}
                                          transitionLeave={true}
                                          transitionName="show-help"
                                        />
                                      </div>
                                    </div>
                                  </Col>
                                </div>
                              </Row>
                            </FormItem>
                          </FieldInner>
                        </FormikConnect(FieldInner)>
                      </Component>
                      <Component>
                        <FormikConnect(FieldInner)>
                          <FieldInner
                            formik={
                              Object {
                                "dirty": false,
                                "errors": Object {},
                                "handleBlur": [Function],
                                "handleChange": [Function],
                                "handleReset": [Function],
                                "handleSubmit": [Function],
                                "initialValues": Object {
                                  "avatar": "",
                                  "name": "",
                                  "node": undefined,
                                },
                                "isSubmitting": false,
                                "isValid": false,
                                "isValidating": false,
                                "registerField": [Function],
                                "resetForm": [Function],
                                "setError": [Function],
                                "setErrors": [Function],
                                "setFieldError": [Function],
                                "setFieldTouched": [Function],
                                "setFieldValue": [Function],
                                "setFormikState": [Function],
                                "setStatus": [Function],
                                "setSubmitting": [Function],
                                "setTouched": [Function],
                                "setValues": [Function],
                                "status": undefined,
                                "submitCount": 0,
                                "submitForm": [Function],
                                "touched": Object {},
                                "unregisterField": [Function],
                                "validate": [Function],
                                "validateField": [Function],
                                "validateForm": [Function],
                                "validateOnBlur": true,
                                "validateOnChange": true,
                                "validationSchema": undefined,
                                "values": Object {
                                  "avatar": "",
                                  "name": "",
                                  "node": undefined,
                                },
                              }
                            }
                          >
                            <FormItem
                              hasFeedback={false}
                              help={false}
                            >
                              <Row
                                className="ant-form-item"
                                gutter={0}
                                key="row"
                              >
                                <div
                                  className="ant-row ant-form-item"
                                  style={Object {}}
                                >
                                  <Col
                                    className="ant-form-item-control-wrapper"
                                  >
                                    <div
                                      className="ant-col ant-form-item-control-wrapper"
                                      style={Object {}}
                                    >
                                      <div
                                        className="ant-form-item-control"
                                      >
                                        <span
                                          className="ant-form-item-children"
                                        >
                                          <Button
                                            block={false}
                                            className="account-form-button"
                                            ghost={false}
                                            htmlType="submit"
                                            loading={false}
                                            type="primary"
                                          >
                                            <Wave>
                                              <button
                                                className="ant-btn account-form-button ant-btn-primary"
                                                onClick={[Function]}
                                                type="submit"
                                              >
                                                <span
                                                  key=".0"
                                                >
                                                  Registrarme
                                                </span>
                                              </button>
                                            </Wave>
                                          </Button>
                                        </span>
                                        <Animate
                                          animation={Object {}}
                                          component=""
                                          componentProps={Object {}}
                                          key="help"
                                          onAppear={[Function]}
                                          onEnd={[Function]}
                                          onEnter={[Function]}
                                          onLeave={[Function]}
                                          transitionAppear={true}
                                          transitionEnter={true}
                                          transitionLeave={true}
                                          transitionName="show-help"
                                        />
                                      </div>
                                    </div>
                                  </Col>
                                </div>
                              </Row>
                            </FormItem>
                          </FieldInner>
                        </FormikConnect(FieldInner)>
                      </Component>
                    </form>
                  </Form>
                </FieldInner>
              </FormikConnect(FieldInner)>
            </Form>
          </Formik>
        </AccountForm>
        <GoToLogin
          handleGoToLogin={[Function]}
        >
          <div
            className="or-login"
          >
            <p>
              O 
              <Button
                block={false}
                ghost={false}
                htmlType="button"
                loading={false}
                onClick={[Function]}
                type="link"
              >
                <button
                  className="ant-btn ant-btn-link"
                  onClick={[Function]}
                  type="button"
                >
                  <span
                    key=".0"
                  >
                    Ingresa con tu frase secreta
                  </span>
                </button>
              </Button>
            </p>
          </div>
        </GoToLogin>
      </div>
    </div>
  </OnlineRegistration>
</Registration>
`;

exports[`Storyshots Registration When Offline 1`] = `
<Registration
  isOnline={false}
>
  <OfflineRegistration>
    <div
      className="registration-page registration-page-offline"
    >
      <h3>
        Bienvenido!
      </h3>
      <p>
        Lamentablemente estÃ¡s desconectado de la red de Soporte Remoto.
      </p>
      <p>
        Verifica que estÃ¡s conectado a tu Red Wifi.
      </p>
    </div>
  </OfflineRegistration>
</Registration>
`;
